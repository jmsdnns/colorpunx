(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/index"],{

/***/ "./components/colors":
/*!***************************!*\
  !*** ./components/colors ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const colors = {"#5b4933": {"id": 1, "name": "#5b4933", "description": "#5b4933 is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "1cbe9d0b8ab760ce1ddf14b781c4466b", "image": "https://gateway.pinata.cloud/ipfs/QmRLJDVvbR7Rg7UW48c7sYAKkuNiCcpWmdFDcnUVCoNh8A?filename=colorpunx1.png", "punks": [1398], "external_url": "https://colorpunx.io/colors?i=1&name=#5b4933", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954170925254180865"}, "#382d1f": {"id": 2, "name": "#382d1f", "description": "#382d1f is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "26478605ec2beb72a1eabbc236906fe3", "image": "https://gateway.pinata.cloud/ipfs/QmcuvrN3eKWBs28NZW1Gm9sGFH4F4ZtWwfYfAZCoYevByL?filename=colorpunx2.png", "punks": [2804], "external_url": "https://colorpunx.io/colors?i=2&name=#382d1f", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954172024765808641"}, "#baaca2": {"id": 3, "name": "#baaca2", "description": "#baaca2 is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "c36ace9c90fd854002e37f8cab6f6cec", "image": "https://gateway.pinata.cloud/ipfs/QmU2YFd9VMTbxFmM1dMQzFhn3wnJx5EuKmNNM9BzAa8fFr?filename=colorpunx3.png", "punks": [3402], "external_url": "https://colorpunx.io/colors?i=3&name=#baaca2", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954173124277436417"}, "#6b6361": {"id": 4, "name": "#6b6361", "description": "#6b6361 is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "992f05fbff6027ce3142f38244ea4649", "image": "https://gateway.pinata.cloud/ipfs/QmWEKYvt4sFWh6zeDDVPW8FgnXVr7jWo2ZbEbKDYEeemmY?filename=colorpunx4.png", "punks": [3455], "external_url": "https://colorpunx.io/colors?i=4&name=#6b6361", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954174223789064193"}, "#949593": {"id": 5, "name": "#949593", "description": "#949593 is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "ba7c997f566f97c706b79174931d1d3f", "image": "https://gateway.pinata.cloud/ipfs/QmeZndczPf6MrPDMTXfCAwXSiy9ZMEwNscCryDAMpym9dd?filename=colorpunx5.png", "punks": [5314], "external_url": "https://colorpunx.io/colors?i=5&name=#949593", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954175323300691969"}, "#a4a3a0": {"id": 6, "name": "#a4a3a0", "description": "#a4a3a0 is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "e69bfafb67111c97f7bd1209758bf1b0", "image": "https://gateway.pinata.cloud/ipfs/QmbHvox3jSGttwVF2E5SjHV7AXYAqE7KvRPDSxDfrFf6jZ?filename=colorpunx6.png", "punks": [5314], "external_url": "https://colorpunx.io/colors?i=6&name=#a4a3a0", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954176422812319745"}, "#b8b4ac": {"id": 7, "name": "#b8b4ac", "description": "#b8b4ac is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "df39ff946ba40e647a0daa6db286f94e", "image": "https://gateway.pinata.cloud/ipfs/QmWZEXPt6izgUtrckeu9F7rdkTTEHdBmpvGy3jZg9TcTnF?filename=colorpunx7.png", "punks": [5314], "external_url": "https://colorpunx.io/colors?i=7&name=#b8b4ac", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954177522323947521"}, "#725d43": {"id": 8, "name": "#725d43", "description": "#725d43 is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "3a361a08280ce79d50aafe2012ed5caf", "image": "https://gateway.pinata.cloud/ipfs/QmczCWTq1ZhhiiePjKeRbAZaFjbj3tNumgjZSu8XBBzCMG?filename=colorpunx8.png", "punks": [5453], "external_url": "https://colorpunx.io/colors?i=8&name=#725d43", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954178621835575297"}, "#251409": {"id": 9, "name": "#251409", "description": "#251409 is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "c7dfb2f7cefde5ec4e21e52579895c84", "image": "https://gateway.pinata.cloud/ipfs/QmZ54g83oYBEyh79LiJCb9o3529wuTziTY6dHEJKVsBJrn?filename=colorpunx9.png", "punks": [6266], "external_url": "https://colorpunx.io/colors?i=9&name=#251409", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954179721347203073"}, "#8f8254": {"id": 10, "name": "#8f8254", "description": "#8f8254 is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "615c1a8175d7ae43fea0cea03b371947", "image": "https://gateway.pinata.cloud/ipfs/QmWJXZWbF8AZu5z7Z1wxPkK27C6s5yc8Bke21HgZjJdovo?filename=colorpunx10.png", "punks": [6704], "external_url": "https://colorpunx.io/colors?i=10&name=#8f8254", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954180820858830849"}, "#3b210f": {"id": 11, "name": "#3b210f", "description": "#3b210f is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "27c51b00050c7af32105ecae5e42898c", "image": "https://gateway.pinata.cloud/ipfs/QmYT2vxxL3hzccD4beuxtx1xHE7JDzan7hVJhTQ3LEAjKb?filename=colorpunx11.png", "punks": [8186], "external_url": "https://colorpunx.io/colors?i=11&name=#3b210f", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954183019882086401"}, "#ddbeba": {"id": 12, "name": "#ddbeba", "description": "#ddbeba is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "250e70456b8ac7a13156d01dc10d9430", "image": "https://gateway.pinata.cloud/ipfs/QmaQcYwUtfjBeXyLQoSeBkt1J7rX8tvH87gGFGYVAm1MNH?filename=colorpunx12.png", "punks": [8750], "external_url": "https://colorpunx.io/colors?i=12&name=#ddbeba", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954184119393714177"}, "#473929": {"id": 13, "name": "#473929", "description": "#473929 is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "25492222e57f5c0e679b83b0ecc5aadf", "image": "https://gateway.pinata.cloud/ipfs/QmT94Nx843yVbwcvkM21TTpZKP3Vi6EfYL1DtggYMAZsvp?filename=colorpunx13.png", "punks": [9268], "external_url": "https://colorpunx.io/colors?i=13&name=#473929", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954185218905341953"}, "#b0a39b": {"id": 14, "name": "#b0a39b", "description": "#b0a39b is one of 222 colors in the cryptopunx color pallette. It is used by 1 unique punks", "hash": "f32b86da4adb43952ed6a678f16e9d04", "image": "https://gateway.pinata.cloud/ipfs/QmbgsGoYNC2VVmSHtvqh8cMwWc4FUf3d89ePeU5kPDyxTh?filename=colorpunx14.png", "punks": [9957], "external_url": "https://colorpunx.io/colors?i=14&name=#b0a39b", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954186318416969729"}, "#36462d": {"id": 15, "name": "#36462d", "description": "#36462d is one of 222 colors in the cryptopunx color pallette. It is used by 2 unique punks", "hash": "5b1f4f3b0de442028e6f4baad62069ca", "image": "https://gateway.pinata.cloud/ipfs/QmaBt5Xg4CA3TeszrcvmN28b8H8A2VqG8n596yPzgfcnTD?filename=colorpunx15.png", "punks": [1935, 9955], "external_url": "https://colorpunx.io/colors?i=15&name=#36462d", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954187417928597505"}, "#43513b": {"id": 16, "name": "#43513b", "description": "#43513b is one of 222 colors in the cryptopunx color pallette. It is used by 2 unique punks", "hash": "8004b7585c534a9b48fe4008ab884e0f", "image": "https://gateway.pinata.cloud/ipfs/QmSiMRDQK7zN7c6csCYNKvnHnpcXVGbUxLgBhhPUP6hmVu?filename=colorpunx16.png", "punks": [1935, 9955], "external_url": "https://colorpunx.io/colors?i=16&name=#43513b", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954188517440225281"}, "#7f4d36": {"id": 17, "name": "#7f4d36", "description": "#7f4d36 is one of 222 colors in the cryptopunx color pallette. It is used by 2 unique punks", "hash": "4a50e7fea455a01e88aebed6f4b28ec7", "image": "https://gateway.pinata.cloud/ipfs/QmX8jk1ZCBnFKk9WaoaQAWMNZTJDwYZcWUgqsYDgxkBApZ?filename=colorpunx17.png", "punks": [2319, 6602], "external_url": "https://colorpunx.io/colors?i=17&name=#7f4d36", "uri": "https://opensea.io"}, "#32412a": {"id": 18, "name": "#32412a", "description": "#32412a is one of 222 colors in the cryptopunx color pallette. It is used by 2 unique punks", "hash": "b889aa4582f5f3f47e4a18de9483e8d2", "image": "https://gateway.pinata.cloud/ipfs/QmfYtkAyZxRnqFgHfLUDN9yv75TUQxfircUAU8vjMq2nqK?filename=colorpunx18.png", "punks": [4874, 8307], "external_url": "https://colorpunx.io/colors?i=18&name=#32412a", "uri": "https://opensea.io"}, "#596d48": {"id": 19, "name": "#596d48", "description": "#596d48 is one of 222 colors in the cryptopunx color pallette. It is used by 2 unique punks", "hash": "0b612ca03049fa94bef96ed9da1e6ed9", "image": "https://gateway.pinata.cloud/ipfs/QmfVzKhD7adCWJn2JPn1pyjmasPwBQxpktFb4fnUKmvNsi?filename=colorpunx19.png", "punks": [5253, 9203], "external_url": "https://colorpunx.io/colors?i=19&name=#596d48", "uri": "https://opensea.io"}, "#5d2310": {"id": 20, "name": "#5d2310", "description": "#5d2310 is one of 222 colors in the cryptopunx color pallette. It is used by 2 unique punks", "hash": "26601df24756c8a25a2dce9963ec62dd", "image": "https://gateway.pinata.cloud/ipfs/Qme8C6mHCB5xeQoKDq3pUi4RmAobsH69woLgUM2BnaFhJt?filename=colorpunx20.png", "punks": [7185, 8571], "external_url": "https://colorpunx.io/colors?i=20&name=#5d2310", "uri": "https://opensea.io"}, "#dcdcdc": {"id": 21, "name": "#dcdcdc", "description": "#dcdcdc is one of 222 colors in the cryptopunx color pallette. It is used by 3 unique punks", "hash": "5d8fbda6c751b61a8962c5f82ab7b3d9", "image": "https://gateway.pinata.cloud/ipfs/QmWvXQWnXYnSotCxFPUPjc84KQoDfDXpfNz6RQaknFXGFG?filename=colorpunx21.png", "punks": [2133, 5135, 6893], "external_url": "https://colorpunx.io/colors?i=21&name=#dcdcdc", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954194014998364161"}, "#cad6e1": {"id": 22, "name": "#cad6e1", "description": "#cad6e1 is one of 222 colors in the cryptopunx color pallette. It is used by 3 unique punks", "hash": "94eda6c2c2e7348089ec6383e12b8390", "image": "https://gateway.pinata.cloud/ipfs/QmXDUr9ZQCyhVpvxvRphaQ9QKzjEJDFCpBM8UJKTTNrQvk?filename=colorpunx22.png", "punks": [5010, 7689, 9957], "external_url": "https://colorpunx.io/colors?i=22&name=#cad6e1", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954195114509991937"}, "#e6aeae": {"id": 23, "name": "#e6aeae", "description": "#e6aeae is one of 222 colors in the cryptopunx color pallette. It is used by 3 unique punks", "hash": "bc69f8bbda0236f01319829fef4413e4", "image": "https://gateway.pinata.cloud/ipfs/QmXB3TMcr8dQ2NVnvMgyZqnAF7VQnUika1cghgikXjFR7Z?filename=colorpunx23.png", "punks": [6051, 7496, 8000], "external_url": "https://colorpunx.io/colors?i=23&name=#e6aeae", "uri": "X"}, "#8ea59f": {"id": 24, "name": "#8ea59f", "description": "#8ea59f is one of 222 colors in the cryptopunx color pallette. It is used by 4 unique punks", "hash": "8137bf2a983603518a39604c4b8d6fac", "image": "https://gateway.pinata.cloud/ipfs/Qme1XXC5nLi1yVqXmaAscq3jLfVUWPrP5cBLNnt17PMmmy?filename=colorpunx24.png", "punks": [987, 5761, 7121, 7756], "external_url": "https://colorpunx.io/colors?i=24&name=#8ea59f", "uri": "X"}, "#9fc0ab": {"id": 25, "name": "#9fc0ab", "description": "#9fc0ab is one of 222 colors in the cryptopunx color pallette. It is used by 4 unique punks", "hash": "776e1dc5f25045ac054711c1c862e5ef", "image": "https://gateway.pinata.cloud/ipfs/QmVTzF5bjFfKSaLsw6dPWtg22pPzGesWgmP7d3G1LQy1jv?filename=colorpunx25.png", "punks": [987, 5761, 7121, 7756], "external_url": "https://colorpunx.io/colors?i=25&name=#9fc0ab", "uri": "X"}, "#e86570": {"id": 26, "name": "#e86570", "description": "#e86570 is one of 222 colors in the cryptopunx color pallette. It is used by 4 unique punks", "hash": "3d3b61ebdeefdf81ca664bf957b4c822", "image": "https://gateway.pinata.cloud/ipfs/QmUMDigovw1qNfc7MtUfCHSx1y4gKuWgFkH878UZjWgq7g?filename=colorpunx26.png", "punks": [987, 5761, 7121, 7756], "external_url": "https://colorpunx.io/colors?i=26&name=#e86570", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954199512556503041"}, "#dcd8a4": {"id": 27, "name": "#dcd8a4", "description": "#dcd8a4 is one of 222 colors in the cryptopunx color pallette. It is used by 4 unique punks", "hash": "50df6dca03489adaafa337e9ddc3dbaa", "image": "https://gateway.pinata.cloud/ipfs/QmTLY2A6G4q5krsrPSS5PjPuQ93teM9hW3pK8W54WfGxPB?filename=colorpunx27.png", "punks": [3747, 6184, 7606, 9400], "external_url": "https://colorpunx.io/colors?i=27&name=#dcd8a4", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954200612068130817"}, "#e8f4ff": {"id": 28, "name": "#e8f4ff", "description": "#e8f4ff is one of 222 colors in the cryptopunx color pallette. It is used by 5 unique punks", "hash": "bfb2be7d0fd1acb3ae00d4aa0efd1969", "image": "https://gateway.pinata.cloud/ipfs/QmNbZayMuFG4tkWpv3iW7E6qcy1NARkrNNF6Mb2vP6LJm6?filename=colorpunx28.png", "punks": [1780, 3119, 4101, 7288, 8767], "external_url": "https://colorpunx.io/colors?i=28&name=#e8f4ff", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954201711579758593"}, "#afa3a3": {"id": 29, "name": "#afa3a3", "description": "#afa3a3 is one of 222 colors in the cryptopunx color pallette. It is used by 5 unique punks", "hash": "5389725a7980d0a1559459a27221150a", "image": "https://gateway.pinata.cloud/ipfs/Qmeeim7Dr8hzPELpt2UTGx4LQEwoMF6RTxcxK1CkRZ8oQm?filename=colorpunx29.png", "punks": [3814, 4520, 6139, 6219, 7884], "external_url": "https://colorpunx.io/colors?i=29&name=#afa3a3", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954202811091386369"}, "#dacdbb": {"id": 30, "name": "#dacdbb", "description": "#dacdbb is one of 222 colors in the cryptopunx color pallette. It is used by 6 unique punks", "hash": "534540ebd4786f59cb9d0cadfbb8fc1a", "image": "https://gateway.pinata.cloud/ipfs/QmdznPDx8Fn7rMpuXxjcfKWFCuvgZBXC65Z1JJJzbZQUhV?filename=colorpunx30.png", "punks": [2112, 2276, 2923, 6413, 9112, 9329], "external_url": "https://colorpunx.io/colors?i=30&name=#dacdbb", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954203910603014145"}, "#75bdbd": {"id": 31, "name": "#75bdbd", "description": "#75bdbd is one of 222 colors in the cryptopunx color pallette. It is used by 6 unique punks", "hash": "d470701dfc47ea30d9825c210e07e30e", "image": "https://gateway.pinata.cloud/ipfs/QmVce4XQSWFT3KXssTnU823HaLb1gTbg34bF4ZpWWXDUEV?filename=colorpunx31.png", "punks": [2890, 3100, 3443, 5822, 6089, 7523], "external_url": "https://colorpunx.io/colors?i=31&name=#75bdbd", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954205010114641921"}, "#868377": {"id": 32, "name": "#868377", "description": "#868377 is one of 222 colors in the cryptopunx color pallette. It is used by 7 unique punks", "hash": "14186b78abd87340347a957e2751c8f6", "image": "https://gateway.pinata.cloud/ipfs/QmQupGtxmYQ4eGqPzCibHWfTm6jAJpPthmFtepnpSRx3zi?filename=colorpunx32.png", "punks": [620, 2832, 5010, 6618, 7296, 8560, 9957], "external_url": "https://colorpunx.io/colors?i=32&name=#868377", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954206109626269697"}, "#392312": {"id": 33, "name": "#392312", "description": "#392312 is one of 222 colors in the cryptopunx color pallette. It is used by 8 unique punks", "hash": "e3e8a8634b81ace08d67c460978098c3", "image": "https://gateway.pinata.cloud/ipfs/QmbZFx4GYmcmz7nn3yKR87xsNRtrcjmSiUuZnvQahQtc4u?filename=colorpunx33.png", "punks": [639, 889, 5802, 6246, 6514, 6985, 8002, 9266], "external_url": "https://colorpunx.io/colors?i=33&name=#392312", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954207209137897473"}, "#b38e7d": {"id": 34, "name": "#b38e7d", "description": "#b38e7d is one of 222 colors in the cryptopunx color pallette. It is used by 8 unique punks", "hash": "100923468c75e67289e55609de3064c5", "image": "https://gateway.pinata.cloud/ipfs/QmV9avEEytL4jLMFu2bzscrZ7ZvDaPb89uc4WSy4SBoneJ?filename=colorpunx34.png", "punks": [994, 1092, 2588, 2608, 2940, 3038, 6450, 7622], "external_url": "https://colorpunx.io/colors?i=34&name=#b38e7d", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954208308649525249"}, "#83c790": {"id": 35, "name": "#83c790", "description": "#83c790 is one of 222 colors in the cryptopunx color pallette. It is used by 9 unique punks", "hash": "0dc7085946cecf20a5e688112721b205", "image": "https://gateway.pinata.cloud/ipfs/Qma9X2X2Gj92vhEdmiRQS1Gk8SvS3UATknsZKrTS4Mjrn4?filename=colorpunx35.png", "punks": [605, 1621, 5811, 6742, 7131, 8250, 8689, 9060, 9928], "external_url": "https://colorpunx.io/colors?i=35&name=#83c790", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954209408161153025"}, "#9be0e0": {"id": 36, "name": "#9be0e0", "description": "#9be0e0 is one of 222 colors in the cryptopunx color pallette. It is used by 9 unique punks", "hash": "4e7ec0de514a843ef7ea64fc0c7c2058", "image": "https://gateway.pinata.cloud/ipfs/QmPaaKSvr5YaDrS76PSUnjzsDGxfCKrmHxhtZEVmDXLvYX?filename=colorpunx36.png", "punks": [635, 2890, 3100, 3443, 5822, 5905, 6089, 7523, 7804], "external_url": "https://colorpunx.io/colors?i=36&name=#9be0e0", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954210507672780801"}, "#c8fbfb": {"id": 37, "name": "#c8fbfb", "description": "#c8fbfb is one of 222 colors in the cryptopunx color pallette. It is used by 9 unique punks", "hash": "ab6a6e8ee2e66a877af6ab7347b681bf", "image": "https://gateway.pinata.cloud/ipfs/QmUoU8gjFZGnYxcG5YbmHD7JXjx4BhZh67meBCktYe1uWe?filename=colorpunx37.png", "punks": [635, 2890, 3100, 3443, 5822, 5905, 6089, 7523, 7804], "external_url": "https://colorpunx.io/colors?i=37&name=#c8fbfb", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954211607184408577"}, "#e8efc0": {"id": 38, "name": "#e8efc0", "description": "#e8efc0 is one of 222 colors in the cryptopunx color pallette. It is used by 9 unique punks", "hash": "df2ee6f54383cae080361c19f965949f", "image": "https://gateway.pinata.cloud/ipfs/QmYQHcw4kNi3bMxi9pkSq4KeL48SMq5vnKCKSG8o1jjpUD?filename=colorpunx38.png", "punks": [922, 3026, 3371, 4761, 5413, 7422, 7465, 8454, 8887], "external_url": "https://colorpunx.io/colors?i=38&name=#e8efc0", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954212706696036353"}, "#52422f": {"id": 39, "name": "#52422f", "description": "#52422f is one of 222 colors in the cryptopunx color pallette. It is used by 9 unique punks", "hash": "9ec5ca1d32992ae9473d591624aed47f", "image": "https://gateway.pinata.cloud/ipfs/QmQjkSbGwebjgXXziTaTg2UUwMcNzfU1EpMDbstfiteHTW?filename=colorpunx39.png", "punks": [2885, 4404, 4680, 4770, 5109, 5536, 5968, 7186, 8432], "external_url": "https://colorpunx.io/colors?i=39&name=#52422f", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954213806207664129"}, "#42503a": {"id": 40, "name": "#42503a", "description": "#42503a is one of 222 colors in the cryptopunx color pallette. It is used by 10 unique punks", "hash": "ba36dede562c6463c3c23b2e474738f1", "image": "https://gateway.pinata.cloud/ipfs/QmdsqV9ov9amHgSVLLHLaGi2gPqqXKBEb8xB7vVPaGqooh?filename=colorpunx40.png", "punks": [1119, 1478, 1886, 3493, 6275, 6491, 7458, 7756, 8780, 9804], "external_url": "https://colorpunx.io/colors?i=40&name=#42503a", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954214905719291905"}, "#577149": {"id": 41, "name": "#577149", "description": "#577149 is one of 222 colors in the cryptopunx color pallette. It is used by 10 unique punks", "hash": "ecefface356b0b95bfd09622d831109b", "image": "https://gateway.pinata.cloud/ipfs/QmWBUmkj38LxLknuPunBGtkVHU188pdvA8wEspsCupUX7r?filename=colorpunx41.png", "punks": [1119, 1478, 1886, 3493, 6275, 6491, 7458, 7756, 8780, 9804], "external_url": "https://colorpunx.io/colors?i=41&name=#577149", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954216005230919681"}, "#65523c": {"id": 42, "name": "#65523c", "description": "#65523c is one of 222 colors in the cryptopunx color pallette. It is used by 11 unique punks", "hash": "b7aa9a382375c3bdd583448a44244ad9", "image": "https://gateway.pinata.cloud/ipfs/Qmf8UcNBoZRmD7YvZCwQi7biQZQ89EcZMiUKhXskQaUGsp?filename=colorpunx42.png", "punks": [2175, 2209, 4296, 5746, 6852, 7238, 7625, 9056, 9391, 9785, 9850], "external_url": "https://colorpunx.io/colors?i=42&name=#65523c", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954217104742547457"}, "#eeeab6": {"id": 43, "name": "#eeeab6", "description": "#eeeab6 is one of 222 colors in the cryptopunx color pallette. It is used by 14 unique punks", "hash": "272e5cfa06f24b2bb6ebc3f0aee01f9b", "image": "https://gateway.pinata.cloud/ipfs/QmSfShVxikMVPAPtxnEGCHrAvGdmRiLkzHoL8PxK6bD9eH?filename=colorpunx43.png", "punks": [603, 1210, 2359, 4099, 4641, 4712, 4859, 5429, 5928, 6564, 7027, 7445, 8723, 9925], "external_url": "https://colorpunx.io/colors?i=43&name=#eeeab6", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954218204254175233"}, "#ad7e59": {"id": 44, "name": "#ad7e59", "description": "#ad7e59 is one of 222 colors in the cryptopunx color pallette. It is used by 14 unique punks", "hash": "2684e70bca0c754a39a2c482c47b86b6", "image": "https://gateway.pinata.cloud/ipfs/QmVkfMV6U8Q1wktc4w8hEsbcyPWdppduypdGCAiwjZKZuG?filename=colorpunx44.png", "punks": [1162, 1801, 2253, 2712, 3402, 3787, 3812, 4930, 5515, 5721, 5745, 7398, 7648, 8511], "external_url": "https://colorpunx.io/colors?i=44&name=#ad7e59", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954219303765803009"}, "#825032": {"id": 45, "name": "#825032", "description": "#825032 is one of 222 colors in the cryptopunx color pallette. It is used by 14 unique punks", "hash": "b4dc8f43112827817084fa8267f663df", "image": "https://gateway.pinata.cloud/ipfs/QmVA5kHCGFPYHuLFW2gqfRhc5tejfPkMBT6JEuoCXDhHuv?filename=colorpunx45.png", "punks": [2409, 2841, 3139, 3311, 4105, 5339, 5525, 5562, 5809, 6199, 6794, 8732, 9409, 9791], "external_url": "https://colorpunx.io/colors?i=45&name=#825032", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954220403277430785"}, "#9b6f4d": {"id": 46, "name": "#9b6f4d", "description": "#9b6f4d is one of 222 colors in the cryptopunx color pallette. It is used by 15 unique punks", "hash": "80ae3eb06305b4016810e11b769ddcbb", "image": "https://gateway.pinata.cloud/ipfs/QmYLAqQ6hU14NAMQGQDtejqthTF3zVQFKRXKt1p3wysGBz?filename=colorpunx46.png", "punks": [7, 123, 1311, 4420, 5860, 6030, 6242, 6577, 6706, 6814, 7503, 8034, 8167, 9938, 9957], "external_url": "https://colorpunx.io/colors?i=46&name=#9b6f4d", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954221502789058561"}, "#6a563f": {"id": 47, "name": "#6a563f", "description": "#6a563f is one of 222 colors in the cryptopunx color pallette. It is used by 15 unique punks", "hash": "4ec63b7bea85a2db9f31e98b40a07a53", "image": "https://gateway.pinata.cloud/ipfs/QmbbmqG4LJ38QKtVfZbFCFU9LcBMHCK6G7kf93oSHumo77?filename=colorpunx47.png", "punks": [372, 1021, 2491, 2711, 2924, 4156, 4178, 4464, 5217, 5577, 5795, 6145, 6915, 6965, 8219], "external_url": "https://colorpunx.io/colors?i=47&name=#6a563f", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954222602300686337"}, "#a98c6b": {"id": 48, "name": "#a98c6b", "description": "#a98c6b is one of 222 colors in the cryptopunx color pallette. It is used by 15 unique punks", "hash": "0ade464a3077bb225425112f541d1e9a", "image": "https://gateway.pinata.cloud/ipfs/QmcMR6gVqsjwxqDraWCU3AB75h41ZfGUZQ2GHn7uaLJLgK?filename=colorpunx48.png", "punks": [372, 1021, 2491, 2711, 2924, 4156, 4178, 4464, 5217, 5577, 5795, 6145, 6915, 6965, 8219], "external_url": "https://colorpunx.io/colors?i=48&name=#a98c6b", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954223701812314113"}, "#5d5d5d": {"id": 49, "name": "#5d5d5d", "description": "#5d5d5d is one of 222 colors in the cryptopunx color pallette. It is used by 15 unique punks", "hash": "a6a9ddbe4bec467d0c947f048f507aec", "image": "https://gateway.pinata.cloud/ipfs/QmX3z6wcRPRzSqUgJaSuQyPio6QB5ASDJJzrk3fmRN2KBb?filename=colorpunx49.png", "punks": [465, 1250, 1422, 3216, 3543, 4757, 5186, 5473, 5493, 6400, 7171, 7244, 7426, 7674, 7748], "external_url": "https://colorpunx.io/colors?i=49&name=#5d5d5d", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954224801323941889"}, "#e08282": {"id": 50, "name": "#e08282", "description": "#e08282 is one of 222 colors in the cryptopunx color pallette. It is used by 17 unique punks", "hash": "cf48623332bcfa556563b3562772dc07", "image": "https://gateway.pinata.cloud/ipfs/QmS5eAw6yBcUbgDM2QXwBYMf4DEneTU5cBNpGMKujhKsse?filename=colorpunx50.png", "punks": [70, 2857, 3284, 3340, 5759, 6347, 6469, 6900, 6910, 7682, 7920, 8147, 8252, 8298, 8977, 9349, 9406], "external_url": "https://colorpunx.io/colors?i=50&name=#e08282", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954225900835569665"}, "#aa7b54": {"id": 51, "name": "#aa7b54", "description": "#aa7b54 is one of 222 colors in the cryptopunx color pallette. It is used by 17 unique punks", "hash": "b6fe84e5b5d86ec83ce2c896dfbbcdd2", "image": "https://gateway.pinata.cloud/ipfs/QmaqLUjx7Qc67LQi8XRxWGi7wRoLzCwejNFN6dQDLz7e5d?filename=colorpunx51.png", "punks": [707, 1578, 1793, 1795, 2589, 2795, 4239, 4288, 5401, 5492, 5728, 6711, 7087, 7862, 8884, 9912, 9960], "external_url": "https://colorpunx.io/colors?i=51&name=#aa7b54", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954227000347197441"}, "#9bbc88": {"id": 52, "name": "#9bbc88", "description": "#9bbc88 is one of 222 colors in the cryptopunx color pallette. It is used by 18 unique punks", "hash": "0fe77ca291f4ffc7cfc3ad4308300fed", "image": "https://gateway.pinata.cloud/ipfs/QmP4QMZQq5Xr3A6g2YKMZ5zkZ11i7JFMLKAHfk8nyAwZoc?filename=colorpunx52.png", "punks": [1374, 2306, 2329, 2338, 2967, 3493, 3831, 5299, 5573, 5742, 5944, 6275, 6704, 7337, 8472, 8553, 9474, 9838], "external_url": "https://colorpunx.io/colors?i=52&name=#9bbc88", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954228099858825217"}, "#763b1a": {"id": 53, "name": "#763b1a", "description": "#763b1a is one of 222 colors in the cryptopunx color pallette. It is used by 19 unique punks", "hash": "0d1289509962f6dcbf35f402e6d2a794", "image": "https://gateway.pinata.cloud/ipfs/QmYUqDL2nZW2AfpnskWqbhNJt8jbrLtqK98apmhhXuW6xU?filename=colorpunx53.png", "punks": [219, 597, 1000, 1796, 2208, 3558, 3974, 4074, 4676, 4798, 5863, 7484, 8176, 8320, 8447, 8809, 8867, 8891, 9050], "external_url": "https://colorpunx.io/colors?i=53&name=#763b1a", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954229199370452993"}, "#eeeeee": {"id": 54, "name": "#eeeeee", "description": "#eeeeee is one of 222 colors in the cryptopunx color pallette. It is used by 19 unique punks", "hash": "666ebd2a331cc64d154afd33b7695015", "image": "https://gateway.pinata.cloud/ipfs/QmPs7th9CG5QsetekwW6xHHQDbuUkqZzCm2cVtaxuxEdNF?filename=colorpunx54.png", "punks": [315, 2381, 2624, 2742, 2836, 3468, 4268, 4424, 5668, 5748, 6840, 6958, 8365, 8896, 9149, 9188, 9193, 9423, 9796], "external_url": "https://colorpunx.io/colors?i=54&name=#eeeeee", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954230298882080769"}, "#552f16": {"id": 55, "name": "#552f16", "description": "#552f16 is one of 222 colors in the cryptopunx color pallette. It is used by 19 unique punks", "hash": "4f56ef6ad651cdcf2199a3da323c4b79", "image": "https://gateway.pinata.cloud/ipfs/QmSToPgt4BoBsUrb9MiiZWHFX1XEdU3KNRQKHzBveT7SBz?filename=colorpunx55.png", "punks": [798, 1189, 2942, 3729, 4653, 5306, 5362, 5430, 5922, 6140, 6266, 6359, 7162, 7618, 7789, 8186, 8202, 8948, 9594], "external_url": "https://colorpunx.io/colors?i=55&name=#552f16", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954231398393708545"}, "#d09c6e": {"id": 56, "name": "#d09c6e", "description": "#d09c6e is one of 222 colors in the cryptopunx color pallette. It is used by 20 unique punks", "hash": "98be3522781e47391e6d5ec6c9aa24c5", "image": "https://gateway.pinata.cloud/ipfs/QmT25T5ZYFquR3tunskMKNnuZpoQWbKnhGQHBhJCPqRr4a?filename=colorpunx56.png", "punks": [348, 825, 2387, 3032, 3084, 3230, 3283, 5120, 5125, 5804, 5914, 7420, 7889, 7977, 8105, 8141, 8263, 9145, 9648, 9959], "external_url": "https://colorpunx.io/colors?i=56&name=#d09c6e", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954232497905336321"}, "#853217": {"id": 57, "name": "#853217", "description": "#853217 is one of 222 colors in the cryptopunx color pallette. It is used by 20 unique punks", "hash": "079e1c3c719f520d86097f74a168ea51", "image": "https://gateway.pinata.cloud/ipfs/QmaEaFZEfFN6zHAxNJy2HGdeFk2uagJSbgSesE697bLKhj?filename=colorpunx57.png", "punks": [370, 1703, 2362, 3136, 3400, 3967, 4192, 4387, 4457, 4785, 5047, 6279, 6726, 7185, 7564, 7671, 8499, 8571, 8946, 9437], "external_url": "https://colorpunx.io/colors?i=57&name=#853217", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954233597416964097"}, "#da8e66": {"id": 58, "name": "#da8e66", "description": "#da8e66 is one of 222 colors in the cryptopunx color pallette. It is used by 21 unique punks", "hash": "5efc67f1b5cc488d28750daaa0f5bae0", "image": "https://gateway.pinata.cloud/ipfs/QmYiubhD4NkbZqs6ofirDokurAqaRKVtd5vNANDk8DTsaB?filename=colorpunx58.png", "punks": [389, 1481, 3182, 3362, 3766, 5093, 5327, 5410, 5477, 6494, 7297, 7571, 7578, 7770, 8624, 8677, 8748, 8756, 9162, 9547, 9565], "external_url": "https://colorpunx.io/colors?i=58&name=#da8e66", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954234696928591873"}, "#b66f4e": {"id": 59, "name": "#b66f4e", "description": "#b66f4e is one of 222 colors in the cryptopunx color pallette. It is used by 23 unique punks", "hash": "2a58af615c2ea5a1474a6abe26ccbc11", "image": "https://gateway.pinata.cloud/ipfs/QmYaGCvhZ31d1BPazaZH3kwn4yJJRVNVkf95Saz3rGto1Z?filename=colorpunx59.png", "punks": [562, 918, 1762, 2319, 2377, 2767, 3130, 3174, 3555, 4505, 4774, 4920, 4923, 6188, 6602, 6976, 7298, 7539, 7602, 8036, 8561, 9084, 9436], "external_url": "https://colorpunx.io/colors?i=59&name=#b66f4e", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954235796440219649"}, "#5c7f91": {"id": 60, "name": "#5c7f91", "description": "#5c7f91 is one of 222 colors in the cryptopunx color pallette. It is used by 23 unique punks", "hash": "3fe8c4d82b0c85d78663ed44acec53cc", "image": "https://gateway.pinata.cloud/ipfs/QmavbicimR27hpAjm3rn5G1jd6mFEGUYs6YX8y2mpkSDFs?filename=colorpunx60.png", "punks": [756, 778, 949, 1371, 1671, 2829, 4268, 4417, 5316, 5347, 7250, 7266, 7786, 7872, 7875, 7985, 8038, 8169, 8570, 8841, 8961, 8986, 9792], "external_url": "https://colorpunx.io/colors?i=60&name=#5c7f91", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954236895951847425"}, "#6a8ea0": {"id": 61, "name": "#6a8ea0", "description": "#6a8ea0 is one of 222 colors in the cryptopunx color pallette. It is used by 23 unique punks", "hash": "c1951cacd050b3b8e563e74cdfe4e285", "image": "https://gateway.pinata.cloud/ipfs/QmdRFTa8eEhDvak2dHbvpHfHXUaDJQJgGuJ4zwr1fjTh1s?filename=colorpunx61.png", "punks": [756, 778, 949, 1371, 1671, 2829, 4268, 4417, 5316, 5347, 7250, 7266, 7786, 7872, 7875, 7985, 8038, 8169, 8570, 8841, 8961, 8986, 9792], "external_url": "https://colorpunx.io/colors?i=61&name=#6a8ea0", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954237995463475201"}, "#352410": {"id": 62, "name": "#352410", "description": "#352410 is one of 222 colors in the cryptopunx color pallette. It is used by 24 unique punks", "hash": "eb53639c0c5dc4c26be3eeb61a81f0b0", "image": "https://gateway.pinata.cloud/ipfs/QmRLP4cex99wrPb7X9eJMivkpoRrhKX3auRfoHLH5bWZTe?filename=colorpunx62.png", "punks": [372, 1021, 2140, 2243, 2386, 2460, 2491, 2711, 2924, 4156, 4178, 4464, 5217, 5314, 5577, 5795, 6145, 6915, 6965, 7191, 8219, 8498, 9265, 9280], "external_url": "https://colorpunx.io/colors?i=62&name=#352410", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954239094975102977"}, "#856f56": {"id": 63, "name": "#856f56", "description": "#856f56 is one of 222 colors in the cryptopunx color pallette. It is used by 24 unique punks", "hash": "4da3dc11ab3ed4fe740d69dfcb2bbab3", "image": "https://gateway.pinata.cloud/ipfs/QmR8uf16YDT7ZqVfqDpKByXnxczE11z2QZW1ay1q7TLRUX?filename=colorpunx63.png", "punks": [372, 1021, 2140, 2243, 2386, 2460, 2491, 2711, 2924, 4156, 4178, 4464, 5217, 5314, 5577, 5795, 6145, 6915, 6965, 7191, 8219, 8498, 9265, 9280], "external_url": "https://colorpunx.io/colors?i=63&name=#856f56", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954241293998358529"}, "#a48560": {"id": 64, "name": "#a48560", "description": "#a48560 is one of 222 colors in the cryptopunx color pallette. It is used by 24 unique punks", "hash": "8ca71db439261a7806f4a49af9c84056", "image": "https://gateway.pinata.cloud/ipfs/QmPvGjMMQHjwy9uMm2axKxr7vHKGtHSMYDHf3xxZYN11L4?filename=colorpunx64.png", "punks": [533, 1271, 1363, 1499, 1753, 2364, 3099, 3601, 3685, 3691, 3762, 3943, 4458, 5453, 6060, 6639, 6832, 6971, 7048, 7206, 7624, 8195, 9268, 9622], "external_url": "https://colorpunx.io/colors?i=64&name=#a48560", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954241293998358529"}, "#826849": {"id": 65, "name": "#826849", "description": "#826849 is one of 222 colors in the cryptopunx color pallette. It is used by 25 unique punks", "hash": "a6d2be00cbc6536e8bfef7c7463101da", "image": "https://gateway.pinata.cloud/ipfs/QmPGUTLkdg9dBtNpFL2opTBUPm5CJiWV8LbXhaG59AC9CC?filename=colorpunx65.png", "punks": [50, 456, 577, 633, 718, 777, 1193, 1362, 1398, 2415, 2776, 2804, 3342, 3447, 3456, 4026, 4121, 4724, 5528, 6471, 6968, 8041, 8384, 9292, 9658], "external_url": "https://colorpunx.io/colors?i=65&name=#826849", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954242393509986305"}, "#999999": {"id": 66, "name": "#999999", "description": "#999999 is one of 222 colors in the cryptopunx color pallette. It is used by 25 unique punks", "hash": "16b42e8017781ad156bc0d40cffdbe3a", "image": "https://gateway.pinata.cloud/ipfs/QmdHDegDyG1d3mgN5kSDYab2yJo6Rf14hmgriB38GYGf5W?filename=colorpunx66.png", "punks": [99, 416, 512, 1447, 2356, 2886, 3896, 4389, 4653, 6634, 6670, 6926, 7501, 8305, 8328, 8700, 8729, 8860, 8974, 9235, 9476, 9778, 9901, 9951, 9953], "external_url": "https://colorpunx.io/colors?i=66&name=#999999", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954243493021614081"}, "#af38a1": {"id": 67, "name": "#af38a1", "description": "#af38a1 is one of 222 colors in the cryptopunx color pallette. It is used by 26 unique punks", "hash": "2414e484b5508b9e4b28e0621d16257a", "image": "https://gateway.pinata.cloud/ipfs/QmVBDdAxqijxTspn5iefCeNpLxfUzQonmvDL6KRT4xrQff?filename=colorpunx67.png", "punks": [287, 598, 628, 729, 773, 839, 992, 1041, 2162, 2390, 3183, 3202, 3811, 4254, 4257, 5121, 5431, 5518, 6370, 6608, 6896, 7367, 8800, 9459, 9575, 9995], "external_url": "https://colorpunx.io/colors?i=67&name=#af38a1", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954244592533241857"}, "#bd47b0": {"id": 68, "name": "#bd47b0", "description": "#bd47b0 is one of 222 colors in the cryptopunx color pallette. It is used by 26 unique punks", "hash": "f3dec9ae59980a03494803073ae48fa7", "image": "https://gateway.pinata.cloud/ipfs/QmeDjaBZNRLwoR85gGqRh28gcS2mxy7Yg6fndHx92GiVXc?filename=colorpunx68.png", "punks": [287, 598, 628, 729, 773, 839, 992, 1041, 2162, 2390, 3183, 3202, 3811, 4254, 4257, 5121, 5431, 5518, 6370, 6608, 6896, 7367, 8800, 9459, 9575, 9995], "external_url": "https://colorpunx.io/colors?i=68&name=#bd47b0", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954245692044869633"}, "#5e5757": {"id": 69, "name": "#5e5757", "description": "#5e5757 is one of 222 colors in the cryptopunx color pallette. It is used by 27 unique punks", "hash": "75e7cdcc38cb2d2c4064b0f9ed8ef34a", "image": "https://gateway.pinata.cloud/ipfs/QmeMdwx261fBxrC2f8EVgAjARE371GncQ7TtdFiVftZvg8?filename=colorpunx69.png", "punks": [80, 539, 2327, 2495, 2824, 3380, 3396, 4131, 4511, 4594, 5318, 5375, 5579, 5581, 6267, 6659, 6815, 7147, 7217, 7361, 7491, 8000, 8735, 9453, 9537, 9862, 9877], "external_url": "https://colorpunx.io/colors?i=69&name=#5e5757", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954246791556497409"}, "#5c915f": {"id": 70, "name": "#5c915f", "description": "#5c915f is one of 222 colors in the cryptopunx color pallette. It is used by 27 unique punks", "hash": "e530ac640ad17e02aab8a2eebb8f5fa6", "image": "https://gateway.pinata.cloud/ipfs/QmTqN4m3H9fjFZuDg72KcMC7QfQzTQS7jfCf9ZNisiaNRv?filename=colorpunx70.png", "punks": [301, 355, 1746, 1911, 2039, 2159, 3770, 4032, 4237, 4958, 5594, 5766, 5798, 5879, 6057, 6216, 6723, 7237, 7622, 7664, 7840, 7915, 8275, 8418, 9431, 9748, 9869], "external_url": "https://colorpunx.io/colors?i=70&name=#5c915f", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954247891068125185"}, "#6aa06e": {"id": 71, "name": "#6aa06e", "description": "#6aa06e is one of 222 colors in the cryptopunx color pallette. It is used by 27 unique punks", "hash": "6f1754914a2c1e972ca676ad97af200b", "image": "https://gateway.pinata.cloud/ipfs/QmSHk34dur33ycQ4UMZowq1PyF2jGtVzasVhs4tcNWrdaj?filename=colorpunx71.png", "punks": [301, 355, 1746, 1911, 2039, 2159, 3770, 4032, 4237, 4958, 5594, 5766, 5798, 5879, 6057, 6216, 6723, 7237, 7622, 7664, 7840, 7915, 8275, 8418, 9431, 9748, 9869], "external_url": "https://colorpunx.io/colors?i=71&name=#6aa06e", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954248990579752961"}, "#655e5e": {"id": 72, "name": "#655e5e", "description": "#655e5e is one of 222 colors in the cryptopunx color pallette. It is used by 29 unique punks", "hash": "6187a9a781de30c98ed463b9f6ce450e", "image": "https://gateway.pinata.cloud/ipfs/QmZhY12Gk5P2DQaN6u9MEX3URy9RsCJRPKZQ5vfPbgn4yH?filename=colorpunx72.png", "punks": [288, 911, 1045, 1241, 2064, 2122, 2640, 2699, 2727, 2959, 3132, 3391, 6202, 6363, 6406, 6449, 6673, 6713, 7021, 7147, 7241, 7673, 8634, 8839, 8859, 8979, 9702, 9827, 9977], "external_url": "https://colorpunx.io/colors?i=72&name=#655e5e", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954250090091380737"}, "#6e6e6e": {"id": 73, "name": "#6e6e6e", "description": "#6e6e6e is one of 222 colors in the cryptopunx color pallette. It is used by 29 unique punks", "hash": "d89a130542e81bd99230380b2b917595", "image": "https://gateway.pinata.cloud/ipfs/QmcFP2uHw5bABNKzPGvVcBDgNxofV1Mfm233c5up2Ar89B?filename=colorpunx73.png", "punks": [288, 911, 1045, 1241, 2064, 2122, 2640, 2699, 2727, 2959, 3132, 3391, 6202, 6363, 6406, 6449, 6673, 6713, 7021, 7147, 7241, 7673, 8634, 8839, 8859, 8979, 9702, 9827, 9977], "external_url": "https://colorpunx.io/colors?i=73&name=#6e6e6e", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954251189603008513"}, "#a39797": {"id": 74, "name": "#a39797", "description": "#a39797 is one of 222 colors in the cryptopunx color pallette. It is used by 40 unique punks", "hash": "f83f6f2367049f7606e23d4d4cf8a50c", "image": "https://gateway.pinata.cloud/ipfs/QmZ2LmQ4WMvrTRJt9stzZ5YwPRWt8Gryf5JpApG7pKpCDM?filename=colorpunx74.png", "punks": [179, 363, 612, 911, 1358, 1366, 1630, 1649, 1674, 1716, 2002, 2314, 2640, 2902, 3028, 3455, 3469, 3544, 3600, 4163, 5297, 5402, 5514, 5853, 5859, 6056, 6092, 6307, 6314, 6361, 6553, 6874, 6973, 7440, 8658, 8958, 9047, 9113, 9119, 9649], "external_url": "https://colorpunx.io/colors?i=74&name=#a39797", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954252289114636289"}, "#b6b4bf": {"id": 75, "name": "#b6b4bf", "description": "#b6b4bf is one of 222 colors in the cryptopunx color pallette. It is used by 41 unique punks", "hash": "3f0ae18a1286a3bce5b6caf152812e95", "image": "https://gateway.pinata.cloud/ipfs/QmYCtj2xUEEWQRzyuGGWnkNjek9isagNmRmQS7yy7FN6F3?filename=colorpunx75.png", "punks": [1055, 1067, 1222, 1366, 1790, 1908, 2029, 2192, 2653, 2799, 3781, 3945, 4184, 4820, 5288, 5593, 5978, 6056, 6398, 6443, 6668, 6851, 6854, 7102, 7567, 7859, 8073, 8121, 8429, 8474, 8513, 8713, 8778, 8865, 8923, 8958, 9016, 9649, 9665, 9685, 9990], "external_url": "https://colorpunx.io/colors?i=75&name=#b6b4bf", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954253388626264065"}, "#cac9d4": {"id": 76, "name": "#cac9d4", "description": "#cac9d4 is one of 222 colors in the cryptopunx color pallette. It is used by 41 unique punks", "hash": "2c516e8197c2caaefae553c389a067ac", "image": "https://gateway.pinata.cloud/ipfs/QmPpJhBMWcNBMZXmqAuFfbsoxCdVYXyTZD3zpnLpBq7cn1?filename=colorpunx76.png", "punks": [1055, 1067, 1222, 1366, 1790, 1908, 2029, 2192, 2653, 2799, 3781, 3945, 4184, 4820, 5288, 5593, 5978, 6056, 6398, 6443, 6668, 6851, 6854, 7102, 7567, 7859, 8073, 8121, 8429, 8474, 8513, 8713, 8778, 8865, 8923, 8958, 9016, 9649, 9665, 9685, 9990], "external_url": "https://colorpunx.io/colors?i=76&name=#cac9d4", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954254488137891841"}, "#dcdfea": {"id": 77, "name": "#dcdfea", "description": "#dcdfea is one of 222 colors in the cryptopunx color pallette. It is used by 41 unique punks", "hash": "e2e28d25982f3a83c9eec287e9378c8d", "image": "https://gateway.pinata.cloud/ipfs/Qmdifhngi55V1fppMj5tAgn5RwwQzuxeZzR6xYuaGcbFpF?filename=colorpunx77.png", "punks": [1055, 1067, 1222, 1366, 1790, 1908, 2029, 2192, 2653, 2799, 3781, 3945, 4184, 4820, 5288, 5593, 5978, 6056, 6398, 6443, 6668, 6851, 6854, 7102, 7567, 7859, 8073, 8121, 8429, 8474, 8513, 8713, 8778, 8865, 8923, 8958, 9016, 9649, 9665, 9685, 9990], "external_url": "https://colorpunx.io/colors?i=77&name=#dcdfea", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954255587649519617"}, "#3cc300": {"id": 78, "name": "#3cc300", "description": "#3cc300 is one of 222 colors in the cryptopunx color pallette. It is used by 43 unique punks", "hash": "83cf692549ea474c7af6960b1dac8567", "image": "https://gateway.pinata.cloud/ipfs/QmbygG7GDerjEXYvf4vqmMnS8YycMTDe233RnaqdoriBf9?filename=colorpunx78.png", "punks": [143, 198, 344, 824, 1651, 1903, 2964, 3106, 3107, 3281, 3669, 4008, 4136, 4506, 4513, 5002, 5230, 5690, 6336, 6472, 7261, 7407, 7656, 7846, 7996, 8146, 8562, 8581, 8620, 8738, 8752, 8785, 8840, 8851, 8865, 8958, 9129, 9314, 9497, 9703, 9749, 9916, 9991], "external_url": "https://colorpunx.io/colors?i=78&name=#3cc300", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954256687161147393"}, "#0060c3": {"id": 79, "name": "#0060c3", "description": "#0060c3 is one of 222 colors in the cryptopunx color pallette. It is used by 44 unique punks", "hash": "f4c92cc3fab070eff7289042be2fe19c", "image": "https://gateway.pinata.cloud/ipfs/QmUGczpCLmuYgJ5WRP2ym5STxDKGAhzy4PWgaXgyQdSBXN?filename=colorpunx79.png", "punks": [143, 198, 344, 824, 1651, 1903, 2964, 3106, 3107, 3281, 3669, 4008, 4136, 4506, 4513, 5002, 5056, 5230, 5690, 6336, 6472, 7261, 7407, 7656, 7846, 7996, 8146, 8562, 8581, 8620, 8738, 8752, 8785, 8840, 8851, 8865, 8958, 9129, 9314, 9497, 9703, 9749, 9916, 9991], "external_url": "https://colorpunx.io/colors?i=79&name=#0060c3", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954257786672775169"}, "#d60404": {"id": 80, "name": "#d60404", "description": "#d60404 is one of 222 colors in the cryptopunx color pallette. It is used by 44 unique punks", "hash": "094eace121cbc8521ad4110aae5151af", "image": "https://gateway.pinata.cloud/ipfs/QmQrDw7QTt3fRb8unDNwVyLaSS8B2ZMQqcv7rMrt1xScoF?filename=colorpunx80.png", "punks": [143, 198, 344, 824, 1651, 1903, 2964, 3106, 3107, 3281, 3669, 4008, 4136, 4506, 4513, 5002, 5056, 5230, 5690, 6336, 6472, 7261, 7407, 7656, 7846, 7996, 8146, 8562, 8581, 8620, 8738, 8752, 8785, 8840, 8851, 8865, 8958, 9129, 9314, 9497, 9703, 9749, 9916, 9991], "external_url": "https://colorpunx.io/colors?i=80&name=#d60404", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954258886184402945"}, "#e4eb17": {"id": 81, "name": "#e4eb17", "description": "#e4eb17 is one of 222 colors in the cryptopunx color pallette. It is used by 44 unique punks", "hash": "6c81c7b0c6bdcd2767b005817f7bc376", "image": "https://gateway.pinata.cloud/ipfs/QmSbNTtxd1irURAzjjpvwDG8HuV5UvVuGSxy7id5dmpsnf?filename=colorpunx81.png", "punks": [143, 198, 344, 824, 1651, 1903, 2964, 3106, 3107, 3281, 3669, 4008, 4136, 4506, 4513, 5002, 5056, 5230, 5690, 6336, 6472, 7261, 7407, 7656, 7846, 7996, 8146, 8562, 8581, 8620, 8738, 8752, 8785, 8840, 8851, 8865, 8958, 9129, 9314, 9497, 9703, 9749, 9916, 9991], "external_url": "https://colorpunx.io/colors?i=81&name=#e4eb17", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954259985696030721"}, "#2d6b62": {"id": 82, "name": "#2d6b62", "description": "#2d6b62 is one of 222 colors in the cryptopunx color pallette. It is used by 54 unique punks", "hash": "ff1875f99a6951231c11d2a24d41a456", "image": "https://gateway.pinata.cloud/ipfs/QmRov7evEeKpXSGQAvDcqZUcJWfGqobWjgQdw5XaUxy6hX?filename=colorpunx82.png", "punks": [14, 22, 180, 382, 445, 501, 504, 838, 843, 883, 931, 1433, 1438, 1609, 1759, 1931, 2120, 2169, 2478, 2540, 2549, 2717, 2759, 2844, 2884, 2889, 2900, 2909, 3308, 3503, 3791, 4333, 4612, 4788, 5331, 5645, 5684, 6720, 6817, 6856, 7057, 7338, 8162, 8251, 8350, 8465, 8805, 8884, 9160, 9373, 9417, 9633, 9844, 9989], "external_url": "https://colorpunx.io/colors?i=82&name=#2d6b62", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954261085207658497"}, "#ff2a00": {"id": 83, "name": "#ff2a00", "description": "#ff2a00 is one of 222 colors in the cryptopunx color pallette. It is used by 55 unique punks", "hash": "ce1611174f5448432dd7a83a9aa7ed02", "image": "https://gateway.pinata.cloud/ipfs/QmZeRmVgfKddwQJW6qH17nyPdUvjHpsFcBGkWySzLbcygN?filename=colorpunx83.png", "punks": [116, 121, 593, 706, 744, 1371, 1579, 1603, 1775, 2000, 2368, 2426, 2601, 2676, 2891, 3684, 3712, 4004, 4380, 4752, 4936, 5610, 5692, 5734, 5787, 5898, 6165, 6182, 6490, 6581, 6764, 6842, 6932, 7138, 7535, 7557, 7601, 7928, 8241, 8260, 8420, 8493, 8527, 8630, 8731, 8779, 8842, 8886, 8994, 9339, 9392, 9452, 9784, 9907, 9926], "external_url": "https://colorpunx.io/colors?i=83&name=#ff2a00", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954262184719286273"}, "#ffba00": {"id": 84, "name": "#ffba00", "description": "#ffba00 is one of 222 colors in the cryptopunx color pallette. It is used by 55 unique punks", "hash": "5a08fde1738831c2d766b6226f63d78a", "image": "https://gateway.pinata.cloud/ipfs/QmPydMAc22eMfjn4t8ARf3CyEie49L4ME6SMcfZpf1J1Vx?filename=colorpunx84.png", "punks": [116, 121, 593, 706, 744, 1371, 1579, 1603, 1775, 2000, 2368, 2426, 2601, 2676, 2891, 3684, 3712, 4004, 4380, 4752, 4936, 5610, 5692, 5734, 5787, 5898, 6165, 6182, 6490, 6581, 6764, 6842, 6932, 7138, 7535, 7557, 7601, 7928, 8241, 8260, 8420, 8493, 8527, 8630, 8731, 8779, 8842, 8886, 8994, 9339, 9392, 9452, 9784, 9907, 9926], "external_url": "https://colorpunx.io/colors?i=84&name=#ffba00", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954263284230914049"}, "#6f6f6f": {"id": 85, "name": "#6f6f6f", "description": "#6f6f6f is one of 222 colors in the cryptopunx color pallette. It is used by 56 unique punks", "hash": "71d13e61a2dcfa49b5df14a7837834c1", "image": "https://gateway.pinata.cloud/ipfs/QmQc6EpmkETFpaBgovxxTooGpx4Q9Szo5mrKunBADgM9tH?filename=colorpunx85.png", "punks": [42, 99, 416, 474, 512, 631, 874, 1224, 1313, 1447, 1944, 2077, 2278, 2356, 2413, 2886, 3617, 3807, 3896, 4030, 4277, 4389, 4653, 5032, 5677, 6498, 6603, 6627, 6634, 6670, 6926, 7093, 7122, 7174, 7300, 7501, 7971, 8305, 8328, 8576, 8700, 8729, 8773, 8860, 8916, 8917, 8974, 9081, 9235, 9414, 9476, 9614, 9778, 9901, 9951, 9953], "external_url": "https://colorpunx.io/colors?i=85&name=#6f6f6f", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954264383742541825"}, "#9a8e8b": {"id": 86, "name": "#9a8e8b", "description": "#9a8e8b is one of 222 colors in the cryptopunx color pallette. It is used by 58 unique punks", "hash": "f5f95597d98286d5e4ccf51991a6255e", "image": "https://gateway.pinata.cloud/ipfs/Qmd7i2WiHoM89d1nepPJ8CFG8usVPwejL4FtCaLd9Rm3jx?filename=colorpunx86.png", "punks": [252, 339, 526, 659, 755, 816, 839, 961, 1087, 1323, 1663, 1697, 1790, 2330, 2632, 2957, 3131, 3145, 3395, 3574, 3978, 4212, 4664, 4668, 4960, 5016, 5182, 5499, 5547, 5676, 5881, 5882, 5978, 6104, 6383, 6733, 6854, 7033, 7070, 7169, 7218, 7237, 7276, 7421, 7678, 7777, 8350, 8417, 8632, 8648, 8769, 8802, 8815, 9215, 9295, 9320, 9549, 9869], "external_url": "https://colorpunx.io/colors?i=86&name=#9a8e8b", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954265483254169601"}, "#ff0000": {"id": 87, "name": "#ff0000", "description": "#ff0000 is one of 222 colors in the cryptopunx color pallette. It is used by 65 unique punks", "hash": "1e346f2744651b02b011868a8c455d7d", "image": "https://gateway.pinata.cloud/ipfs/QmU88Qo7urAjgFH3UchjrQWfKEf3Z3tufFogcjTDEQFdNx?filename=colorpunx87.png", "punks": [117, 1119, 1190, 1478, 1526, 1658, 1748, 1886, 1935, 2066, 2249, 2306, 2329, 2338, 2424, 2566, 2681, 2708, 2938, 2967, 3211, 3328, 3393, 3489, 3493, 3609, 3636, 4472, 4513, 4559, 4747, 4850, 4874, 5066, 5253, 5299, 5312, 5336, 5489, 5742, 5944, 6275, 6491, 6515, 6586, 6649, 6704, 6784, 7014, 7252, 7337, 7660, 7914, 8127, 8307, 8553, 8780, 8957, 9203, 9368, 9474, 9838, 9909, 9955, 9997], "external_url": "https://colorpunx.io/colors?i=87&name=#ff0000", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954266582765797377"}, "#3c5659": {"id": 88, "name": "#3c5659", "description": "#3c5659 is one of 222 colors in the cryptopunx color pallette. It is used by 67 unique punks", "hash": "32b43a1e1d0980c80088fbd159bca80c", "image": "https://gateway.pinata.cloud/ipfs/QmYM7q2we1vYwmJX7V8wraFf71py5xbG6Ns7r4usxZnwoy?filename=colorpunx88.png", "punks": [10, 232, 1318, 1471, 1598, 1761, 1835, 1907, 1924, 2085, 2208, 2398, 2690, 2760, 2837, 2896, 2918, 2966, 3087, 3470, 3870, 3965, 4265, 4461, 4815, 4848, 4887, 5115, 5117, 5279, 5386, 5516, 5623, 5703, 5748, 5873, 5919, 6107, 6152, 6390, 6509, 6560, 6564, 6836, 6881, 7015, 7131, 7260, 7429, 7509, 7967, 8164, 8201, 8287, 8352, 8354, 8438, 8512, 8524, 8725, 8997, 9042, 9358, 9640, 9755, 9846, 9907], "external_url": "https://colorpunx.io/colors?i=88&name=#3c5659", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954267682277425153"}, "#485d5d": {"id": 89, "name": "#485d5d", "description": "#485d5d is one of 222 colors in the cryptopunx color pallette. It is used by 67 unique punks", "hash": "2e7571ce45625e94990ff5da2329becb", "image": "https://gateway.pinata.cloud/ipfs/QmTFgJfk85MWFoXMC8mr4y2kZqv5eGJMjWN7MHQ8eKLGbU?filename=colorpunx89.png", "punks": [10, 232, 1318, 1471, 1598, 1761, 1835, 1907, 1924, 2085, 2208, 2398, 2690, 2760, 2837, 2896, 2918, 2966, 3087, 3470, 3870, 3965, 4265, 4461, 4815, 4848, 4887, 5115, 5117, 5279, 5386, 5516, 5623, 5703, 5748, 5873, 5919, 6107, 6152, 6390, 6509, 6560, 6564, 6836, 6881, 7015, 7131, 7260, 7429, 7509, 7967, 8164, 8201, 8287, 8352, 8354, 8438, 8512, 8524, 8725, 8997, 9042, 9358, 9640, 9755, 9846, 9907], "external_url": "https://colorpunx.io/colors?i=89&name=#485d5d", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954268781789052929"}, "#e65700": {"id": 90, "name": "#e65700", "description": "#e65700 is one of 222 colors in the cryptopunx color pallette. It is used by 68 unique punks", "hash": "8a65b65b94e44aeda5159c0f47f1bb48", "image": "https://gateway.pinata.cloud/ipfs/QmdoHPiuPVS3ZTimA655ZrryR5bv9DoumG8HwDyfTcGakQ?filename=colorpunx90.png", "punks": [225, 249, 404, 944, 1037, 1635, 1684, 1710, 1911, 2253, 2515, 2605, 2621, 2646, 2741, 2800, 3263, 3267, 3703, 3749, 3795, 3816, 3841, 4211, 4456, 4468, 4619, 4860, 5001, 5049, 5168, 5541, 5601, 5615, 5623, 5670, 5798, 6043, 6250, 6532, 6666, 6674, 6759, 6793, 6875, 7707, 7898, 7973, 8010, 8044, 8066, 8230, 8392, 8617, 8750, 8847, 8966, 9063, 9086, 9151, 9237, 9240, 9317, 9376, 9379, 9641, 9648, 9864], "external_url": "https://colorpunx.io/colors?i=90&name=#e65700", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954269881300680705"}, "#2d190c": {"id": 91, "name": "#2d190c", "description": "#2d190c is one of 222 colors in the cryptopunx color pallette. It is used by 71 unique punks", "hash": "e97f897ff65d7496354ff342b3963e30", "image": "https://gateway.pinata.cloud/ipfs/QmVP6eYj5Cbpwnax1PCJkCh7mwkbZ8af9zZLr2Hw4kt68J?filename=colorpunx91.png", "punks": [186, 325, 472, 840, 853, 905, 933, 1029, 1397, 1518, 1568, 1683, 1769, 1839, 1901, 2094, 2518, 2597, 2635, 2650, 2987, 3039, 3203, 3472, 3533, 3718, 3895, 4011, 4079, 4110, 4251, 4317, 4387, 4391, 4631, 4685, 4744, 4867, 4875, 4962, 5041, 5198, 5303, 5418, 5544, 5625, 5726, 5959, 5986, 6122, 6143, 6251, 6906, 6907, 6986, 7003, 7160, 7583, 7702, 7779, 7824, 7931, 8005, 8200, 8389, 8518, 9061, 9243, 9497, 9628, 9717], "external_url": "https://colorpunx.io/colors?i=91&name=#2d190c", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954270980812308481"}, "#8f0f69": {"id": 92, "name": "#8f0f69", "description": "#8f0f69 is one of 222 colors in the cryptopunx color pallette. It is used by 72 unique punks", "hash": "5e27a7e0812bfc7d40a4c3e395eccf3c", "image": "https://gateway.pinata.cloud/ipfs/QmTrpLsn47m9m5uEX4x4jKpL8Ejg7b6fpNEFbiK8uS6sCZ?filename=colorpunx92.png", "punks": [49, 248, 428, 660, 759, 844, 898, 912, 1276, 1299, 1485, 1670, 1860, 1877, 1906, 2197, 2199, 2275, 2486, 2937, 2945, 3002, 3058, 3231, 3431, 3616, 3974, 3995, 4048, 4449, 4545, 4575, 4911, 5153, 5165, 5181, 5264, 5307, 5587, 5615, 5698, 6038, 6205, 6206, 6371, 6468, 6554, 6626, 6718, 6762, 6763, 6796, 6812, 6834, 6875, 6884, 7397, 7419, 7593, 7626, 7973, 8007, 8279, 8589, 8665, 8873, 8916, 9167, 9217, 9301, 9411, 9468], "external_url": "https://colorpunx.io/colors?i=92&name=#8f0f69", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954272080323936257"}, "#9b166d": {"id": 93, "name": "#9b166d", "description": "#9b166d is one of 222 colors in the cryptopunx color pallette. It is used by 72 unique punks", "hash": "6c364e0763ffd6971ab0dd4e8e385af6", "image": "https://gateway.pinata.cloud/ipfs/QmZxvuVJG1qGFNHsmcs3zj6NmHCs4VRt45ccoHSnKX5jKh?filename=colorpunx93.png", "punks": [49, 248, 428, 660, 759, 844, 898, 912, 1276, 1299, 1485, 1670, 1860, 1877, 1906, 2197, 2199, 2275, 2486, 2937, 2945, 3002, 3058, 3231, 3431, 3616, 3974, 3995, 4048, 4449, 4545, 4575, 4911, 5153, 5165, 5181, 5264, 5307, 5587, 5615, 5698, 6038, 6205, 6206, 6371, 6468, 6554, 6626, 6718, 6762, 6763, 6796, 6812, 6834, 6875, 6884, 7397, 7419, 7593, 7626, 7973, 8007, 8279, 8589, 8665, 8873, 8916, 9167, 9217, 9301, 9411, 9468], "external_url": "https://colorpunx.io/colors?i=93&name=#9b166d", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954273179835564033"}, "#5c736b": {"id": 94, "name": "#5c736b", "description": "#5c736b is one of 222 colors in the cryptopunx color pallette. It is used by 75 unique punks", "hash": "0e2caceec01332a0d1818bb9196bacda", "image": "https://gateway.pinata.cloud/ipfs/QmUYwKV5pgjpeJDWJfCPk135nGf4watKvkySgnYZtiZvXK?filename=colorpunx94.png", "punks": [168, 491, 744, 1081, 1163, 1234, 1772, 1868, 2101, 2210, 2237, 2318, 2622, 2675, 3029, 3043, 3201, 3450, 3545, 3673, 4019, 4266, 4364, 4372, 4491, 4580, 4872, 4950, 5172, 5250, 5383, 5469, 5474, 5535, 5988, 6047, 6136, 6155, 6338, 6478, 6496, 6606, 6699, 6732, 6753, 6779, 6902, 6988, 7172, 7380, 7439, 7464, 7497, 7499, 7661, 7829, 7853, 7882, 8196, 8243, 8316, 8416, 8604, 8646, 8980, 9327, 9396, 9479, 9492, 9540, 9689, 9715, 9925, 9934, 9940], "external_url": "https://colorpunx.io/colors?i=94&name=#5c736b", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954274279347191809"}, "#6e867f": {"id": 95, "name": "#6e867f", "description": "#6e867f is one of 222 colors in the cryptopunx color pallette. It is used by 75 unique punks", "hash": "e16532c2b33fe96293c1f3bf3adfea22", "image": "https://gateway.pinata.cloud/ipfs/QmTME7TBntduGaqWcEiezZV8KZYezZZAvPfA3uTcRemsEC?filename=colorpunx95.png", "punks": [168, 491, 744, 1081, 1163, 1234, 1772, 1868, 2101, 2210, 2237, 2318, 2622, 2675, 3029, 3043, 3201, 3450, 3545, 3673, 4019, 4266, 4364, 4372, 4491, 4580, 4872, 4950, 5172, 5250, 5383, 5469, 5474, 5535, 5988, 6047, 6136, 6155, 6338, 6478, 6496, 6606, 6699, 6732, 6753, 6779, 6902, 6988, 7172, 7380, 7439, 7464, 7497, 7499, 7661, 7829, 7853, 7882, 8196, 8243, 8316, 8416, 8604, 8646, 8980, 9327, 9396, 9479, 9492, 9540, 9689, 9715, 9925, 9934, 9940], "external_url": "https://colorpunx.io/colors?i=95&name=#6e867f", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954275378858819585"}, "#af2c7b": {"id": 96, "name": "#af2c7b", "description": "#af2c7b is one of 222 colors in the cryptopunx color pallette. It is used by 76 unique punks", "hash": "743824ab7feca316ec760f5ebf6a521a", "image": "https://gateway.pinata.cloud/ipfs/Qmec6VuqrbVd3kMBdYVZjBfbdMgifK9h8tzsrxsg781nkZ?filename=colorpunx96.png", "punks": [333, 422, 586, 696, 724, 996, 1210, 1243, 1267, 1379, 1603, 1659, 1662, 1765, 1789, 1807, 2034, 2158, 2182, 2281, 2552, 2658, 2680, 2751, 3078, 3755, 3765, 3812, 3949, 4166, 4327, 4516, 4641, 4821, 5052, 5211, 5844, 6223, 6250, 6331, 6573, 6631, 6707, 6845, 6848, 6900, 6936, 7016, 7108, 7413, 7515, 7710, 7714, 7752, 7976, 7977, 8110, 8173, 8194, 8203, 8425, 8497, 8523, 8631, 8704, 8814, 8874, 8880, 8886, 8904, 8912, 8939, 9023, 9095, 9397, 9466], "external_url": "https://colorpunx.io/colors?i=96&name=#af2c7b", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954276478370447361"}, "#c13f8f": {"id": 97, "name": "#c13f8f", "description": "#c13f8f is one of 222 colors in the cryptopunx color pallette. It is used by 76 unique punks", "hash": "755a3c769c11eb8c1887809c7857840e", "image": "https://gateway.pinata.cloud/ipfs/QmUAgJitcmMu3Q29vnTKfiipdjVXZMV3FD7XututEkuZiY?filename=colorpunx97.png", "punks": [333, 422, 586, 696, 724, 996, 1210, 1243, 1267, 1379, 1603, 1659, 1662, 1765, 1789, 1807, 2034, 2158, 2182, 2281, 2552, 2658, 2680, 2751, 3078, 3755, 3765, 3812, 3949, 4166, 4327, 4516, 4641, 4821, 5052, 5211, 5844, 6223, 6250, 6331, 6573, 6631, 6707, 6845, 6848, 6900, 6936, 7016, 7108, 7413, 7515, 7710, 7714, 7752, 7976, 7977, 8110, 8173, 8194, 8203, 8425, 8497, 8523, 8631, 8704, 8814, 8874, 8880, 8886, 8904, 8912, 8939, 9023, 9095, 9397, 9466], "external_url": "https://colorpunx.io/colors?i=97&name=#c13f8f", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954277577882075137"}, "#3c6827": {"id": 98, "name": "#3c6827", "description": "#3c6827 is one of 222 colors in the cryptopunx color pallette. It is used by 79 unique punks", "hash": "e8473ebc8c099572e81724278d3a96b0", "image": "https://gateway.pinata.cloud/ipfs/QmSR29UDZ3YyeAj4ZAd4JG1rnnmcZnZCKHKT2pgB4QTx1N?filename=colorpunx98.png", "punks": [86, 103, 184, 247, 646, 749, 1212, 1339, 1346, 1544, 1815, 1827, 1841, 1885, 1940, 1982, 2014, 2022, 2100, 2129, 2346, 2649, 3034, 3170, 3734, 3932, 3964, 3981, 4075, 4332, 4584, 4742, 4814, 4961, 5060, 5210, 5457, 5834, 5955, 5972, 6028, 6221, 6273, 6674, 6688, 6752, 6757, 6859, 6882, 7044, 7101, 7212, 7216, 7234, 7326, 7327, 7342, 7415, 7456, 7663, 7736, 8150, 8176, 8360, 8483, 8487, 8539, 8764, 8776, 8959, 9014, 9021, 9035, 9419, 9481, 9490, 9691, 9801, 9994], "external_url": "https://colorpunx.io/colors?i=98&name=#3c6827", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954278677393702913"}, "#486f2b": {"id": 99, "name": "#486f2b", "description": "#486f2b is one of 222 colors in the cryptopunx color pallette. It is used by 79 unique punks", "hash": "0020672032086ddb40d35cd48a801571", "image": "https://gateway.pinata.cloud/ipfs/QmPH4nVUL9fe2wbxJChWwGsNu8R2i8SbJbKGiCGvGRpnZL?filename=colorpunx99.png", "punks": [86, 103, 184, 247, 646, 749, 1212, 1339, 1346, 1544, 1815, 1827, 1841, 1885, 1940, 1982, 2014, 2022, 2100, 2129, 2346, 2649, 3034, 3170, 3734, 3932, 3964, 3981, 4075, 4332, 4584, 4742, 4814, 4961, 5060, 5210, 5457, 5834, 5955, 5972, 6028, 6221, 6273, 6674, 6688, 6752, 6757, 6859, 6882, 7044, 7101, 7212, 7216, 7234, 7326, 7327, 7342, 7415, 7456, 7663, 7736, 8150, 8176, 8360, 8483, 8487, 8539, 8764, 8776, 8959, 9014, 9021, 9035, 9419, 9481, 9490, 9691, 9801, 9994], "external_url": "https://colorpunx.io/colors?i=99&name=#486f2b", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954279776905330689"}, "#5e7253": {"id": 100, "name": "#5e7253", "description": "#5e7253 is one of 222 colors in the cryptopunx color pallette. It is used by 81 unique punks", "hash": "21aaede0f0bf92a0f53db395dc13ca88", "image": "https://gateway.pinata.cloud/ipfs/QmciGpJJo96D3xoKdUKyHSivKf9BNn9Z2QFdkikWnmgFvP?filename=colorpunx100.png", "punks": [117, 987, 1119, 1190, 1374, 1478, 1526, 1658, 1748, 1886, 1935, 2066, 2249, 2306, 2329, 2338, 2424, 2484, 2566, 2681, 2708, 2938, 2967, 3211, 3328, 3393, 3489, 3493, 3609, 3636, 4472, 4513, 4559, 4747, 4850, 4874, 5066, 5234, 5253, 5299, 5312, 5336, 5412, 5489, 5742, 5761, 5944, 6275, 6297, 6304, 6491, 6515, 6586, 6649, 6704, 6784, 7014, 7121, 7127, 7252, 7337, 7458, 7660, 7914, 8127, 8307, 8386, 8472, 8531, 8553, 8780, 8857, 8909, 8957, 9203, 9368, 9474, 9838, 9909, 9955, 9997], "external_url": "https://colorpunx.io/colors?i=100&name=#5e7253", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954281975928586241"}, "#5c8539": {"id": 101, "name": "#5c8539", "description": "#5c8539 is one of 222 colors in the cryptopunx color pallette. It is used by 82 unique punks", "hash": "caa32acdd68e2288bf6f4d92ae9ea0c2", "image": "https://gateway.pinata.cloud/ipfs/QmZ2p3CPwDAkadkWXtXTRMq25rtHi7c9BimJ3vCyg37KA3?filename=colorpunx101.png", "punks": [71, 193, 251, 353, 375, 473, 717, 1596, 1715, 1730, 1962, 1971, 2091, 2114, 2203, 2413, 2426, 2454, 2591, 2664, 3092, 3179, 3271, 3582, 3688, 3703, 3721, 3725, 3756, 3885, 3913, 3962, 3984, 4028, 4093, 4133, 4169, 4222, 4242, 4348, 4438, 4666, 4738, 4903, 5000, 5102, 5409, 5565, 5675, 5734, 5833, 5896, 6096, 6184, 6293, 6388, 6528, 6696, 6868, 6945, 7020, 7039, 7041, 7196, 7272, 7394, 7482, 7520, 7560, 7639, 7983, 8142, 8229, 8298, 8326, 8535, 8579, 8835, 9044, 9359, 9613, 9967], "external_url": "https://colorpunx.io/colors?i=101&name=#5c8539", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954281975928586241"}, "#6e984d": {"id": 102, "name": "#6e984d", "description": "#6e984d is one of 222 colors in the cryptopunx color pallette. It is used by 82 unique punks", "hash": "19e569efd488f6765a4e4861a76deaed", "image": "https://gateway.pinata.cloud/ipfs/QmfBJpUP44V6EHRLvZqvKc9yUuKw9yVRBHR12A5fKcGUJw?filename=colorpunx102.png", "punks": [71, 193, 251, 353, 375, 473, 717, 1596, 1715, 1730, 1962, 1971, 2091, 2114, 2203, 2413, 2426, 2454, 2591, 2664, 3092, 3179, 3271, 3582, 3688, 3703, 3721, 3725, 3756, 3885, 3913, 3962, 3984, 4028, 4093, 4133, 4169, 4222, 4242, 4348, 4438, 4666, 4738, 4903, 5000, 5102, 5409, 5565, 5675, 5734, 5833, 5896, 6096, 6184, 6293, 6388, 6528, 6696, 6868, 6945, 7020, 7039, 7041, 7196, 7272, 7394, 7482, 7520, 7560, 7639, 7983, 8142, 8229, 8298, 8326, 8535, 8579, 8835, 9044, 9359, 9613, 9967], "external_url": "https://colorpunx.io/colors?i=102&name=#6e984d", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954283075440214017"}, "#507c33": {"id": 103, "name": "#507c33", "description": "#507c33 is one of 222 colors in the cryptopunx color pallette. It is used by 83 unique punks", "hash": "dea9aedbb599f080b0e51e65d984e2f5", "image": "https://gateway.pinata.cloud/ipfs/QmSKgyFfjqzeb92TLouhoXofdykAzbnCPVgUkJCWK4Ghxi?filename=colorpunx103.png", "punks": [0, 352, 383, 538, 714, 1199, 1293, 1467, 1504, 1619, 1849, 1977, 2023, 2069, 2072, 2138, 2217, 2371, 2372, 2429, 2496, 2562, 2703, 2755, 2795, 2941, 3162, 3334, 3637, 3733, 3816, 4044, 4061, 4080, 4122, 4139, 4176, 4227, 4243, 4286, 4434, 4456, 4504, 4621, 4643, 4740, 4835, 4849, 4929, 5069, 5075, 5248, 5691, 5790, 5843, 5872, 5895, 6182, 6277, 6285, 6343, 6347, 6703, 6735, 6897, 7291, 7305, 7447, 7654, 7924, 8076, 8271, 8345, 8509, 8670, 8709, 9370, 9590, 9638, 9747, 9757, 9770, 9958], "external_url": "https://colorpunx.io/colors?i=103&name=#507c33", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954284174951841793"}, "#5d8b43": {"id": 104, "name": "#5d8b43", "description": "#5d8b43 is one of 222 colors in the cryptopunx color pallette. It is used by 83 unique punks", "hash": "53b91938a6be094983de93f646b4c845", "image": "https://gateway.pinata.cloud/ipfs/QmX1c3gwK6cwQuJ5fnXuXwViDCpcq3qUJvr6R4fDRTUBFy?filename=colorpunx104.png", "punks": [0, 352, 383, 538, 714, 1199, 1293, 1467, 1504, 1619, 1849, 1977, 2023, 2069, 2072, 2138, 2217, 2371, 2372, 2429, 2496, 2562, 2703, 2755, 2795, 2941, 3162, 3334, 3637, 3733, 3816, 4044, 4061, 4080, 4122, 4139, 4176, 4227, 4243, 4286, 4434, 4456, 4504, 4621, 4643, 4740, 4835, 4849, 4929, 5069, 5075, 5248, 5691, 5790, 5843, 5872, 5895, 6182, 6277, 6285, 6343, 6347, 6703, 6735, 6897, 7291, 7305, 7447, 7654, 7924, 8076, 8271, 8345, 8509, 8670, 8709, 9370, 9590, 9638, 9747, 9757, 9770, 9958], "external_url": "https://colorpunx.io/colors?i=104&name=#5d8b43", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954285274463469569"}, "#1c1a00": {"id": 105, "name": "#1c1a00", "description": "#1c1a00 is one of 222 colors in the cryptopunx color pallette. It is used by 86 unique punks", "hash": "67942c65efa5a0ca083f423cf1049240", "image": "https://gateway.pinata.cloud/ipfs/QmbepGTXqncWtpjyHi96DQSDjTgeFy6hJc46ae9vmjcz6i?filename=colorpunx105.png", "punks": [98, 499, 1162, 1367, 1470, 1496, 1513, 1669, 1821, 1854, 1865, 2180, 2218, 2394, 2613, 2705, 2725, 2836, 2857, 2981, 3005, 3015, 3105, 3176, 3556, 3648, 3705, 4010, 4015, 4250, 4314, 4393, 4500, 4627, 4638, 4677, 4937, 5068, 5389, 5407, 5524, 5670, 5719, 5785, 6015, 6099, 6345, 6348, 6486, 6559, 6629, 6663, 7009, 7074, 7079, 7352, 7457, 7563, 7670, 7698, 7898, 8096, 8217, 8349, 8364, 8426, 8461, 8697, 8733, 8906, 8975, 9064, 9201, 9258, 9325, 9332, 9446, 9457, 9461, 9485, 9563, 9572, 9782, 9832, 9921, 9937], "external_url": "https://colorpunx.io/colors?i=105&name=#1c1a00", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954286373975097345"}, "#534c00": {"id": 106, "name": "#534c00", "description": "#534c00 is one of 222 colors in the cryptopunx color pallette. It is used by 86 unique punks", "hash": "71dd57024e9632966960c5d8c555a201", "image": "https://gateway.pinata.cloud/ipfs/QmUjeuwPazAaYHbbQBo6U4QcrbbH4zP6XYgeYF9oiUCHMw?filename=colorpunx106.png", "punks": [98, 499, 1162, 1367, 1470, 1496, 1513, 1669, 1821, 1854, 1865, 2180, 2218, 2394, 2613, 2705, 2725, 2836, 2857, 2981, 3005, 3015, 3105, 3176, 3556, 3648, 3705, 4010, 4015, 4250, 4314, 4393, 4500, 4627, 4638, 4677, 4937, 5068, 5389, 5407, 5524, 5670, 5719, 5785, 6015, 6099, 6345, 6348, 6486, 6559, 6629, 6663, 7009, 7074, 7079, 7352, 7457, 7563, 7670, 7698, 7898, 8096, 8217, 8349, 8364, 8426, 8461, 8697, 8733, 8906, 8975, 9064, 9201, 9258, 9325, 9332, 9446, 9457, 9461, 9485, 9563, 9572, 9782, 9832, 9921, 9937], "external_url": "https://colorpunx.io/colors?i=106&name=#534c00", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954287473486725121"}, "#4b3c2a": {"id": 107, "name": "#4b3c2a", "description": "#4b3c2a is one of 222 colors in the cryptopunx color pallette. It is used by 86 unique punks", "hash": "39e4c55627607cafb138250cacd12d7a", "image": "https://gateway.pinata.cloud/ipfs/QmcQmHZrRJwJL8m3HjkcJdP1hN9eyBUkigZxLzCbDswxue?filename=colorpunx107.png", "punks": [208, 295, 309, 392, 686, 890, 953, 989, 1084, 1147, 1170, 1259, 1375, 1567, 1575, 1699, 1823, 1863, 2261, 2410, 2569, 2655, 2679, 2804, 2875, 2921, 2965, 3072, 3239, 3303, 3357, 3532, 3576, 3660, 3897, 3956, 4648, 4723, 4731, 4808, 4810, 4826, 4855, 5188, 5260, 5274, 5286, 5403, 5557, 5662, 5755, 5964, 6044, 6069, 6156, 6188, 6353, 6354, 6622, 6671, 6745, 6917, 7025, 7364, 7384, 7490, 7566, 7579, 7800, 7822, 8048, 8135, 8395, 8611, 8682, 8963, 9197, 9238, 9378, 9384, 9425, 9502, 9553, 9726, 9817, 9914], "external_url": "https://colorpunx.io/colors?i=107&name=#4b3c2a", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954288572998352897"}, "#4f4538": {"id": 108, "name": "#4f4538", "description": "#4f4538 is one of 222 colors in the cryptopunx color pallette. It is used by 86 unique punks", "hash": "38192a43e78e9223962b96d25ee62f45", "image": "https://gateway.pinata.cloud/ipfs/QmSh5ZWWtCxaDB3Xg74XsV2vefrceWVPj6DBqNoky1jqtf?filename=colorpunx108.png", "punks": [208, 295, 309, 392, 686, 890, 953, 989, 1084, 1147, 1170, 1259, 1375, 1567, 1575, 1699, 1823, 1863, 2261, 2410, 2569, 2655, 2679, 2804, 2875, 2921, 2965, 3072, 3239, 3303, 3357, 3532, 3576, 3660, 3897, 3956, 4648, 4723, 4731, 4808, 4810, 4826, 4855, 5188, 5260, 5274, 5286, 5403, 5557, 5662, 5755, 5964, 6044, 6069, 6156, 6188, 6353, 6354, 6622, 6671, 6745, 6917, 7025, 7364, 7384, 7490, 7566, 7579, 7800, 7822, 8048, 8135, 8395, 8611, 8682, 8963, 9197, 9238, 9378, 9384, 9425, 9502, 9553, 9726, 9817, 9914], "external_url": "https://colorpunx.io/colors?i=108&name=#4f4538", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954289672509980673"}, "#a32375": {"id": 109, "name": "#a32375", "description": "#a32375 is one of 222 colors in the cryptopunx color pallette. It is used by 88 unique punks", "hash": "f7796795a87abe4fc1a81bb03a0f1b60", "image": "https://gateway.pinata.cloud/ipfs/QmdFEAAeg1nkFEgfpF9iqLsZWP6zjPQb4QbzNqsDpncvzF?filename=colorpunx109.png", "punks": [5, 275, 400, 865, 1110, 1186, 1224, 1775, 1859, 1910, 1917, 2164, 2174, 2207, 2232, 2596, 2659, 2682, 2787, 2822, 2963, 3149, 3336, 3397, 3615, 3879, 3951, 3957, 3991, 4073, 4151, 4305, 4309, 4346, 4377, 4418, 4517, 4921, 4981, 4997, 5038, 5108, 5295, 5419, 5567, 5692, 5787, 5801, 5906, 6029, 6067, 6133, 6169, 6263, 6394, 6547, 6825, 6946, 6954, 7063, 7229, 7301, 7459, 7493, 7530, 7649, 8148, 8149, 8228, 8249, 8254, 8399, 8485, 8556, 8602, 8745, 8792, 8836, 8837, 9149, 9153, 9177, 9271, 9307, 9428, 9493, 9864, 9885], "external_url": "https://colorpunx.io/colors?i=109&name=#a32375", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954290772021608449"}, "#b03285": {"id": 110, "name": "#b03285", "description": "#b03285 is one of 222 colors in the cryptopunx color pallette. It is used by 88 unique punks", "hash": "c14956057da6d799114ca23e37ac808a", "image": "https://gateway.pinata.cloud/ipfs/QmRxNsDxPVpSJU4zwU3bpcW716zi7eCFDWJR2uscXk9Mg4?filename=colorpunx110.png", "punks": [5, 275, 400, 865, 1110, 1186, 1224, 1775, 1859, 1910, 1917, 2164, 2174, 2207, 2232, 2596, 2659, 2682, 2787, 2822, 2963, 3149, 3336, 3397, 3615, 3879, 3951, 3957, 3991, 4073, 4151, 4305, 4309, 4346, 4377, 4418, 4517, 4921, 4981, 4997, 5038, 5108, 5295, 5419, 5567, 5692, 5787, 5801, 5906, 6029, 6067, 6133, 6169, 6263, 6394, 6547, 6825, 6946, 6954, 7063, 7229, 7301, 7459, 7493, 7530, 7649, 8148, 8149, 8228, 8249, 8254, 8399, 8485, 8556, 8602, 8745, 8792, 8836, 8837, 9149, 9153, 9177, 9271, 9307, 9428, 9493, 9864, 9885], "external_url": "https://colorpunx.io/colors?i=110&name=#b03285", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954291871533236225"}, "#5e4c37": {"id": 111, "name": "#5e4c37", "description": "#5e4c37 is one of 222 colors in the cryptopunx color pallette. It is used by 88 unique punks", "hash": "9e8d0214fbfae00ffbc9cd268d9b4f4a", "image": "https://gateway.pinata.cloud/ipfs/QmThPYVKsNq1tsBhgaYjBvF8JtXq8AKDyFimKyZ4mofLFD?filename=colorpunx111.png", "punks": [39, 83, 255, 448, 492, 591, 801, 1135, 1171, 1175, 1290, 1321, 1488, 1502, 1551, 1585, 1947, 1950, 2036, 2056, 2228, 2295, 2342, 2535, 2669, 3062, 3157, 3175, 3569, 3579, 3766, 3851, 3857, 3892, 3927, 3941, 3989, 4033, 4119, 4175, 4577, 4600, 4649, 4717, 4720, 4904, 4952, 4982, 5050, 5337, 5357, 5465, 5632, 5740, 5854, 6019, 6027, 6052, 6207, 6236, 6431, 6738, 6953, 7112, 7317, 7537, 7554, 7780, 8366, 8484, 8598, 8671, 8706, 8995, 9090, 9268, 9346, 9494, 9542, 9602, 9673, 9692, 9785, 9816, 9860, 9913, 9961, 9979], "external_url": "https://colorpunx.io/colors?i=111&name=#5e4c37", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954292971044864001"}, "#645849": {"id": 112, "name": "#645849", "description": "#645849 is one of 222 colors in the cryptopunx color pallette. It is used by 88 unique punks", "hash": "35420872fd8aaa19e9a0c13cb677f9f3", "image": "https://gateway.pinata.cloud/ipfs/QmY44m6tySfyfBBwQM9pTB4T7zHGDCv2ScR4Pmu2aEm7Kb?filename=colorpunx112.png", "punks": [39, 83, 255, 448, 492, 591, 801, 1135, 1171, 1175, 1290, 1321, 1488, 1502, 1551, 1585, 1947, 1950, 2036, 2056, 2228, 2295, 2342, 2535, 2669, 3062, 3157, 3175, 3569, 3579, 3766, 3851, 3857, 3892, 3927, 3941, 3989, 4033, 4119, 4175, 4577, 4600, 4649, 4717, 4720, 4904, 4952, 4982, 5050, 5337, 5357, 5465, 5632, 5740, 5854, 6019, 6027, 6052, 6207, 6236, 6431, 6738, 6953, 7112, 7317, 7537, 7554, 7780, 8366, 8484, 8598, 8671, 8706, 8995, 9090, 9268, 9346, 9494, 9542, 9602, 9673, 9692, 9785, 9816, 9860, 9913, 9961, 9979], "external_url": "https://colorpunx.io/colors?i=112&name=#645849", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954294070556491777"}, "#7da269": {"id": 113, "name": "#7da269", "description": "#7da269 is one of 222 colors in the cryptopunx color pallette. It is used by 88 unique punks", "hash": "57e90f3019d533e49622e5ba4da3c55b", "image": "https://gateway.pinata.cloud/ipfs/QmcowcyJpYJc5WapHkfrCakJHb3Lob8kmVJZ991Lfm38Tf?filename=colorpunx113.png", "punks": [117, 987, 1119, 1190, 1374, 1478, 1526, 1658, 1748, 1886, 1935, 2066, 2132, 2249, 2306, 2329, 2338, 2424, 2484, 2560, 2566, 2681, 2708, 2938, 2967, 3211, 3328, 3393, 3489, 3493, 3609, 3636, 3831, 4472, 4513, 4559, 4747, 4830, 4850, 4874, 5066, 5234, 5253, 5299, 5312, 5336, 5412, 5489, 5573, 5742, 5761, 5944, 6275, 6297, 6304, 6491, 6515, 6586, 6649, 6704, 6784, 7014, 7121, 7127, 7252, 7337, 7458, 7660, 7756, 7914, 8127, 8307, 8386, 8472, 8531, 8553, 8780, 8857, 8909, 8957, 9203, 9368, 9474, 9804, 9838, 9909, 9955, 9997], "external_url": "https://colorpunx.io/colors?i=113&name=#7da269", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954295170068119553"}, "#463827": {"id": 114, "name": "#463827", "description": "#463827 is one of 222 colors in the cryptopunx color pallette. It is used by 89 unique punks", "hash": "9610be0a88a61261c0ca7ede00228b68", "image": "https://gateway.pinata.cloud/ipfs/QmdQAi73jkVSfUnsiBqDejbCSP3DwerNRGCfECrzAdnZbM?filename=colorpunx114.png", "punks": [535, 543, 643, 649, 657, 704, 710, 745, 989, 1093, 1193, 1320, 1351, 1555, 1640, 1809, 2083, 2093, 2241, 2430, 2472, 2529, 2570, 2580, 2616, 2864, 2926, 3041, 3297, 3585, 3651, 3758, 3872, 3905, 4057, 4082, 4205, 4278, 4413, 4572, 4832, 4907, 5128, 5517, 5558, 5570, 5718, 5828, 6062, 6068, 6238, 6284, 6360, 6526, 6536, 6545, 6883, 6977, 7026, 7032, 7246, 7353, 7880, 7911, 7926, 8041, 8052, 8072, 8266, 8335, 8371, 8558, 8715, 8831, 8840, 9024, 9080, 9103, 9245, 9315, 9321, 9412, 9445, 9462, 9527, 9535, 9736, 9744, 9935], "external_url": "https://colorpunx.io/colors?i=114&name=#463827", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954296269579747329"}, "#311b0d": {"id": 115, "name": "#311b0d", "description": "#311b0d is one of 222 colors in the cryptopunx color pallette. It is used by 95 unique punks", "hash": "f66fd4bd2b14b92e252a47bd1f9057c5", "image": "https://gateway.pinata.cloud/ipfs/Qmdo2b3QDGnswhXYWFxmW9g1da3jozMAk7DyD7UdZRhkRu?filename=colorpunx115.png", "punks": [56, 63, 136, 163, 166, 423, 709, 731, 809, 1088, 1322, 1326, 1338, 1605, 1695, 1739, 1757, 1998, 2383, 2534, 2538, 2733, 2777, 2881, 2912, 2983, 2987, 2989, 3143, 3203, 3261, 3446, 3654, 3779, 3929, 3935, 4192, 4252, 4444, 4657, 4718, 4725, 4733, 4811, 4902, 5057, 5063, 5206, 5252, 5255, 5416, 5418, 5464, 5509, 5737, 5973, 6105, 6266, 6268, 6276, 6367, 6561, 6643, 6683, 6694, 6730, 6985, 7130, 7167, 7251, 7385, 7454, 7564, 7783, 7893, 7995, 8246, 8262, 8341, 8409, 8444, 8536, 8607, 8812, 8940, 9108, 9124, 9218, 9274, 9335, 9375, 9555, 9603, 9954, 9970], "external_url": "https://colorpunx.io/colors?i=115&name=#311b0d", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954297369091375105"}, "#3c2413": {"id": 116, "name": "#3c2413", "description": "#3c2413 is one of 222 colors in the cryptopunx color pallette. It is used by 95 unique punks", "hash": "14141b43a6ba5e7c4b7f318b641cf810", "image": "https://gateway.pinata.cloud/ipfs/QmPMvSrNsLQsST1HTB7w5hxvLSoFChGSfm98FyKzvDZbx6?filename=colorpunx116.png", "punks": [56, 63, 136, 163, 166, 423, 709, 731, 809, 1088, 1322, 1326, 1338, 1605, 1695, 1739, 1757, 1998, 2383, 2534, 2538, 2733, 2777, 2881, 2912, 2983, 2987, 2989, 3143, 3203, 3261, 3446, 3654, 3779, 3929, 3935, 4192, 4252, 4444, 4657, 4718, 4725, 4733, 4811, 4902, 5057, 5063, 5206, 5252, 5255, 5416, 5418, 5464, 5509, 5737, 5973, 6105, 6266, 6268, 6276, 6367, 6561, 6643, 6683, 6694, 6730, 6985, 7130, 7167, 7251, 7385, 7454, 7564, 7783, 7893, 7995, 8246, 8262, 8341, 8409, 8444, 8536, 8607, 8812, 8940, 9108, 9124, 9218, 9274, 9335, 9375, 9555, 9603, 9954, 9970], "external_url": "https://colorpunx.io/colors?i=116&name=#3c2413", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954298468603002881"}, "#ff8ebe": {"id": 117, "name": "#ff8ebe", "description": "#ff8ebe is one of 222 colors in the cryptopunx color pallette. It is used by 95 unique punks", "hash": "296ab685886007de0b59cd78fb58a149", "image": "https://gateway.pinata.cloud/ipfs/QmRt56dPWxJe3oEikJsUnuwkit9paZaNRgZB2f5BRBQei6?filename=colorpunx117.png", "punks": [92, 94, 322, 394, 537, 585, 642, 684, 719, 1010, 1070, 1163, 1220, 1364, 1514, 1629, 1694, 1730, 2015, 2190, 2226, 2244, 2527, 2626, 2680, 2690, 2703, 2867, 2958, 2978, 3057, 3096, 3102, 3135, 3139, 3437, 3479, 3511, 3519, 3673, 3932, 4021, 4048, 4112, 4214, 4300, 4346, 4347, 4383, 4418, 4485, 4535, 4566, 4769, 4880, 4924, 5083, 5191, 5316, 5513, 5554, 5901, 5934, 5976, 6141, 6255, 6270, 6513, 6727, 6731, 6779, 6796, 6807, 6862, 6994, 7090, 7397, 7663, 7767, 7942, 8134, 8552, 8579, 8638, 8725, 8849, 8867, 8907, 9223, 9311, 9479, 9539, 9876, 9934, 9959], "external_url": "https://colorpunx.io/colors?i=117&name=#ff8ebe", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954299568114630657"}, "#584733": {"id": 118, "name": "#584733", "description": "#584733 is one of 222 colors in the cryptopunx color pallette. It is used by 96 unique punks", "hash": "998f0d1f3750957eed5f301e89b57743", "image": "https://gateway.pinata.cloud/ipfs/QmbfDuvgXf6QaYtNCGV2R1wnCeRViAqpxmNYd9g7BKjnq2?filename=colorpunx118.png", "punks": [255, 483, 497, 848, 873, 1077, 1153, 1284, 1285, 1344, 1349, 1521, 1538, 1541, 2102, 2141, 2144, 2258, 2365, 2375, 2389, 2567, 2687, 2848, 2980, 3302, 3407, 3491, 3762, 3989, 4053, 4068, 4336, 4479, 4501, 4550, 4678, 4790, 4914, 5113, 5141, 5319, 5324, 5410, 5484, 5488, 5512, 5527, 5696, 5730, 5969, 6085, 6100, 6355, 6366, 6385, 6429, 6922, 6923, 6947, 6984, 7137, 7148, 7235, 7328, 7416, 7505, 7630, 7638, 7667, 7718, 7725, 7770, 7828, 7848, 7947, 8053, 8090, 8223, 8469, 8748, 8754, 8872, 8879, 8941, 8995, 9099, 9199, 9231, 9242, 9256, 9439, 9518, 9699, 9707, 9913], "external_url": "https://colorpunx.io/colors?i=118&name=#584733", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954300667626258433"}, "#506a65": {"id": 119, "name": "#506a65", "description": "#506a65 is one of 222 colors in the cryptopunx color pallette. It is used by 101 unique punks", "hash": "c046bdfe8446cddba2937ed8c989e2a0", "image": "https://gateway.pinata.cloud/ipfs/QmQQzttK4EpowawU2fyF1N3uHqweggKT9iC8veyFNeCuS9?filename=colorpunx119.png", "punks": [201, 279, 302, 653, 695, 795, 886, 1037, 1390, 1420, 1491, 1523, 1578, 1700, 1800, 1861, 1937, 1990, 2092, 2104, 2212, 2407, 2442, 2707, 2867, 3112, 3207, 3236, 3240, 3314, 3490, 3602, 4106, 4225, 4247, 4366, 4465, 4496, 4616, 4799, 4839, 4898, 5024, 5097, 5135, 5301, 5358, 5426, 5522, 5620, 5728, 5860, 5893, 5904, 6116, 6158, 6292, 6302, 6401, 6422, 6436, 6764, 7116, 7174, 7432, 7448, 7568, 7792, 7798, 7803, 7866, 8023, 8037, 8054, 8097, 8190, 8230, 8248, 8321, 8506, 8552, 8638, 8719, 8747, 8885, 8942, 8989, 9052, 9309, 9366, 9526, 9592, 9620, 9674, 9852, 9881, 9890, 9892, 9960, 9971, 9974], "external_url": "https://colorpunx.io/colors?i=119&name=#506a65", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954301767137886209"}, "#5d7975": {"id": 120, "name": "#5d7975", "description": "#5d7975 is one of 222 colors in the cryptopunx color pallette. It is used by 101 unique punks", "hash": "e282301e6b9f9da12110a6fb042bdb13", "image": "https://gateway.pinata.cloud/ipfs/QmQhC8UZQq45u9CMYcBWmLapF586M4CTwQx1c84mqRoYeP?filename=colorpunx120.png", "punks": [201, 279, 302, 653, 695, 795, 886, 1037, 1390, 1420, 1491, 1523, 1578, 1700, 1800, 1861, 1937, 1990, 2092, 2104, 2212, 2407, 2442, 2707, 2867, 3112, 3207, 3236, 3240, 3314, 3490, 3602, 4106, 4225, 4247, 4366, 4465, 4496, 4616, 4799, 4839, 4898, 5024, 5097, 5135, 5301, 5358, 5426, 5522, 5620, 5728, 5860, 5893, 5904, 6116, 6158, 6292, 6302, 6401, 6422, 6436, 6764, 7116, 7174, 7432, 7448, 7568, 7792, 7798, 7803, 7866, 8023, 8037, 8054, 8097, 8190, 8230, 8248, 8321, 8506, 8552, 8638, 8719, 8747, 8885, 8942, 8989, 9052, 9309, 9366, 9526, 9592, 9620, 9674, 9852, 9881, 9890, 9892, 9960, 9971, 9974], "external_url": "https://colorpunx.io/colors?i=120&name=#5d7975", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954302866649513985"}, "#dc1d1d": {"id": 121, "name": "#dc1d1d", "description": "#dc1d1d is one of 222 colors in the cryptopunx color pallette. It is used by 115 unique punks", "hash": "182c99ed8f7577c6c1e0ef23920d700f", "image": "https://gateway.pinata.cloud/ipfs/QmXR7pTjv2LxekUJCx1Sq3rxoC9soCMgdYyX8Npdnuuj3v?filename=colorpunx121.png", "punks": [336, 414, 455, 480, 550, 561, 638, 827, 851, 891, 1017, 1018, 1099, 1274, 1285, 1483, 1630, 1632, 1682, 1687, 2130, 2179, 2479, 2509, 2748, 2887, 2892, 2910, 3088, 3160, 3197, 3292, 3317, 3363, 3505, 3546, 3636, 3682, 3800, 3887, 3916, 4012, 4029, 4041, 4082, 4251, 4290, 4522, 4529, 4583, 4604, 4640, 4647, 5185, 5303, 5350, 5444, 5478, 5583, 5595, 5633, 5665, 5841, 5871, 5891, 6252, 6297, 6419, 6459, 6477, 6504, 6511, 6617, 6648, 6701, 6914, 6952, 6987, 7047, 7223, 7356, 7519, 7629, 7630, 7665, 7828, 7901, 7946, 8017, 8053, 8100, 8181, 8191, 8313, 8348, 8498, 8532, 8546, 8625, 8712, 8720, 8801, 8870, 8875, 8881, 8898, 9011, 9133, 9214, 9352, 9429, 9443, 9530, 9683, 9809], "external_url": "https://colorpunx.io/colors?i=121&name=#dc1d1d", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954303966161141761"}, "#502f05": {"id": 122, "name": "#502f05", "description": "#502f05 is one of 222 colors in the cryptopunx color pallette. It is used by 142 unique punks", "hash": "a08e7c6c6b4becad6dc4ad399928579c", "image": "https://gateway.pinata.cloud/ipfs/QmUr3TdCo7P43Q3np8sQc4EzEPs9DNwfVmfGvft4dvJJxQ?filename=colorpunx122.png", "punks": [59, 363, 397, 442, 516, 626, 735, 860, 862, 915, 943, 945, 1060, 1074, 1116, 1221, 1303, 1507, 1608, 1720, 1782, 1846, 1999, 2020, 2029, 2161, 2270, 2439, 2536, 2581, 2641, 2729, 2833, 2895, 3064, 3077, 3083, 3144, 3256, 3443, 3638, 3657, 3698, 3719, 3801, 3808, 3872, 3914, 4070, 4323, 4336, 4403, 4442, 4501, 4611, 4750, 4780, 4851, 5008, 5111, 5235, 5242, 5318, 5381, 5425, 5454, 5577, 5598, 5714, 5786, 5923, 5924, 5970, 5974, 6204, 6218, 6237, 6280, 6342, 6360, 6375, 6466, 6531, 6552, 6607, 6719, 6747, 6889, 6891, 6966, 6984, 7026, 7031, 7037, 7152, 7203, 7249, 7365, 7374, 7433, 7471, 7485, 7569, 7585, 7592, 7686, 7712, 7746, 7775, 7851, 7880, 7892, 7895, 7986, 8082, 8117, 8188, 8253, 8317, 8402, 8410, 8452, 8520, 8651, 8791, 8803, 8981, 9009, 9079, 9170, 9280, 9350, 9360, 9496, 9679, 9688, 9736, 9774, 9803, 9829, 9870, 9883], "external_url": "https://colorpunx.io/colors?i=122&name=#502f05", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954305065672769537"}, "#794b11": {"id": 123, "name": "#794b11", "description": "#794b11 is one of 222 colors in the cryptopunx color pallette. It is used by 142 unique punks", "hash": "c5459b9b32bd6a545a34acb9491c2bc3", "image": "https://gateway.pinata.cloud/ipfs/QmSPJc9Le8x2bpyen55sCA2DfeXQVS5SBdxmqArMu9wL5r?filename=colorpunx123.png", "punks": [59, 363, 397, 442, 516, 626, 735, 860, 862, 915, 943, 945, 1060, 1074, 1116, 1221, 1303, 1507, 1608, 1720, 1782, 1846, 1999, 2020, 2029, 2161, 2270, 2439, 2536, 2581, 2641, 2729, 2833, 2895, 3064, 3077, 3083, 3144, 3256, 3443, 3638, 3657, 3698, 3719, 3801, 3808, 3872, 3914, 4070, 4323, 4336, 4403, 4442, 4501, 4611, 4750, 4780, 4851, 5008, 5111, 5235, 5242, 5318, 5381, 5425, 5454, 5577, 5598, 5714, 5786, 5923, 5924, 5970, 5974, 6204, 6218, 6237, 6280, 6342, 6360, 6375, 6466, 6531, 6552, 6607, 6719, 6747, 6889, 6891, 6966, 6984, 7026, 7031, 7037, 7152, 7203, 7249, 7365, 7374, 7433, 7471, 7485, 7569, 7585, 7592, 7686, 7712, 7746, 7775, 7851, 7880, 7892, 7895, 7986, 8082, 8117, 8188, 8253, 8317, 8402, 8410, 8452, 8520, 8651, 8791, 8803, 8981, 9009, 9079, 9170, 9280, 9350, 9360, 9496, 9679, 9688, 9736, 9774, 9803, 9829, 9870, 9883], "external_url": "https://colorpunx.io/colors?i=123&name=#794b11", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954306165184397313"}, "#796144": {"id": 124, "name": "#796144", "description": "#796144 is one of 222 colors in the cryptopunx color pallette. It is used by 146 unique punks", "hash": "680081e14300d458f88b819b7c601446", "image": "https://gateway.pinata.cloud/ipfs/QmT6zLFbS3dQQxW6fWAGzHS18QqxGPy6vWPzVmDv6etgrf?filename=colorpunx124.png", "punks": [304, 362, 439, 565, 599, 740, 771, 774, 787, 793, 890, 1062, 1117, 1242, 1274, 1305, 1380, 1398, 1497, 1501, 1696, 2081, 2112, 2276, 2291, 2313, 2319, 2385, 2512, 2528, 2569, 2639, 2702, 2709, 2769, 2783, 2885, 2998, 3010, 3023, 3033, 3068, 3191, 3233, 3320, 3460, 3598, 3614, 3670, 3672, 3701, 3714, 3719, 3849, 3966, 3968, 4182, 4216, 4307, 4370, 4379, 4386, 4404, 4425, 4470, 4481, 4482, 4483, 4503, 4599, 4604, 4680, 4746, 4770, 4810, 4871, 4894, 5109, 5286, 5365, 5448, 5529, 5536, 5543, 5634, 5707, 5722, 5902, 5968, 6132, 6208, 6226, 6258, 6336, 6344, 6413, 6493, 6557, 6602, 6705, 6746, 6850, 6889, 7139, 7186, 7388, 7405, 7435, 7466, 7519, 7541, 7627, 7781, 7952, 8070, 8155, 8181, 8432, 8492, 8619, 8931, 9036, 9082, 9094, 9159, 9249, 9264, 9275, 9279, 9472, 9525, 9553, 9557, 9560, 9569, 9626, 9681, 9704, 9726, 9774, 9810, 9914, 9929, 9950, 9951, 9987], "external_url": "https://colorpunx.io/colors?i=124&name=#796144", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954307264696025089"}, "#51360c": {"id": 125, "name": "#51360c", "description": "#51360c is one of 222 colors in the cryptopunx color pallette. It is used by 151 unique punks", "hash": "2b9b614087df39d0467ef817147c4736", "image": "https://gateway.pinata.cloud/ipfs/QmNyZ1qnDnQaJryuCT5JogSgMG2oDUcFaH11HNpx3CgCqZ?filename=colorpunx125.png", "punks": [53, 91, 187, 352, 413, 449, 500, 514, 620, 707, 708, 712, 729, 773, 861, 866, 1102, 1150, 1187, 1264, 1318, 1388, 1461, 1477, 1583, 1623, 1659, 1671, 1689, 1691, 1913, 1937, 1984, 2022, 2202, 2346, 2384, 2533, 2591, 2697, 2721, 2792, 2815, 2832, 3176, 3190, 3227, 3231, 3377, 3430, 3464, 3465, 3628, 3629, 3798, 3853, 3965, 3991, 4016, 4055, 4279, 4302, 4722, 4772, 4784, 4787, 4806, 4941, 5007, 5010, 5026, 5055, 5064, 5158, 5172, 5266, 5391, 5414, 5438, 5566, 5693, 5813, 5895, 5917, 5919, 5947, 5980, 6005, 6057, 6071, 6169, 6178, 6183, 6224, 6263, 6265, 6329, 6365, 6368, 6425, 6462, 6598, 6618, 6625, 6770, 6933, 7070, 7289, 7296, 7354, 7412, 7421, 7495, 7615, 7661, 7853, 7860, 7915, 7929, 7930, 8055, 8058, 8140, 8203, 8287, 8363, 8560, 8570, 8704, 8764, 8771, 8774, 8775, 8836, 8939, 9014, 9066, 9067, 9247, 9258, 9325, 9367, 9419, 9428, 9451, 9526, 9608, 9866, 9882, 9942, 9957], "external_url": "https://colorpunx.io/colors?i=125&name=#51360c", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954308364207652865"}, "#a49681": {"id": 126, "name": "#a49681", "description": "#a49681 is one of 222 colors in the cryptopunx color pallette. It is used by 154 unique punks", "hash": "83e81c0f6f6ce1aed1e4a0c0ba8b2886", "image": "https://gateway.pinata.cloud/ipfs/QmbYSvVcxHhc6qLsPLVygxmw8GUXhNwpaC1dGSziZW5d3C?filename=colorpunx126.png", "punks": [29, 112, 162, 347, 620, 623, 691, 705, 764, 766, 904, 995, 1016, 1117, 1657, 1780, 1795, 1831, 1969, 1973, 2065, 2071, 2161, 2206, 2223, 2230, 2366, 2469, 2472, 2483, 2492, 2497, 2598, 2603, 2786, 2840, 2965, 3050, 3200, 3208, 3239, 3300, 3486, 3540, 3585, 3625, 3785, 3806, 3824, 3955, 4051, 4147, 4356, 4362, 4375, 4451, 4470, 4481, 4483, 4485, 4642, 4672, 4703, 4783, 4845, 4906, 5039, 5077, 5109, 5186, 5247, 5268, 5330, 5346, 5350, 5365, 5413, 5501, 5540, 5611, 5662, 5776, 5865, 6007, 6013, 6020, 6031, 6036, 6068, 6153, 6226, 6437, 6479, 6527, 6691, 6697, 6712, 6810, 6983, 7037, 7163, 7177, 7182, 7187, 7194, 7275, 7363, 7390, 7422, 7442, 7465, 7542, 7543, 7566, 7598, 7614, 7689, 7765, 7781, 7806, 7807, 7895, 8093, 8119, 8163, 8259, 8335, 8378, 8514, 8543, 8581, 8684, 8741, 8744, 8753, 8755, 8765, 8794, 8866, 8907, 8925, 8954, 9032, 9034, 9040, 9182, 9216, 9321, 9593, 9647, 9687, 9857, 9883, 9957], "external_url": "https://colorpunx.io/colors?i=126&name=#a49681", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954309463719280641"}, "#b7ab98": {"id": 127, "name": "#b7ab98", "description": "#b7ab98 is one of 222 colors in the cryptopunx color pallette. It is used by 154 unique punks", "hash": "eb34d9b2193bcf1040f6b721dc7ff86c", "image": "https://gateway.pinata.cloud/ipfs/QmVckgsDc3GbvHWNyNKAPU5288tTDm7fDb3y2XA4QFXoQK?filename=colorpunx127.png", "punks": [29, 112, 162, 347, 620, 623, 691, 705, 764, 766, 904, 995, 1016, 1117, 1657, 1780, 1795, 1831, 1969, 1973, 2065, 2071, 2161, 2206, 2223, 2230, 2366, 2469, 2472, 2483, 2492, 2497, 2598, 2603, 2786, 2840, 2965, 3050, 3200, 3208, 3239, 3300, 3486, 3540, 3585, 3625, 3785, 3806, 3824, 3955, 4051, 4147, 4356, 4362, 4375, 4451, 4470, 4481, 4483, 4485, 4642, 4672, 4703, 4783, 4845, 4906, 5039, 5077, 5109, 5186, 5247, 5268, 5330, 5346, 5350, 5365, 5413, 5501, 5540, 5611, 5662, 5776, 5865, 6007, 6013, 6020, 6031, 6036, 6068, 6153, 6226, 6437, 6479, 6527, 6691, 6697, 6712, 6810, 6983, 7037, 7163, 7177, 7182, 7187, 7194, 7275, 7363, 7390, 7422, 7442, 7465, 7542, 7543, 7566, 7598, 7614, 7689, 7765, 7781, 7806, 7807, 7895, 8093, 8119, 8163, 8259, 8335, 8378, 8514, 8543, 8581, 8684, 8741, 8744, 8753, 8755, 8765, 8794, 8866, 8907, 8925, 8954, 9032, 9034, 9040, 9182, 9216, 9321, 9593, 9647, 9687, 9857, 9883, 9957], "external_url": "https://colorpunx.io/colors?i=127&name=#b7ab98", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954310563230908417"}, "#bbb3a6": {"id": 128, "name": "#bbb3a6", "description": "#bbb3a6 is one of 222 colors in the cryptopunx color pallette. It is used by 154 unique punks", "hash": "4631fc2794b20bda3540256c599d5916", "image": "https://gateway.pinata.cloud/ipfs/QmaQqrTK515xqvRzNKCVYLPHfhGAwLXDRSvRgS4sjcKAUj?filename=colorpunx128.png", "punks": [29, 112, 162, 347, 620, 623, 691, 705, 764, 766, 904, 995, 1016, 1117, 1657, 1780, 1795, 1831, 1969, 1973, 2065, 2071, 2161, 2206, 2223, 2230, 2366, 2469, 2472, 2483, 2492, 2497, 2598, 2603, 2786, 2840, 2965, 3050, 3200, 3208, 3239, 3300, 3486, 3540, 3585, 3625, 3785, 3806, 3824, 3955, 4051, 4147, 4356, 4362, 4375, 4451, 4470, 4481, 4483, 4485, 4642, 4672, 4703, 4783, 4845, 4906, 5039, 5077, 5109, 5186, 5247, 5268, 5330, 5346, 5350, 5365, 5413, 5501, 5540, 5611, 5662, 5776, 5865, 6007, 6013, 6020, 6031, 6036, 6068, 6153, 6226, 6437, 6479, 6527, 6691, 6697, 6712, 6810, 6983, 7037, 7163, 7177, 7182, 7187, 7194, 7275, 7363, 7390, 7422, 7442, 7465, 7542, 7543, 7566, 7598, 7614, 7689, 7765, 7781, 7806, 7807, 7895, 8093, 8119, 8163, 8259, 8335, 8378, 8514, 8543, 8581, 8684, 8741, 8744, 8753, 8755, 8765, 8794, 8866, 8907, 8925, 8954, 9032, 9034, 9040, 9182, 9216, 9321, 9593, 9647, 9687, 9857, 9883, 9957], "external_url": "https://colorpunx.io/colors?i=128&name=#bbb3a6", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954311662742536193"}, "#dfdfdf": {"id": 129, "name": "#dfdfdf", "description": "#dfdfdf is one of 222 colors in the cryptopunx color pallette. It is used by 156 unique punks", "hash": "aebc8dfc3a96c778985422460e72d770", "image": "https://gateway.pinata.cloud/ipfs/QmRcLe6jDoEcE7EuPndRTpdRgFWoGcaaMnvHVb7QW6myEu?filename=colorpunx129.png", "punks": [168, 404, 525, 679, 769, 784, 862, 868, 885, 928, 1015, 1111, 1287, 1333, 1351, 1600, 1884, 2268, 2353, 2406, 2423, 2541, 2631, 2650, 2704, 2762, 2792, 2863, 2872, 3225, 3275, 3368, 3381, 3384, 3419, 3471, 3568, 3587, 3680, 3875, 3886, 4057, 4121, 4159, 4246, 4260, 4261, 4264, 4272, 4409, 4637, 4639, 4726, 4802, 4880, 4932, 4982, 5214, 5235, 5241, 5300, 5320, 5414, 5464, 5511, 5530, 5635, 5642, 5656, 5735, 5792, 5814, 5841, 5883, 6113, 6146, 6156, 6277, 6307, 6320, 6328, 6351, 6368, 6385, 6404, 6405, 6541, 6571, 6611, 6619, 6638, 6676, 6730, 6733, 6737, 6738, 6771, 6775, 6795, 6886, 6888, 6942, 6989, 7111, 7123, 7177, 7257, 7340, 7640, 7658, 7709, 7731, 7783, 7800, 7881, 7951, 8040, 8071, 8088, 8130, 8276, 8342, 8385, 8395, 8486, 8574, 8577, 8638, 8643, 8670, 8789, 8927, 9049, 9096, 9105, 9124, 9211, 9319, 9451, 9479, 9495, 9534, 9580, 9618, 9625, 9651, 9674, 9698, 9760, 9797, 9800, 9802, 9852, 9859, 9910, 9946], "external_url": "https://colorpunx.io/colors?i=129&name=#dfdfdf", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954312762254163969"}, "#897a70": {"id": 130, "name": "#897a70", "description": "#897a70 is one of 222 colors in the cryptopunx color pallette. It is used by 161 unique punks", "hash": "3d8f858ee8351eaef30c68da999c6b75", "image": "https://gateway.pinata.cloud/ipfs/QmW48JEok861SN6ocMjoqse9rKHKTnRw1oxikxmkqQrZBh?filename=colorpunx130.png", "punks": [19, 35, 174, 332, 425, 431, 536, 555, 622, 998, 1029, 1235, 1341, 1352, 1372, 1397, 1430, 1503, 1570, 1687, 1832, 1856, 1905, 2026, 2094, 2220, 2226, 2285, 2299, 2326, 2395, 2431, 2435, 2443, 2448, 2518, 2538, 2631, 2663, 2710, 2796, 2832, 2871, 2936, 2989, 3008, 3014, 3067, 3093, 3104, 3119, 3173, 3181, 3186, 3196, 3371, 3421, 3498, 3680, 3864, 3890, 3976, 4070, 4136, 4149, 4189, 4234, 4384, 4432, 4519, 4592, 4653, 4737, 4752, 4761, 4809, 4837, 4856, 4879, 5290, 5298, 5341, 5420, 5737, 5806, 5840, 5892, 6022, 6083, 6113, 6198, 6269, 6306, 6309, 6467, 6601, 6605, 6624, 6655, 6730, 6846, 6888, 6899, 6974, 7007, 7081, 7205, 7221, 7263, 7274, 7288, 7320, 7575, 7628, 7671, 7734, 7737, 7801, 7874, 7902, 7909, 7963, 8047, 8086, 8159, 8246, 8291, 8300, 8308, 8436, 8444, 8454, 8500, 8559, 8560, 8645, 8647, 8661, 8710, 8813, 8852, 8887, 9054, 9061, 9147, 9228, 9260, 9328, 9330, 9376, 9403, 9415, 9497, 9564, 9580, 9603, 9637, 9677, 9840, 9870, 9930], "external_url": "https://colorpunx.io/colors?i=130&name=#897a70", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954313861765791745"}, "#988880": {"id": 131, "name": "#988880", "description": "#988880 is one of 222 colors in the cryptopunx color pallette. It is used by 161 unique punks", "hash": "ff3b1b391be387ee56279ded0d014c88", "image": "https://gateway.pinata.cloud/ipfs/QmWfmFU2zdy7bXGMtfwz5tvL7mVQNGRqbmTu4cYbBwzWCQ?filename=colorpunx131.png", "punks": [19, 35, 174, 332, 425, 431, 536, 555, 622, 998, 1029, 1235, 1341, 1352, 1372, 1397, 1430, 1503, 1570, 1687, 1832, 1856, 1905, 2026, 2094, 2220, 2226, 2285, 2299, 2326, 2395, 2431, 2435, 2443, 2448, 2518, 2538, 2631, 2663, 2710, 2796, 2832, 2871, 2936, 2989, 3008, 3014, 3067, 3093, 3104, 3119, 3173, 3181, 3186, 3196, 3371, 3421, 3498, 3680, 3864, 3890, 3976, 4070, 4136, 4149, 4189, 4234, 4384, 4432, 4519, 4592, 4653, 4737, 4752, 4761, 4809, 4837, 4856, 4879, 5290, 5298, 5341, 5420, 5737, 5806, 5840, 5892, 6022, 6083, 6113, 6198, 6269, 6306, 6309, 6467, 6601, 6605, 6624, 6655, 6730, 6846, 6888, 6899, 6974, 7007, 7081, 7205, 7221, 7263, 7274, 7288, 7320, 7575, 7628, 7671, 7734, 7737, 7801, 7874, 7902, 7909, 7963, 8047, 8086, 8159, 8246, 8291, 8300, 8308, 8436, 8444, 8454, 8500, 8559, 8560, 8645, 8647, 8661, 8710, 8813, 8852, 8887, 9054, 9061, 9147, 9228, 9260, 9328, 9330, 9376, 9403, 9415, 9497, 9564, 9580, 9603, 9637, 9677, 9840, 9870, 9930], "external_url": "https://colorpunx.io/colors?i=131&name=#988880", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954314961277419521"}, "#998475": {"id": 132, "name": "#998475", "description": "#998475 is one of 222 colors in the cryptopunx color pallette. It is used by 161 unique punks", "hash": "4fd4dbd5542d4333c44bef01ed849a20", "image": "https://gateway.pinata.cloud/ipfs/QmYkgyzzapydoy7dfHognV53Mv5oeSVn8jN6cgy36bwkpc?filename=colorpunx132.png", "punks": [19, 35, 174, 332, 425, 431, 536, 555, 622, 998, 1029, 1235, 1341, 1352, 1372, 1397, 1430, 1503, 1570, 1687, 1832, 1856, 1905, 2026, 2094, 2220, 2226, 2285, 2299, 2326, 2395, 2431, 2435, 2443, 2448, 2518, 2538, 2631, 2663, 2710, 2796, 2832, 2871, 2936, 2989, 3008, 3014, 3067, 3093, 3104, 3119, 3173, 3181, 3186, 3196, 3371, 3421, 3498, 3680, 3864, 3890, 3976, 4070, 4136, 4149, 4189, 4234, 4384, 4432, 4519, 4592, 4653, 4737, 4752, 4761, 4809, 4837, 4856, 4879, 5290, 5298, 5341, 5420, 5737, 5806, 5840, 5892, 6022, 6083, 6113, 6198, 6269, 6306, 6309, 6467, 6601, 6605, 6624, 6655, 6730, 6846, 6888, 6899, 6974, 7007, 7081, 7205, 7221, 7263, 7274, 7288, 7320, 7575, 7628, 7671, 7734, 7737, 7801, 7874, 7902, 7909, 7963, 8047, 8086, 8159, 8246, 8291, 8300, 8308, 8436, 8444, 8454, 8500, 8559, 8560, 8645, 8647, 8661, 8710, 8813, 8852, 8887, 9054, 9061, 9147, 9228, 9260, 9328, 9330, 9376, 9403, 9415, 9497, 9564, 9580, 9603, 9637, 9677, 9840, 9870, 9930], "external_url": "https://colorpunx.io/colors?i=132&name=#998475", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954316060789047297"}, "#997c59": {"id": 133, "name": "#997c59", "description": "#997c59 is one of 222 colors in the cryptopunx color pallette. It is used by 164 unique punks", "hash": "b48ef375cd096096017dfd269082d14a", "image": "https://gateway.pinata.cloud/ipfs/QmYcRXPZZNiWzzuuibyJHY5PdhVXkj5QQLxMVVN18FjHKN?filename=colorpunx133.png", "punks": [75, 183, 343, 414, 492, 540, 690, 730, 754, 805, 808, 819, 887, 969, 1111, 1128, 1137, 1270, 1335, 1402, 1948, 2032, 2175, 2209, 2264, 2311, 2315, 2420, 2535, 2789, 2923, 2931, 2944, 3045, 3047, 3101, 3157, 3184, 3316, 3339, 3355, 3410, 3438, 3445, 3467, 3477, 3549, 3566, 3732, 3780, 3860, 3869, 3926, 3938, 3994, 4003, 4033, 4259, 4262, 4272, 4283, 4296, 4297, 4488, 4565, 4569, 4745, 4869, 4919, 4968, 5031, 5034, 5037, 5050, 5080, 5095, 5226, 5230, 5241, 5242, 5273, 5370, 5397, 5453, 5473, 5585, 5643, 5663, 5665, 5694, 5746, 5805, 5841, 5849, 5876, 5933, 6138, 6177, 6213, 6299, 6313, 6316, 6349, 6529, 6610, 6709, 6852, 6949, 6982, 6992, 7152, 7238, 7240, 7245, 7307, 7334, 7376, 7478, 7487, 7488, 7538, 7546, 7554, 7572, 7625, 7666, 7745, 7757, 7796, 7815, 8022, 8050, 8087, 8102, 8122, 8256, 8366, 8520, 8550, 8598, 8651, 8659, 8707, 8737, 8781, 8868, 8981, 9056, 9079, 9112, 9121, 9208, 9254, 9329, 9389, 9391, 9421, 9494, 9766, 9785, 9794, 9850, 9860, 9946], "external_url": "https://colorpunx.io/colors?i=133&name=#997c59", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954317160300675073"}, "#710cc7": {"id": 134, "name": "#710cc7", "description": "#710cc7 is one of 222 colors in the cryptopunx color pallette. It is used by 165 unique punks", "hash": "602f9fed87c7cffb8faec897b43ab230", "image": "https://gateway.pinata.cloud/ipfs/QmZ3PTavWH9KAb6BMrgHgdrAm3LCpqtjSgP9Tt8EqRxZsr?filename=colorpunx134.png", "punks": [133, 260, 346, 351, 399, 412, 467, 524, 592, 662, 762, 793, 842, 879, 930, 965, 1005, 1079, 1114, 1127, 1129, 1152, 1154, 1192, 1216, 1244, 1262, 1271, 1308, 1320, 1421, 1522, 1647, 1656, 1663, 1763, 1851, 2010, 2058, 2060, 2080, 2250, 2264, 2353, 2443, 2485, 2574, 2637, 2665, 2672, 2685, 2747, 2806, 2879, 2899, 2990, 3041, 3074, 3188, 3280, 3335, 3370, 3416, 3496, 3679, 3696, 3815, 3942, 3973, 4109, 4124, 4160, 4165, 4234, 4271, 4472, 4531, 4572, 4631, 4748, 4759, 4820, 4850, 4901, 4938, 4956, 4967, 4970, 5162, 5288, 5306, 5397, 5421, 5424, 5480, 5651, 5686, 5767, 5793, 5835, 5874, 6010, 6138, 6226, 6344, 6404, 6473, 6594, 6684, 6693, 6778, 6800, 6937, 6941, 6949, 6993, 7004, 7018, 7158, 7275, 7294, 7328, 7526, 7600, 7613, 7697, 7699, 7753, 7799, 7831, 7910, 7917, 7948, 7952, 7990, 8083, 8304, 8312, 8469, 8479, 8550, 8575, 8601, 8705, 8794, 8978, 8998, 9048, 9054, 9069, 9118, 9130, 9185, 9220, 9262, 9279, 9347, 9354, 9382, 9584, 9761, 9856, 9858, 9877, 9963], "external_url": "https://colorpunx.io/colors?i=134&name=#710cc7", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954318259812302849"}, "#4f2c14": {"id": 135, "name": "#4f2c14", "description": "#4f2c14 is one of 222 colors in the cryptopunx color pallette. It is used by 166 unique punks", "hash": "3fac7c5aacdcf61774acbc109a79b539", "image": "https://gateway.pinata.cloud/ipfs/QmX3tFC6SA7tE9BCJm6gmKXdf4TCpqYzehuASm4s1fWrwG?filename=colorpunx135.png", "punks": [52, 74, 136, 154, 441, 444, 556, 639, 709, 748, 791, 833, 889, 891, 902, 923, 1063, 1116, 1172, 1226, 1503, 1605, 1639, 1692, 2035, 2153, 2236, 2288, 2298, 2458, 2489, 2490, 2498, 2519, 2565, 2577, 2648, 2691, 2744, 2771, 2796, 2912, 2956, 2970, 3014, 3103, 3106, 3180, 3330, 3352, 3365, 3370, 3421, 3433, 3452, 3505, 3506, 3509, 3654, 3676, 3716, 3779, 3933, 4039, 4091, 4210, 4220, 4255, 4280, 4328, 4407, 4448, 4452, 4484, 4494, 4521, 4574, 4591, 4651, 4684, 4709, 4765, 4791, 4793, 4807, 4840, 4847, 4881, 4967, 5021, 5174, 5218, 5322, 5349, 5392, 5595, 5633, 5802, 5855, 5892, 5897, 5985, 6126, 6146, 6233, 6246, 6289, 6327, 6334, 6374, 6399, 6421, 6514, 6595, 6605, 6742, 6749, 6758, 6985, 7008, 7154, 7167, 7179, 7185, 7215, 7385, 7393, 7399, 7485, 7517, 7684, 7902, 8002, 8080, 8095, 8180, 8186, 8237, 8500, 8536, 8545, 8568, 8571, 8642, 8650, 8661, 8806, 8834, 8851, 8919, 9017, 9076, 9123, 9124, 9157, 9172, 9207, 9266, 9287, 9322, 9448, 9507, 9823, 9835, 9872, 9993], "external_url": "https://colorpunx.io/colors?i=135&name=#4f2c14", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954319359323930625"}, "#ffc926": {"id": 136, "name": "#ffc926", "description": "#ffc926 is one of 222 colors in the cryptopunx color pallette. It is used by 167 unique punks", "hash": "a5733d1c30591428026f2c65ae39d72e", "image": "https://gateway.pinata.cloud/ipfs/QmXNXJAB8eLT3VHYgZ1YwbgCQUkYiLQ8hTuNthFX1BX5RP?filename=colorpunx136.png", "punks": [129, 265, 355, 387, 659, 896, 1020, 1105, 1135, 1183, 1198, 1358, 1396, 1433, 1474, 1526, 1729, 1755, 1777, 1914, 1979, 2033, 2148, 2295, 2400, 2510, 2622, 2740, 2753, 2761, 2894, 3012, 3013, 3134, 3206, 3318, 3345, 3347, 3432, 3620, 3684, 3711, 3797, 3863, 3898, 3900, 3992, 4075, 4234, 4382, 4428, 4435, 4478, 4596, 4795, 4953, 5059, 5107, 5167, 5175, 5217, 5246, 5260, 5261, 5406, 5454, 5526, 5586, 5600, 5622, 5639, 5645, 5649, 5662, 5675, 5712, 5754, 5889, 5930, 5980, 6016, 6018, 6040, 6049, 6094, 6095, 6107, 6200, 6240, 6283, 6334, 6466, 6538, 6596, 6667, 6677, 6687, 6870, 6894, 6903, 6949, 7038, 7046, 7182, 7197, 7236, 7331, 7412, 7434, 7450, 7473, 7485, 7530, 7569, 7669, 7727, 7739, 7910, 7929, 7935, 7952, 7982, 7997, 8001, 8021, 8065, 8152, 8194, 8242, 8320, 8328, 8360, 8400, 8437, 8447, 8467, 8468, 8496, 8554, 8581, 8606, 8633, 8654, 8659, 8686, 8805, 8846, 8862, 8917, 8985, 9032, 9052, 9136, 9216, 9328, 9389, 9429, 9502, 9621, 9657, 9757, 9775, 9783, 9819, 9867, 9878, 9988], "external_url": "https://colorpunx.io/colors?i=136&name=#ffc926", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954320458835558401"}, "#917656": {"id": 137, "name": "#917656", "description": "#917656 is one of 222 colors in the cryptopunx color pallette. It is used by 169 unique punks", "hash": "efefa6aa4738686d82bf767eee385bb7", "image": "https://gateway.pinata.cloud/ipfs/QmZ1VbGmKnAswpXpnPhSKQwr58c2FzH3rEqQWFUKbbpHFG?filename=colorpunx137.png", "punks": [170, 218, 308, 351, 415, 788, 799, 906, 926, 936, 966, 993, 1051, 1097, 1163, 1294, 1312, 1386, 1416, 1464, 1513, 1516, 1569, 1606, 1641, 1662, 1690, 1726, 1791, 1804, 1881, 1921, 1968, 2033, 2038, 2096, 2182, 2211, 2215, 2322, 2340, 2342, 2378, 2413, 2474, 2568, 2606, 2687, 2861, 3225, 3246, 3329, 3341, 3389, 3394, 3491, 3586, 3681, 3721, 3725, 3912, 4084, 4101, 4153, 4168, 4171, 4241, 4333, 4348, 4349, 4406, 4426, 4546, 4560, 4678, 4691, 4716, 4720, 4738, 4757, 4768, 4797, 4846, 4870, 4950, 4999, 5070, 5157, 5270, 5293, 5354, 5428, 5443, 5588, 5659, 5675, 5702, 5734, 5752, 5768, 5807, 5847, 5937, 5952, 5995, 6012, 6027, 6191, 6218, 6243, 6318, 6325, 6417, 6486, 6520, 6558, 6565, 6627, 6710, 6731, 6878, 6943, 6945, 7060, 7153, 7231, 7293, 7521, 7557, 7576, 7630, 7645, 7661, 7741, 7768, 8029, 8035, 8067, 8203, 8385, 8419, 8433, 8495, 8615, 8625, 8699, 8706, 8788, 8874, 8894, 8980, 8982, 9037, 9053, 9055, 9063, 9114, 9305, 9341, 9599, 9602, 9651, 9696, 9712, 9721, 9824, 9856, 9924, 9933], "external_url": "https://colorpunx.io/colors?i=137&name=#917656", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954321558347186177"}, "#765f43": {"id": 138, "name": "#765f43", "description": "#765f43 is one of 222 colors in the cryptopunx color pallette. It is used by 171 unique punks", "hash": "bf9e835400f70d60643aebb54ab9a313", "image": "https://gateway.pinata.cloud/ipfs/QmVD2M7Qh77RUUayzL8gN5cEk5A3c49hSoK7vUhanW8eWC?filename=colorpunx138.png", "punks": [45, 171, 488, 511, 535, 605, 735, 952, 1022, 1026, 1139, 1244, 1250, 1329, 1357, 1452, 1456, 1672, 1676, 1800, 1834, 1864, 1900, 1910, 2023, 2037, 2120, 2183, 2205, 2359, 2533, 2652, 2659, 2661, 2788, 2961, 3086, 3112, 3198, 3294, 3338, 3379, 3406, 3492, 3567, 3587, 3610, 3638, 3791, 3880, 3891, 3928, 3946, 4027, 4046, 4083, 4122, 4151, 4174, 4219, 4326, 4359, 4435, 4647, 4658, 4669, 4734, 4735, 4796, 4832, 4898, 4933, 4994, 5046, 5106, 5151, 5334, 5505, 5526, 5552, 5599, 5672, 5731, 5779, 5793, 5808, 5846, 5856, 6020, 6044, 6241, 6244, 6270, 6300, 6302, 6340, 6372, 6394, 6434, 6534, 6543, 6545, 6636, 6700, 6703, 6864, 6909, 6917, 6946, 6987, 7022, 7097, 7142, 7182, 7200, 7210, 7309, 7355, 7431, 7471, 7490, 7493, 7511, 7555, 7769, 7811, 7930, 7971, 8032, 8037, 8075, 8144, 8211, 8254, 8255, 8339, 8348, 8397, 8475, 8610, 8653, 8662, 8702, 8829, 8838, 8905, 8945, 8973, 9032, 9065, 9139, 9205, 9378, 9395, 9434, 9501, 9536, 9583, 9722, 9770, 9796, 9817, 9844, 9851, 9900, 9902, 9915, 9917, 9944, 9975, 9983], "external_url": "https://colorpunx.io/colors?i=138&name=#765f43", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954322657858813953"}, "#52321a": {"id": 139, "name": "#52321a", "description": "#52321a is one of 222 colors in the cryptopunx color pallette. It is used by 171 unique punks", "hash": "3fe5190a7c46ce433711effa7368639a", "image": "https://gateway.pinata.cloud/ipfs/QmQxUPz1cdtDbBygLjAznUB3XnZJgxXUxap1Ussgmz15kZ?filename=colorpunx139.png", "punks": [173, 470, 689, 862, 876, 1017, 1158, 1184, 1322, 1345, 1436, 1493, 1512, 1527, 1561, 1625, 1633, 1634, 1818, 1995, 2017, 2040, 2047, 2124, 2129, 2142, 2168, 2181, 2197, 2202, 2250, 2254, 2263, 2282, 2398, 2427, 2445, 2463, 2518, 2557, 2595, 2613, 2677, 2739, 2750, 2919, 2971, 3173, 3199, 3289, 3348, 3360, 3368, 3425, 3428, 3437, 3502, 3519, 3744, 3767, 3914, 3964, 3986, 4078, 4103, 4195, 4207, 4245, 4300, 4340, 4392, 4449, 4461, 4554, 4563, 4575, 4583, 4775, 4841, 4912, 4926, 4973, 5137, 5222, 5256, 5458, 5682, 5723, 5748, 5866, 5911, 5917, 5945, 5996, 5997, 5998, 5999, 6088, 6163, 6239, 6262, 6276, 6322, 6341, 6369, 6483, 6551, 6663, 6669, 6730, 6755, 6811, 6836, 6880, 6884, 6950, 6951, 7003, 7029, 7190, 7208, 7234, 7286, 7295, 7304, 7326, 7486, 7655, 7709, 7734, 7758, 7764, 7791, 7794, 7805, 7839, 7842, 7873, 7955, 8083, 8089, 8234, 8241, 8277, 8351, 8396, 8438, 8592, 8683, 8687, 9054, 9088, 9147, 9240, 9243, 9304, 9362, 9380, 9481, 9483, 9519, 9604, 9617, 9656, 9703, 9727, 9729, 9806, 9887, 9888, 9984], "external_url": "https://colorpunx.io/colors?i=139&name=#52321a", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954323757370441729"}, "#b6a389": {"id": 140, "name": "#b6a389", "description": "#b6a389 is one of 222 colors in the cryptopunx color pallette. It is used by 174 unique punks", "hash": "7444c048bbfb30cc38926057543a2fe1", "image": "https://gateway.pinata.cloud/ipfs/QmRzjEQQMraLyMmFiVfNq5qFTZJFZpCpUdEyvxMkJmmGEq?filename=colorpunx140.png", "punks": [129, 138, 143, 308, 328, 645, 664, 783, 790, 903, 922, 993, 997, 1167, 1198, 1309, 1336, 1363, 1508, 1586, 1679, 1690, 1701, 1751, 1826, 1836, 1895, 2003, 2005, 2184, 2221, 2296, 2331, 2374, 2452, 2520, 2619, 2673, 2701, 2728, 2789, 2797, 2819, 2993, 3026, 3045, 3064, 3250, 3302, 3310, 3316, 3384, 3390, 3394, 3402, 3420, 3440, 3589, 3679, 3786, 3819, 3833, 3874, 3921, 4067, 4090, 4101, 4162, 4244, 4259, 4287, 4330, 4371, 4453, 4663, 4678, 4713, 4732, 4995, 5004, 5010, 5030, 5072, 5104, 5107, 5241, 5261, 5315, 5357, 5553, 5610, 5663, 5741, 5769, 5891, 5921, 5958, 5993, 6066, 6103, 6131, 6138, 6161, 6162, 6203, 6213, 6310, 6339, 6409, 6469, 6504, 6506, 6597, 6618, 6635, 6678, 6809, 6823, 6835, 6873, 6995, 7088, 7271, 7290, 7296, 7302, 7307, 7315, 7317, 7420, 7487, 7537, 7557, 7576, 7589, 7638, 7718, 7725, 7741, 7770, 7821, 7896, 7912, 8079, 8304, 8640, 8649, 8651, 8714, 8717, 8767, 8790, 8849, 8876, 8924, 8934, 8937, 8978, 8982, 9073, 9083, 9086, 9156, 9308, 9333, 9602, 9611, 9745, 9771, 9795, 9814, 9837, 9856, 9896], "external_url": "https://colorpunx.io/colors?i=140&name=#b6a389", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954324856882069505"}, "#cfbda6": {"id": 141, "name": "#cfbda6", "description": "#cfbda6 is one of 222 colors in the cryptopunx color pallette. It is used by 174 unique punks", "hash": "a08a580518d220fa2488d0b2ec81131e", "image": "https://gateway.pinata.cloud/ipfs/QmU7EjqvfngDmXadN26qQzMxP3mVuRGx93YXEsKCq63UaH?filename=colorpunx141.png", "punks": [129, 138, 143, 308, 328, 645, 664, 783, 790, 903, 922, 993, 997, 1167, 1198, 1309, 1336, 1363, 1508, 1586, 1679, 1690, 1701, 1751, 1826, 1836, 1895, 2003, 2005, 2184, 2221, 2296, 2331, 2374, 2452, 2520, 2619, 2673, 2701, 2728, 2789, 2797, 2819, 2993, 3026, 3045, 3064, 3250, 3302, 3310, 3316, 3384, 3390, 3394, 3402, 3420, 3440, 3589, 3679, 3786, 3819, 3833, 3874, 3921, 4067, 4090, 4101, 4162, 4244, 4259, 4287, 4330, 4371, 4453, 4663, 4678, 4713, 4732, 4995, 5004, 5010, 5030, 5072, 5104, 5107, 5241, 5261, 5315, 5357, 5553, 5610, 5663, 5741, 5769, 5891, 5921, 5958, 5993, 6066, 6103, 6131, 6138, 6161, 6162, 6203, 6213, 6310, 6339, 6409, 6469, 6504, 6506, 6597, 6618, 6635, 6678, 6809, 6823, 6835, 6873, 6995, 7088, 7271, 7290, 7296, 7302, 7307, 7315, 7317, 7420, 7487, 7537, 7557, 7576, 7589, 7638, 7718, 7725, 7741, 7770, 7821, 7896, 7912, 8079, 8304, 8640, 8649, 8651, 8714, 8717, 8767, 8790, 8849, 8876, 8924, 8934, 8937, 8978, 8982, 9073, 9083, 9086, 9156, 9308, 9333, 9602, 9611, 9745, 9771, 9795, 9814, 9837, 9856, 9896], "external_url": "https://colorpunx.io/colors?i=141&name=#cfbda6", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954325956393697281"}, "#d4c8b8": {"id": 142, "name": "#d4c8b8", "description": "#d4c8b8 is one of 222 colors in the cryptopunx color pallette. It is used by 174 unique punks", "hash": "bf0a3189a8b63a5c82359c9a3a560c0e", "image": "https://gateway.pinata.cloud/ipfs/QmNM8UM1ktJbgH7NU7Wo9ez9GA5UCm5tQDqBrEe3ioa7Jd?filename=colorpunx142.png", "punks": [129, 138, 143, 308, 328, 645, 664, 783, 790, 903, 922, 993, 997, 1167, 1198, 1309, 1336, 1363, 1508, 1586, 1679, 1690, 1701, 1751, 1826, 1836, 1895, 2003, 2005, 2184, 2221, 2296, 2331, 2374, 2452, 2520, 2619, 2673, 2701, 2728, 2789, 2797, 2819, 2993, 3026, 3045, 3064, 3250, 3302, 3310, 3316, 3384, 3390, 3394, 3402, 3420, 3440, 3589, 3679, 3786, 3819, 3833, 3874, 3921, 4067, 4090, 4101, 4162, 4244, 4259, 4287, 4330, 4371, 4453, 4663, 4678, 4713, 4732, 4995, 5004, 5010, 5030, 5072, 5104, 5107, 5241, 5261, 5315, 5357, 5553, 5610, 5663, 5741, 5769, 5891, 5921, 5958, 5993, 6066, 6103, 6131, 6138, 6161, 6162, 6203, 6213, 6310, 6339, 6409, 6469, 6504, 6506, 6597, 6618, 6635, 6678, 6809, 6823, 6835, 6873, 6995, 7088, 7271, 7290, 7296, 7302, 7307, 7315, 7317, 7420, 7487, 7537, 7557, 7576, 7589, 7638, 7718, 7725, 7741, 7770, 7821, 7896, 7912, 8079, 8304, 8640, 8649, 8651, 8714, 8717, 8767, 8790, 8849, 8876, 8924, 8934, 8937, 8978, 8982, 9073, 9083, 9086, 9156, 9308, 9333, 9602, 9611, 9745, 9771, 9795, 9814, 9837, 9856, 9896], "external_url": "https://colorpunx.io/colors?i=142&name=#d4c8b8", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954327055905325057"}, "#b1b1b1": {"id": 143, "name": "#b1b1b1", "description": "#b1b1b1 is one of 222 colors in the cryptopunx color pallette. It is used by 175 unique punks", "hash": "a76e0296a51730b53409055dec4b6798", "image": "https://gateway.pinata.cloud/ipfs/QmVpobLNsj4BehedHgSNNeWcWCjRsvjDwFR1FQAGXh7cV8?filename=colorpunx143.png", "punks": [340, 436, 454, 542, 596, 746, 784, 903, 1123, 1226, 1393, 1407, 1426, 1506, 1520, 1564, 1578, 1654, 1784, 1798, 1831, 1870, 1955, 1963, 2123, 2187, 2333, 2382, 2449, 2450, 2452, 2551, 2704, 2715, 2757, 2773, 2911, 2949, 2960, 2982, 3052, 3120, 3280, 3383, 3601, 3626, 3649, 3682, 3703, 3810, 3831, 3871, 3908, 3943, 4003, 4055, 4094, 4173, 4176, 4231, 4259, 4284, 4342, 4596, 4611, 4681, 4718, 4723, 4785, 4806, 4829, 4830, 5010, 5025, 5118, 5204, 5219, 5284, 5498, 5500, 5572, 5656, 5680, 5716, 5818, 5838, 5949, 5958, 6011, 6093, 6152, 6153, 6173, 6178, 6210, 6224, 6266, 6358, 6422, 6451, 6455, 6701, 6760, 6786, 6792, 6839, 7055, 7071, 7198, 7199, 7212, 7415, 7461, 7475, 7476, 7480, 7519, 7523, 7590, 7671, 7677, 7679, 7683, 7689, 7695, 7749, 7761, 7778, 7868, 7869, 7882, 7886, 7891, 7972, 7975, 7976, 8016, 8206, 8506, 8608, 8618, 8660, 8669, 8696, 8708, 8716, 8818, 8819, 8867, 8881, 8936, 8953, 9012, 9019, 9038, 9148, 9160, 9234, 9251, 9379, 9410, 9471, 9522, 9560, 9625, 9636, 9644, 9672, 9702, 9715, 9752, 9882, 9892, 9957, 9961], "external_url": "https://colorpunx.io/colors?i=143&name=#b1b1b1", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954328155416952833"}, "#c9c9c9": {"id": 144, "name": "#c9c9c9", "description": "#c9c9c9 is one of 222 colors in the cryptopunx color pallette. It is used by 175 unique punks", "hash": "d8e36520375ee8f22b06675ac2c79449", "image": "https://gateway.pinata.cloud/ipfs/QmWrHwwdjurRFr8UoV7AStzZsG3VAEdaNuvcDZkazmbnUq?filename=colorpunx144.png", "punks": [340, 436, 454, 542, 596, 746, 784, 903, 1123, 1226, 1393, 1407, 1426, 1506, 1520, 1564, 1578, 1654, 1784, 1798, 1831, 1870, 1955, 1963, 2123, 2187, 2333, 2382, 2449, 2450, 2452, 2551, 2704, 2715, 2757, 2773, 2911, 2949, 2960, 2982, 3052, 3120, 3280, 3383, 3601, 3626, 3649, 3682, 3703, 3810, 3831, 3871, 3908, 3943, 4003, 4055, 4094, 4173, 4176, 4231, 4259, 4284, 4342, 4596, 4611, 4681, 4718, 4723, 4785, 4806, 4829, 4830, 5010, 5025, 5118, 5204, 5219, 5284, 5498, 5500, 5572, 5656, 5680, 5716, 5818, 5838, 5949, 5958, 6011, 6093, 6152, 6153, 6173, 6178, 6210, 6224, 6266, 6358, 6422, 6451, 6455, 6701, 6760, 6786, 6792, 6839, 7055, 7071, 7198, 7199, 7212, 7415, 7461, 7475, 7476, 7480, 7519, 7523, 7590, 7671, 7677, 7679, 7683, 7689, 7695, 7749, 7761, 7778, 7868, 7869, 7882, 7886, 7891, 7972, 7975, 7976, 8016, 8206, 8506, 8608, 8618, 8660, 8669, 8696, 8708, 8716, 8818, 8819, 8867, 8881, 8936, 8953, 9012, 9019, 9038, 9148, 9160, 9234, 9251, 9379, 9410, 9471, 9522, 9560, 9625, 9636, 9644, 9672, 9702, 9715, 9752, 9882, 9892, 9957, 9961], "external_url": "https://colorpunx.io/colors?i=144&name=#c9c9c9", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954329254928580609"}, "#005580": {"id": 145, "name": "#005580", "description": "#005580 is one of 222 colors in the cryptopunx color pallette. It is used by 178 unique punks", "hash": "35e2d7b13dae5b34f1532281032eabb0", "image": "https://gateway.pinata.cloud/ipfs/QmRd51YqouerqtQD5ixi6i88Gjb9HMPvphoRWAtBKyqyqQ?filename=colorpunx145.png", "punks": [66, 100, 120, 125, 193, 196, 292, 331, 345, 357, 482, 576, 580, 588, 659, 664, 695, 732, 767, 776, 857, 876, 901, 948, 951, 977, 991, 1043, 1051, 1142, 1199, 1272, 1386, 1554, 1588, 1598, 1645, 1652, 1679, 1885, 1990, 2014, 2068, 2159, 2162, 2275, 2299, 2467, 2525, 2544, 2588, 2682, 2918, 2960, 3008, 3031, 3079, 3087, 3148, 3277, 3311, 3333, 3343, 3351, 3385, 3581, 3590, 3641, 3678, 3706, 3735, 3799, 3867, 3970, 3975, 3984, 4018, 4044, 4056, 4087, 4095, 4106, 4169, 4316, 4367, 4621, 4702, 4716, 4767, 4797, 4898, 4943, 4985, 5040, 5121, 5159, 5181, 5221, 5343, 5496, 5619, 5652, 5666, 5743, 5781, 5809, 5856, 5929, 5949, 5977, 6029, 6047, 6084, 6133, 6144, 6190, 6273, 6576, 6612, 6620, 6621, 6626, 6665, 6768, 6881, 6902, 7015, 7044, 7045, 7125, 7145, 7153, 7176, 7301, 7311, 7420, 7432, 7469, 7587, 7659, 7664, 7719, 7798, 7887, 7937, 7985, 8024, 8187, 8218, 8220, 8300, 8320, 8405, 8416, 8467, 8485, 8556, 8629, 8719, 8746, 8782, 8822, 8841, 8890, 8962, 9053, 9068, 9074, 9120, 9194, 9230, 9253, 9358, 9381, 9491, 9590, 9875, 9892], "external_url": "https://colorpunx.io/colors?i=145&name=#005580", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954330354440208385"}, "#229000": {"id": 146, "name": "#229000", "description": "#229000 is one of 222 colors in the cryptopunx color pallette. It is used by 178 unique punks", "hash": "d4690bc95ba6ba3184f70ce54d5112a4", "image": "https://gateway.pinata.cloud/ipfs/QmdCxrrCprafpfM6GtwUAf1RqKciGpMKBdNKXUTbxMdFwV?filename=colorpunx146.png", "punks": [66, 100, 120, 125, 193, 196, 292, 331, 345, 357, 482, 576, 580, 588, 659, 664, 695, 732, 767, 776, 857, 876, 901, 948, 951, 977, 991, 1043, 1051, 1142, 1199, 1272, 1386, 1554, 1588, 1598, 1645, 1652, 1679, 1885, 1990, 2014, 2068, 2159, 2162, 2275, 2299, 2467, 2525, 2544, 2588, 2682, 2918, 2960, 3008, 3031, 3079, 3087, 3148, 3277, 3311, 3333, 3343, 3351, 3385, 3581, 3590, 3641, 3678, 3706, 3735, 3799, 3867, 3970, 3975, 3984, 4018, 4044, 4056, 4087, 4095, 4106, 4169, 4316, 4367, 4621, 4702, 4716, 4767, 4797, 4898, 4943, 4985, 5040, 5121, 5159, 5181, 5221, 5343, 5496, 5619, 5652, 5666, 5743, 5781, 5809, 5856, 5929, 5949, 5977, 6029, 6047, 6084, 6133, 6144, 6190, 6273, 6576, 6612, 6620, 6621, 6626, 6665, 6768, 6881, 6902, 7015, 7044, 7045, 7125, 7145, 7153, 7176, 7301, 7311, 7420, 7432, 7469, 7587, 7659, 7664, 7719, 7798, 7887, 7937, 7985, 8024, 8187, 8218, 8220, 8300, 8320, 8405, 8416, 8467, 8485, 8556, 8629, 8719, 8746, 8782, 8822, 8841, 8890, 8962, 9053, 9068, 9074, 9120, 9194, 9230, 9253, 9358, 9381, 9491, 9590, 9875, 9892], "external_url": "https://colorpunx.io/colors?i=146&name=#229000", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954331453951836161"}, "#3d2f1e": {"id": 147, "name": "#3d2f1e", "description": "#3d2f1e is one of 222 colors in the cryptopunx color pallette. It is used by 186 unique punks", "hash": "6e342cbc33446665d212d9ed4020a541", "image": "https://gateway.pinata.cloud/ipfs/QmbQwpk3R2KnZ5C5zzWX3Le9YsyrXnTeTujxxAS1Uzuqbp?filename=colorpunx147.png", "punks": [50, 69, 72, 109, 178, 254, 256, 267, 369, 450, 578, 623, 769, 799, 913, 1013, 1030, 1166, 1207, 1228, 1294, 1305, 1327, 1555, 1589, 1640, 1708, 1722, 1802, 1880, 1934, 1991, 2254, 2303, 2327, 2332, 2416, 2444, 2482, 2567, 2590, 2657, 2726, 2827, 2834, 2865, 2985, 2998, 3330, 3368, 3392, 3434, 3463, 3598, 3728, 3832, 3844, 3881, 3904, 3907, 3955, 4022, 4045, 4253, 4328, 4373, 4399, 4437, 4483, 4487, 4497, 4561, 4642, 4665, 4686, 4794, 4807, 4953, 4969, 5065, 5170, 5179, 5204, 5246, 5313, 5320, 5489, 5495, 5659, 5710, 5794, 5859, 5883, 5948, 5984, 5986, 6024, 6174, 6189, 6287, 6351, 6435, 6470, 6482, 6521, 6530, 6542, 6544, 6758, 6786, 6802, 6839, 6853, 6867, 6906, 6955, 6965, 7012, 7036, 7163, 7164, 7206, 7215, 7263, 7293, 7318, 7351, 7368, 7376, 7516, 7543, 7576, 7605, 7634, 7766, 7776, 7787, 7819, 7839, 7886, 7939, 7960, 8012, 8046, 8047, 8059, 8061, 8064, 8074, 8155, 8200, 8223, 8226, 8259, 8303, 8334, 8407, 8413, 8530, 8554, 8675, 8676, 8687, 8844, 8935, 9046, 9093, 9158, 9172, 9189, 9232, 9245, 9282, 9371, 9399, 9415, 9416, 9420, 9538, 9568, 9604, 9724, 9794, 9807, 9935, 9978], "external_url": "https://colorpunx.io/colors?i=147&name=#3d2f1e", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954332553463463937"}, "#26314a": {"id": 148, "name": "#26314a", "description": "#26314a is one of 222 colors in the cryptopunx color pallette. It is used by 203 unique punks", "hash": "3910cd77211af838cdef53c1bbb5f9e3", "image": "https://gateway.pinata.cloud/ipfs/QmXcRkyZyrmFSYoDb6VkYsExDiCBzsKeJWCBNPorJvq37G?filename=colorpunx148.png", "punks": [9, 101, 128, 134, 243, 314, 325, 343, 354, 415, 429, 459, 781, 821, 959, 962, 1167, 1279, 1317, 1330, 1409, 1492, 1501, 1606, 1627, 1631, 1675, 1712, 1732, 1819, 1825, 1887, 1891, 1929, 2009, 2044, 2081, 2089, 2223, 2373, 2401, 2420, 2449, 2501, 2508, 2519, 2614, 2631, 2753, 2766, 2805, 2851, 2854, 2863, 2872, 2925, 2951, 2992, 3097, 3373, 3387, 3469, 3514, 3631, 3685, 3694, 3718, 3727, 3748, 3854, 3889, 3944, 4013, 4020, 4278, 4388, 4492, 4498, 4533, 4590, 4594, 4602, 4646, 4685, 4707, 4708, 4773, 4824, 4876, 4881, 4944, 4945, 5047, 5178, 5182, 5205, 5213, 5275, 5317, 5336, 5440, 5479, 5487, 5488, 5491, 5533, 5538, 5556, 5696, 5715, 5730, 5795, 5806, 5866, 5868, 5885, 5915, 5937, 5939, 6014, 6040, 6062, 6063, 6114, 6128, 6233, 6264, 6315, 6382, 6493, 6599, 6601, 6656, 6669, 6680, 6687, 6805, 6847, 6851, 6928, 7001, 7061, 7075, 7078, 7092, 7096, 7110, 7185, 7199, 7201, 7227, 7236, 7262, 7285, 7546, 7547, 7550, 7572, 7582, 7666, 7679, 7691, 7723, 7738, 7795, 7909, 7956, 8008, 8014, 8042, 8072, 8202, 8361, 8455, 8471, 8486, 8525, 8583, 8664, 8741, 8834, 8864, 8872, 8909, 8910, 8921, 8934, 8969, 9010, 9087, 9166, 9275, 9276, 9294, 9422, 9427, 9449, 9487, 9615, 9618, 9665, 9783, 9906], "external_url": "https://colorpunx.io/colors?i=148&name=#26314a", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954333652975091713"}, "#ffd800": {"id": 149, "name": "#ffd800", "description": "#ffd800 is one of 222 colors in the cryptopunx color pallette. It is used by 203 unique punks", "hash": "aeb2f8b78e5a20ebdcc812e71b490f8f", "image": "https://gateway.pinata.cloud/ipfs/QmUbkJBAtnmHuaXFWJLhc4VJVTUds4PKVi1ejM7qVXGK13?filename=colorpunx149.png", "punks": [9, 101, 128, 134, 243, 314, 325, 343, 354, 415, 429, 459, 781, 821, 959, 962, 1167, 1279, 1317, 1330, 1409, 1492, 1501, 1606, 1627, 1631, 1675, 1712, 1732, 1819, 1825, 1887, 1891, 1929, 2009, 2044, 2081, 2089, 2223, 2373, 2401, 2420, 2449, 2501, 2508, 2519, 2614, 2631, 2753, 2766, 2805, 2851, 2854, 2863, 2872, 2925, 2951, 2992, 3097, 3373, 3387, 3469, 3514, 3631, 3685, 3694, 3718, 3727, 3748, 3854, 3889, 3944, 4013, 4020, 4278, 4388, 4492, 4498, 4533, 4590, 4594, 4602, 4646, 4685, 4707, 4708, 4773, 4824, 4876, 4881, 4944, 4945, 5047, 5178, 5182, 5205, 5213, 5275, 5317, 5336, 5440, 5479, 5487, 5488, 5491, 5533, 5538, 5556, 5696, 5715, 5730, 5795, 5806, 5866, 5868, 5885, 5915, 5937, 5939, 6014, 6040, 6062, 6063, 6114, 6128, 6233, 6264, 6315, 6382, 6493, 6599, 6601, 6656, 6669, 6680, 6687, 6805, 6847, 6851, 6928, 7001, 7061, 7075, 7078, 7092, 7096, 7110, 7185, 7199, 7201, 7227, 7236, 7262, 7285, 7546, 7547, 7550, 7572, 7582, 7666, 7679, 7691, 7723, 7738, 7795, 7909, 7956, 8008, 8014, 8042, 8072, 8202, 8361, 8455, 8471, 8486, 8525, 8583, 8664, 8741, 8834, 8864, 8872, 8909, 8910, 8921, 8934, 8969, 9010, 9087, 9166, 9275, 9276, 9294, 9422, 9427, 9449, 9487, 9615, 9618, 9665, 9783, 9906], "external_url": "https://colorpunx.io/colors?i=149&name=#ffd800", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954334752486719489"}, "#d60000": {"id": 150, "name": "#d60000", "description": "#d60000 is one of 222 colors in the cryptopunx color pallette. It is used by 212 unique punks", "hash": "c1ae7a5f551882cd8cf0d2f24877dc7e", "image": "https://gateway.pinata.cloud/ipfs/QmaZw5xbpiUG3EiMD9uYgCbdSzpYPn7EpAbtaEMLgMhTHU?filename=colorpunx150.png", "punks": [9, 91, 155, 192, 206, 267, 462, 794, 806, 847, 945, 1088, 1102, 1280, 1318, 1382, 1386, 1391, 1650, 1744, 1826, 1997, 2054, 2075, 2336, 2440, 2475, 2611, 2655, 2657, 2766, 2793, 2816, 2874, 2916, 2955, 3191, 3192, 3262, 3276, 3382, 3395, 3471, 3522, 3639, 3692, 3698, 3706, 3801, 3827, 3829, 3832, 3849, 3858, 3871, 3888, 3938, 3961, 3981, 4059, 4060, 4078, 4127, 4154, 4173, 4194, 4255, 4338, 4351, 4390, 4446, 4526, 4593, 4596, 4605, 4616, 4671, 4745, 4748, 4782, 4805, 4838, 4874, 4983, 5052, 5100, 5144, 5149, 5169, 5197, 5235, 5379, 5411, 5625, 5631, 5674, 5720, 5760, 5895, 5943, 5971, 5990, 6034, 6072, 6091, 6148, 6153, 6181, 6271, 6293, 6365, 6408, 6468, 6589, 6712, 6723, 6740, 6795, 6802, 6890, 6892, 6897, 6943, 6963, 6998, 7009, 7011, 7019, 7034, 7057, 7175, 7195, 7211, 7226, 7228, 7287, 7350, 7354, 7396, 7414, 7443, 7507, 7528, 7647, 7730, 7773, 7807, 7829, 7843, 7856, 7873, 7920, 7933, 7961, 7989, 8006, 8012, 8023, 8056, 8081, 8087, 8120, 8153, 8182, 8217, 8248, 8305, 8314, 8323, 8357, 8378, 8431, 8479, 8525, 8584, 8629, 8651, 8675, 8680, 8701, 8749, 8827, 8846, 8904, 8998, 9001, 9077, 9105, 9107, 9125, 9203, 9235, 9244, 9264, 9318, 9396, 9433, 9450, 9467, 9530, 9603, 9633, 9674, 9693, 9698, 9731, 9773, 9812, 9833, 9861, 9918, 9921], "external_url": "https://colorpunx.io/colors?i=150&name=#d60000", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954335851998347265"}, "#353535": {"id": 151, "name": "#353535", "description": "#353535 is one of 222 colors in the cryptopunx color pallette. It is used by 254 unique punks", "hash": "9c51f451ce763f54d4e63355102022e5", "image": "https://gateway.pinata.cloud/ipfs/QmcuP2fXz23q1FZBkTXomq7AssdTNqfTS9gXFnVNmJ3oks?filename=colorpunx151.png", "punks": [129, 135, 156, 206, 252, 258, 259, 265, 273, 312, 372, 387, 393, 395, 408, 462, 610, 704, 720, 768, 787, 856, 878, 892, 969, 1008, 1014, 1031, 1053, 1118, 1131, 1164, 1172, 1211, 1239, 1269, 1288, 1298, 1406, 1549, 1571, 1665, 1719, 1731, 1769, 1798, 1836, 1853, 1983, 2011, 2038, 2061, 2116, 2172, 2175, 2188, 2245, 2263, 2268, 2282, 2289, 2364, 2389, 2412, 2477, 2489, 2537, 2539, 2548, 2561, 2571, 2579, 2592, 2711, 2750, 2758, 2765, 2798, 2840, 2935, 2975, 2980, 3056, 3080, 3120, 3173, 3194, 3229, 3258, 3375, 3439, 3444, 3536, 3561, 3585, 3612, 3652, 3670, 3943, 3979, 4063, 4079, 4096, 4098, 4114, 4115, 4148, 4155, 4210, 4228, 4280, 4289, 4320, 4338, 4400, 4411, 4480, 4507, 4558, 4603, 4620, 4635, 4661, 4678, 4690, 4706, 4796, 4801, 4816, 4828, 4892, 4939, 4975, 4978, 5070, 5128, 5130, 5294, 5423, 5427, 5447, 5484, 5526, 5528, 5561, 5631, 5661, 5664, 5688, 5797, 5816, 5845, 5994, 6042, 6090, 6120, 6214, 6247, 6306, 6374, 6403, 6412, 6479, 6489, 6491, 6611, 6635, 6650, 6677, 6869, 6873, 6951, 6974, 6977, 6983, 7008, 7029, 7088, 7098, 7118, 7135, 7168, 7205, 7233, 7279, 7320, 7324, 7363, 7400, 7404, 7409, 7467, 7468, 7504, 7517, 7558, 7561, 7616, 7644, 7687, 7726, 7742, 7804, 7809, 7815, 7843, 7863, 7998, 8015, 8033, 8225, 8258, 8297, 8302, 8389, 8474, 8489, 8561, 8564, 8590, 8610, 8628, 8633, 8717, 8753, 8754, 8784, 8900, 8991, 9031, 9089, 9121, 9156, 9203, 9249, 9264, 9299, 9300, 9306, 9363, 9478, 9508, 9574, 9578, 9626, 9667, 9681, 9684, 9697, 9709, 9842, 9845, 9879, 9997], "external_url": "https://colorpunx.io/colors?i=151&name=#353535", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954336951509975041"}, "#515151": {"id": 152, "name": "#515151", "description": "#515151 is one of 222 colors in the cryptopunx color pallette. It is used by 254 unique punks", "hash": "c0613940a62445a6b77b6a896b62e14e", "image": "https://gateway.pinata.cloud/ipfs/QmZmsbdRiJFQcvXG96SShTWJGCE8DZQNg4xqjFsc9mjqZD?filename=colorpunx152.png", "punks": [129, 135, 156, 206, 252, 258, 259, 265, 273, 312, 372, 387, 393, 395, 408, 462, 610, 704, 720, 768, 787, 856, 878, 892, 969, 1008, 1014, 1031, 1053, 1118, 1131, 1164, 1172, 1211, 1239, 1269, 1288, 1298, 1406, 1549, 1571, 1665, 1719, 1731, 1769, 1798, 1836, 1853, 1983, 2011, 2038, 2061, 2116, 2172, 2175, 2188, 2245, 2263, 2268, 2282, 2289, 2364, 2389, 2412, 2477, 2489, 2537, 2539, 2548, 2561, 2571, 2579, 2592, 2711, 2750, 2758, 2765, 2798, 2840, 2935, 2975, 2980, 3056, 3080, 3120, 3173, 3194, 3229, 3258, 3375, 3439, 3444, 3536, 3561, 3585, 3612, 3652, 3670, 3943, 3979, 4063, 4079, 4096, 4098, 4114, 4115, 4148, 4155, 4210, 4228, 4280, 4289, 4320, 4338, 4400, 4411, 4480, 4507, 4558, 4603, 4620, 4635, 4661, 4678, 4690, 4706, 4796, 4801, 4816, 4828, 4892, 4939, 4975, 4978, 5070, 5128, 5130, 5294, 5423, 5427, 5447, 5484, 5526, 5528, 5561, 5631, 5661, 5664, 5688, 5797, 5816, 5845, 5994, 6042, 6090, 6120, 6214, 6247, 6306, 6374, 6403, 6412, 6479, 6489, 6491, 6611, 6635, 6650, 6677, 6869, 6873, 6951, 6974, 6977, 6983, 7008, 7029, 7088, 7098, 7118, 7135, 7168, 7205, 7233, 7279, 7320, 7324, 7363, 7400, 7404, 7409, 7467, 7468, 7504, 7517, 7558, 7561, 7616, 7644, 7687, 7726, 7742, 7804, 7809, 7815, 7843, 7863, 7998, 8015, 8033, 8225, 8258, 8297, 8302, 8389, 8474, 8489, 8561, 8564, 8590, 8610, 8628, 8633, 8717, 8753, 8754, 8784, 8900, 8991, 9031, 9089, 9121, 9156, 9203, 9249, 9264, 9299, 9300, 9306, 9363, 9478, 9508, 9574, 9578, 9626, 9667, 9681, 9684, 9697, 9709, 9842, 9845, 9879, 9997], "external_url": "https://colorpunx.io/colors?i=152&name=#515151", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954338051021602817"}, "#c28946": {"id": 153, "name": "#c28946", "description": "#c28946 is one of 222 colors in the cryptopunx color pallette. It is used by 258 unique punks", "hash": "597b4e3e102951d23ef4ebae60e22920", "image": "https://gateway.pinata.cloud/ipfs/QmTEKyRPK5nFNvTsYMWXZ59BBjJuZwpDoqKbiuq2x2wTDk?filename=colorpunx153.png", "punks": [23, 77, 78, 109, 111, 218, 258, 274, 293, 520, 630, 711, 807, 879, 940, 1027, 1056, 1101, 1124, 1168, 1185, 1190, 1223, 1228, 1283, 1303, 1337, 1370, 1404, 1484, 1546, 1565, 1584, 1607, 1614, 1632, 1782, 1833, 1851, 2004, 2036, 2044, 2099, 2113, 2122, 2135, 2136, 2267, 2292, 2335, 2376, 2378, 2433, 2497, 2604, 2607, 2612, 2644, 2653, 2656, 2724, 2763, 2779, 2791, 2825, 2854, 2855, 2865, 2875, 2986, 2996, 3021, 3035, 3063, 3143, 3159, 3189, 3234, 3310, 3378, 3379, 3390, 3446, 3454, 3482, 3507, 3530, 3537, 3540, 3553, 3576, 3591, 3650, 3677, 3683, 3687, 3722, 3832, 3840, 3844, 3852, 3878, 3880, 3888, 3930, 3952, 4022, 4035, 4052, 4102, 4175, 4181, 4226, 4258, 4290, 4402, 4602, 4683, 4759, 4792, 4825, 4906, 4938, 4970, 5033, 5035, 5048, 5126, 5239, 5257, 5289, 5299, 5305, 5311, 5337, 5355, 5363, 5387, 5390, 5399, 5423, 5482, 5542, 5632, 5641, 5686, 5688, 5817, 5891, 5930, 5935, 5970, 5973, 6053, 6114, 6151, 6176, 6192, 6211, 6237, 6254, 6384, 6387, 6477, 6535, 6591, 6597, 6599, 6646, 6683, 6783, 6827, 6828, 6847, 6899, 6935, 7047, 7120, 7161, 7171, 7278, 7302, 7324, 7418, 7551, 7614, 7656, 7685, 7762, 7822, 7835, 7837, 7901, 7921, 7948, 7979, 8008, 8051, 8069, 8106, 8138, 8161, 8182, 8192, 8197, 8204, 8247, 8259, 8292, 8302, 8318, 8379, 8398, 8401, 8466, 8477, 8501, 8517, 8611, 8668, 8714, 8727, 8728, 8762, 8777, 8811, 8877, 8901, 8960, 8963, 8992, 9018, 9062, 9070, 9104, 9138, 9206, 9226, 9239, 9250, 9293, 9297, 9299, 9336, 9364, 9437, 9444, 9501, 9521, 9538, 9580, 9680, 9684, 9795, 9800, 9830, 9873, 9904], "external_url": "https://colorpunx.io/colors?i=153&name=#c28946", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954339150533230593"}, "#68461f": {"id": 154, "name": "#68461f", "description": "#68461f is one of 222 colors in the cryptopunx color pallette. It is used by 260 unique punks", "hash": "ba7f78f14ca0b508ee7985ff5b2fefd5", "image": "https://gateway.pinata.cloud/ipfs/QmcoYxeVonK48eUPu4EgKP3QcpcuUUfqr51RHaQgp2XQjN?filename=colorpunx154.png", "punks": [117, 165, 214, 349, 402, 437, 494, 503, 541, 578, 680, 781, 836, 869, 915, 938, 1048, 1057, 1113, 1143, 1259, 1294, 1298, 1316, 1445, 1515, 1528, 1571, 1606, 1610, 1617, 1638, 1677, 1767, 1830, 1853, 1863, 1890, 1898, 1929, 1943, 1961, 1975, 1987, 2006, 2010, 2028, 2043, 2048, 2050, 2063, 2064, 2096, 2123, 2155, 2178, 2188, 2194, 2211, 2248, 2301, 2362, 2457, 2509, 2586, 2619, 2674, 2683, 2694, 2718, 2868, 2877, 2899, 2906, 2911, 2947, 2979, 2993, 2999, 3027, 3040, 3055, 3120, 3133, 3156, 3173, 3192, 3195, 3285, 3322, 3404, 3473, 3518, 3622, 3636, 3695, 3699, 3736, 3776, 3839, 3843, 3847, 3871, 3927, 3935, 3956, 3990, 3993, 4001, 4038, 4096, 4104, 4157, 4160, 4371, 4378, 4390, 4394, 4399, 4647, 4660, 4808, 4836, 4897, 4916, 4917, 4923, 4956, 4960, 5004, 5020, 5023, 5039, 5062, 5063, 5065, 5098, 5101, 5204, 5252, 5278, 5362, 5380, 5439, 5450, 5463, 5510, 5547, 5548, 5549, 5589, 5596, 5603, 5674, 5687, 5754, 5774, 5812, 5830, 5880, 5960, 6016, 6031, 6054, 6167, 6188, 6193, 6301, 6380, 6445, 6449, 6457, 6505, 6517, 6544, 6607, 6649, 6654, 6689, 6772, 6819, 6853, 6908, 6940, 6989, 7028, 7029, 7089, 7091, 7113, 7226, 7227, 7318, 7330, 7351, 7368, 7372, 7449, 7516, 7531, 7540, 7704, 7717, 7780, 7838, 7909, 7950, 7991, 8061, 8093, 8103, 8118, 8132, 8151, 8158, 8359, 8553, 8559, 8616, 8655, 8720, 8753, 8761, 8798, 8853, 8921, 8938, 8984, 8985, 9048, 9059, 9065, 9090, 9146, 9162, 9174, 9176, 9197, 9281, 9302, 9305, 9323, 9346, 9350, 9390, 9432, 9449, 9475, 9564, 9600, 9604, 9618, 9711, 9764, 9771, 9776, 9780, 9838, 9886, 9922], "external_url": "https://colorpunx.io/colors?i=154&name=#68461f", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954340250044858369"}, "#0040ff": {"id": 155, "name": "#0040ff", "description": "#0040ff is one of 222 colors in the cryptopunx color pallette. It is used by 272 unique punks", "hash": "5684fa21320c33fac3f53c012a5748b0", "image": "https://gateway.pinata.cloud/ipfs/QmYoVC1AiD9YnnwXTzoJcZfJxPCh1e2YypD1H8HHMBHwXf?filename=colorpunx155.png", "punks": [83, 128, 256, 306, 310, 418, 463, 652, 682, 726, 804, 872, 904, 918, 925, 994, 1041, 1129, 1165, 1176, 1185, 1233, 1310, 1358, 1370, 1534, 1554, 1680, 1726, 1797, 1878, 1923, 1949, 2018, 2080, 2142, 2349, 2421, 2430, 2434, 2441, 2480, 2495, 2497, 2506, 2602, 2617, 2701, 2729, 2731, 2735, 2748, 2812, 2814, 2843, 2876, 2884, 2918, 2953, 2968, 3043, 3074, 3096, 3146, 3199, 3221, 3255, 3319, 3325, 3351, 3408, 3463, 3495, 3542, 3622, 3668, 3694, 3709, 3710, 3712, 3738, 3740, 3749, 3754, 3765, 3779, 3781, 3792, 3798, 3803, 3805, 3808, 3869, 3901, 3915, 3933, 4019, 4035, 4037, 4119, 4137, 4209, 4221, 4375, 4398, 4464, 4532, 4552, 4607, 4634, 4687, 4743, 4769, 4775, 4853, 4894, 4920, 4964, 5015, 5053, 5112, 5163, 5183, 5191, 5208, 5251, 5257, 5267, 5308, 5332, 5383, 5456, 5486, 5545, 5551, 5563, 5571, 5604, 5665, 5693, 5717, 5721, 5739, 5757, 5773, 5788, 5817, 5823, 5834, 5938, 5942, 6010, 6033, 6124, 6143, 6216, 6286, 6349, 6484, 6604, 6611, 6628, 6645, 6694, 6817, 6833, 6873, 6919, 6944, 6995, 7001, 7007, 7015, 7043, 7050, 7065, 7085, 7091, 7144, 7163, 7170, 7173, 7224, 7267, 7348, 7364, 7370, 7403, 7414, 7437, 7490, 7522, 7574, 7582, 7602, 7618, 7620, 7626, 7661, 7701, 7713, 7720, 7776, 7789, 7851, 7862, 7880, 7887, 7953, 7970, 8026, 8030, 8154, 8165, 8179, 8197, 8201, 8207, 8220, 8238, 8330, 8338, 8404, 8412, 8485, 8502, 8516, 8566, 8726, 8737, 8757, 8762, 8763, 8798, 8804, 8855, 8889, 8931, 8943, 8949, 8956, 8967, 9053, 9076, 9086, 9097, 9175, 9199, 9207, 9208, 9224, 9229, 9252, 9262, 9346, 9385, 9396, 9413, 9424, 9489, 9504, 9533, 9613, 9712, 9714, 9720, 9814, 9880, 9889, 9893, 9898, 9917], "external_url": "https://colorpunx.io/colors?i=155&name=#0040ff", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954341349556486145"}, "#595959": {"id": 156, "name": "#595959", "description": "#595959 is one of 222 colors in the cryptopunx color pallette. It is used by 272 unique punks", "hash": "ed46e34b561a73b30f6d307d3597bccc", "image": "https://gateway.pinata.cloud/ipfs/QmQy4jNsiEgiQPoyS7XWEpvyVZo9mRKerGuuX1SFE6W232?filename=colorpunx156.png", "punks": [83, 128, 256, 306, 310, 418, 463, 652, 682, 726, 804, 872, 904, 918, 925, 994, 1041, 1129, 1165, 1176, 1185, 1233, 1310, 1358, 1370, 1534, 1554, 1680, 1726, 1797, 1878, 1923, 1949, 2018, 2080, 2142, 2349, 2421, 2430, 2434, 2441, 2480, 2495, 2497, 2506, 2602, 2617, 2701, 2729, 2731, 2735, 2748, 2812, 2814, 2843, 2876, 2884, 2918, 2953, 2968, 3043, 3074, 3096, 3146, 3199, 3221, 3255, 3319, 3325, 3351, 3408, 3463, 3495, 3542, 3622, 3668, 3694, 3709, 3710, 3712, 3738, 3740, 3749, 3754, 3765, 3779, 3781, 3792, 3798, 3803, 3805, 3808, 3869, 3901, 3915, 3933, 4019, 4035, 4037, 4119, 4137, 4209, 4221, 4375, 4398, 4464, 4532, 4552, 4607, 4634, 4687, 4743, 4769, 4775, 4853, 4894, 4920, 4964, 5015, 5053, 5112, 5163, 5183, 5191, 5208, 5251, 5257, 5267, 5308, 5332, 5383, 5456, 5486, 5545, 5551, 5563, 5571, 5604, 5665, 5693, 5717, 5721, 5739, 5757, 5773, 5788, 5817, 5823, 5834, 5938, 5942, 6010, 6033, 6124, 6143, 6216, 6286, 6349, 6484, 6604, 6611, 6628, 6645, 6694, 6817, 6833, 6873, 6919, 6944, 6995, 7001, 7007, 7015, 7043, 7050, 7065, 7085, 7091, 7144, 7163, 7170, 7173, 7224, 7267, 7348, 7364, 7370, 7403, 7414, 7437, 7490, 7522, 7574, 7582, 7602, 7618, 7620, 7626, 7661, 7701, 7713, 7720, 7776, 7789, 7851, 7862, 7880, 7887, 7953, 7970, 8026, 8030, 8154, 8165, 8179, 8197, 8201, 8207, 8220, 8238, 8330, 8338, 8404, 8412, 8485, 8502, 8516, 8566, 8726, 8737, 8757, 8762, 8763, 8798, 8804, 8855, 8889, 8931, 8943, 8949, 8956, 8967, 9053, 9076, 9086, 9097, 9175, 9199, 9207, 9208, 9224, 9229, 9252, 9262, 9346, 9385, 9396, 9413, 9424, 9489, 9504, 9533, 9613, 9712, 9714, 9720, 9814, 9880, 9889, 9893, 9898, 9917], "external_url": "https://colorpunx.io/colors?i=156&name=#595959", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954342449068113921"}, "#692f08": {"id": 157, "name": "#692f08", "description": "#692f08 is one of 222 colors in the cryptopunx color pallette. It is used by 281 unique punks", "hash": "ae1b7d68e58370d3b10a3e18cfe7b436", "image": "https://gateway.pinata.cloud/ipfs/QmNRVXdXiNxmqNrHMYfjZgxRKGeVBG8PMyuJWgBkjzzTWp?filename=colorpunx157.png", "punks": [8, 15, 102, 144, 149, 177, 198, 230, 246, 269, 358, 369, 455, 609, 665, 770, 877, 924, 932, 950, 964, 979, 1001, 1008, 1009, 1014, 1095, 1105, 1106, 1108, 1213, 1252, 1319, 1376, 1395, 1431, 1459, 1542, 1646, 1667, 1718, 1729, 1843, 1846, 1889, 1941, 1993, 2097, 2098, 2220, 2246, 2290, 2294, 2295, 2344, 2350, 2355, 2406, 2410, 2438, 2464, 2465, 2470, 2473, 2534, 2614, 2662, 2726, 2737, 2747, 2770, 2820, 2886, 2887, 3020, 3036, 3062, 3090, 3122, 3177, 3282, 3335, 3337, 3369, 3461, 3613, 3657, 3700, 3713, 3729, 3731, 3737, 3746, 3833, 3892, 3902, 3903, 4031, 4034, 4148, 4158, 4356, 4395, 4415, 4436, 4513, 4531, 4543, 4553, 4577, 4582, 4697, 4714, 4783, 4800, 4827, 4837, 4883, 4891, 4953, 4988, 5056, 5092, 5147, 5197, 5224, 5294, 5312, 5335, 5359, 5367, 5369, 5377, 5415, 5417, 5420, 5430, 5440, 5573, 5617, 5710, 5738, 5763, 5767, 5780, 5907, 5946, 5948, 6013, 6026, 6123, 6129, 6180, 6196, 6268, 6269, 6382, 6404, 6406, 6428, 6446, 6467, 6474, 6538, 6582, 6594, 6600, 6680, 6693, 6694, 6740, 6838, 6934, 6962, 7007, 7034, 7050, 7092, 7098, 7158, 7239, 7280, 7312, 7331, 7379, 7384, 7436, 7444, 7453, 7496, 7525, 7536, 7547, 7595, 7602, 7618, 7621, 7653, 7665, 7686, 7690, 7692, 7722, 7748, 7797, 7845, 7865, 7881, 7884, 7996, 8025, 8047, 8056, 8098, 8104, 8129, 8145, 8152, 8170, 8179, 8214, 8222, 8257, 8295, 8317, 8324, 8353, 8377, 8521, 8588, 8606, 8664, 8673, 8698, 8710, 8768, 8785, 8825, 8839, 8844, 8860, 8866, 8870, 8889, 8909, 8957, 8965, 8971, 8993, 9049, 9116, 9122, 9133, 9137, 9140, 9180, 9184, 9209, 9212, 9274, 9337, 9340, 9355, 9360, 9361, 9425, 9427, 9478, 9528, 9611, 9634, 9723, 9738, 9777, 9802, 9819, 9865, 9891, 9893, 9953, 9962], "external_url": "https://colorpunx.io/colors?i=157&name=#692f08", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954343548579741697"}, "#328dfd": {"id": 158, "name": "#328dfd", "description": "#328dfd is one of 222 colors in the cryptopunx color pallette. It is used by 286 unique punks", "hash": "0742d3f6765c307d2cc76a689027e366", "image": "https://gateway.pinata.cloud/ipfs/QmVifrSZQZw5u5cQFWKuER221AGm3bXrHKfcLx9VFcx5HC?filename=colorpunx158.png", "punks": [67, 141, 172, 208, 260, 340, 457, 465, 485, 516, 549, 553, 561, 608, 689, 784, 814, 819, 822, 895, 924, 948, 1123, 1147, 1188, 1240, 1326, 1348, 1361, 1439, 1450, 1460, 1483, 1488, 1510, 1528, 1574, 1579, 1587, 1623, 1626, 1637, 1682, 1703, 1727, 1732, 1745, 1768, 1957, 2027, 2030, 2042, 2082, 2110, 2189, 2213, 2254, 2274, 2383, 2418, 2437, 2439, 2494, 2572, 2620, 2781, 2794, 2820, 2869, 2895, 2922, 3007, 3027, 3136, 3167, 3178, 3180, 3209, 3232, 3253, 3265, 3313, 3441, 3468, 3507, 3516, 3677, 3698, 3738, 3760, 3784, 3876, 3918, 3925, 3936, 3944, 3988, 4181, 4218, 4283, 4294, 4379, 4400, 4408, 4437, 4441, 4576, 4659, 4746, 4822, 4868, 4989, 5003, 5051, 5093, 5116, 5136, 5240, 5245, 5282, 5328, 5355, 5361, 5471, 5487, 5504, 5533, 5534, 5545, 5569, 5573, 5588, 5608, 5617, 5627, 5681, 5690, 5699, 5709, 5740, 5750, 5772, 5783, 5784, 5818, 5824, 5874, 5963, 6002, 6042, 6043, 6046, 6054, 6061, 6062, 6075, 6080, 6151, 6159, 6227, 6232, 6237, 6240, 6251, 6264, 6316, 6317, 6320, 6407, 6414, 6513, 6537, 6566, 6582, 6625, 6633, 6634, 6711, 6756, 6947, 6955, 6957, 6960, 6978, 6994, 7022, 7023, 7060, 7086, 7139, 7167, 7168, 7173, 7189, 7209, 7211, 7219, 7247, 7248, 7259, 7262, 7273, 7311, 7357, 7369, 7372, 7414, 7418, 7423, 7479, 7488, 7516, 7548, 7584, 7596, 7603, 7613, 7685, 7695, 7722, 7726, 7732, 7846, 7867, 7901, 7933, 7994, 8006, 8033, 8070, 8125, 8160, 8191, 8207, 8221, 8222, 8225, 8284, 8286, 8305, 8311, 8365, 8368, 8401, 8471, 8473, 8545, 8550, 8576, 8692, 8773, 8822, 8838, 8845, 8857, 8868, 8899, 9115, 9137, 9169, 9198, 9219, 9256, 9267, 9280, 9394, 9438, 9454, 9495, 9574, 9578, 9583, 9586, 9605, 9639, 9650, 9652, 9684, 9723, 9725, 9734, 9790, 9816, 9888, 9908, 9932], "external_url": "https://colorpunx.io/colors?i=158&name=#328dfd", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954344648091369473"}, "#f0f0f0": {"id": 159, "name": "#f0f0f0", "description": "#f0f0f0 is one of 222 colors in the cryptopunx color pallette. It is used by 286 unique punks", "hash": "1d84a6d21d8b6a3f9a6ba9f6ba471c7b", "image": "https://gateway.pinata.cloud/ipfs/QmPDYshTp6H6SQkWx2QUy3KVuRrmtFqhMRBeLBi5wugZDu?filename=colorpunx159.png", "punks": [67, 141, 172, 208, 260, 340, 457, 465, 485, 516, 549, 553, 561, 608, 689, 784, 814, 819, 822, 895, 924, 948, 1123, 1147, 1188, 1240, 1326, 1348, 1361, 1439, 1450, 1460, 1483, 1488, 1510, 1528, 1574, 1579, 1587, 1623, 1626, 1637, 1682, 1703, 1727, 1732, 1745, 1768, 1957, 2027, 2030, 2042, 2082, 2110, 2189, 2213, 2254, 2274, 2383, 2418, 2437, 2439, 2494, 2572, 2620, 2781, 2794, 2820, 2869, 2895, 2922, 3007, 3027, 3136, 3167, 3178, 3180, 3209, 3232, 3253, 3265, 3313, 3441, 3468, 3507, 3516, 3677, 3698, 3738, 3760, 3784, 3876, 3918, 3925, 3936, 3944, 3988, 4181, 4218, 4283, 4294, 4379, 4400, 4408, 4437, 4441, 4576, 4659, 4746, 4822, 4868, 4989, 5003, 5051, 5093, 5116, 5136, 5240, 5245, 5282, 5328, 5355, 5361, 5471, 5487, 5504, 5533, 5534, 5545, 5569, 5573, 5588, 5608, 5617, 5627, 5681, 5690, 5699, 5709, 5740, 5750, 5772, 5783, 5784, 5818, 5824, 5874, 5963, 6002, 6042, 6043, 6046, 6054, 6061, 6062, 6075, 6080, 6151, 6159, 6227, 6232, 6237, 6240, 6251, 6264, 6316, 6317, 6320, 6407, 6414, 6513, 6537, 6566, 6582, 6625, 6633, 6634, 6711, 6756, 6947, 6955, 6957, 6960, 6978, 6994, 7022, 7023, 7060, 7086, 7139, 7167, 7168, 7173, 7189, 7209, 7211, 7219, 7247, 7248, 7259, 7262, 7273, 7311, 7357, 7369, 7372, 7414, 7418, 7423, 7479, 7488, 7516, 7548, 7584, 7596, 7603, 7613, 7685, 7695, 7722, 7726, 7732, 7846, 7867, 7901, 7933, 7994, 8006, 8033, 8070, 8125, 8160, 8191, 8207, 8221, 8222, 8225, 8284, 8286, 8305, 8311, 8365, 8368, 8401, 8471, 8473, 8545, 8550, 8576, 8692, 8773, 8822, 8838, 8845, 8857, 8868, 8899, 9115, 9137, 9169, 9198, 9219, 9256, 9267, 9280, 9394, 9438, 9454, 9495, 9574, 9578, 9583, 9586, 9605, 9639, 9650, 9652, 9684, 9723, 9725, 9734, 9790, 9816, 9888, 9908, 9932], "external_url": "https://colorpunx.io/colors?i=159&name=#f0f0f0", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954345747602997249"}, "#fd3232": {"id": 160, "name": "#fd3232", "description": "#fd3232 is one of 222 colors in the cryptopunx color pallette. It is used by 286 unique punks", "hash": "5e79285d0759bb699ba36f85075fd786", "image": "https://gateway.pinata.cloud/ipfs/QmW3aVceDsjnN8revwQZWgBKjPuLv4NdmTcthZeCLjTg1v?filename=colorpunx160.png", "punks": [67, 141, 172, 208, 260, 340, 457, 465, 485, 516, 549, 553, 561, 608, 689, 784, 814, 819, 822, 895, 924, 948, 1123, 1147, 1188, 1240, 1326, 1348, 1361, 1439, 1450, 1460, 1483, 1488, 1510, 1528, 1574, 1579, 1587, 1623, 1626, 1637, 1682, 1703, 1727, 1732, 1745, 1768, 1957, 2027, 2030, 2042, 2082, 2110, 2189, 2213, 2254, 2274, 2383, 2418, 2437, 2439, 2494, 2572, 2620, 2781, 2794, 2820, 2869, 2895, 2922, 3007, 3027, 3136, 3167, 3178, 3180, 3209, 3232, 3253, 3265, 3313, 3441, 3468, 3507, 3516, 3677, 3698, 3738, 3760, 3784, 3876, 3918, 3925, 3936, 3944, 3988, 4181, 4218, 4283, 4294, 4379, 4400, 4408, 4437, 4441, 4576, 4659, 4746, 4822, 4868, 4989, 5003, 5051, 5093, 5116, 5136, 5240, 5245, 5282, 5328, 5355, 5361, 5471, 5487, 5504, 5533, 5534, 5545, 5569, 5573, 5588, 5608, 5617, 5627, 5681, 5690, 5699, 5709, 5740, 5750, 5772, 5783, 5784, 5818, 5824, 5874, 5963, 6002, 6042, 6043, 6046, 6054, 6061, 6062, 6075, 6080, 6151, 6159, 6227, 6232, 6237, 6240, 6251, 6264, 6316, 6317, 6320, 6407, 6414, 6513, 6537, 6566, 6582, 6625, 6633, 6634, 6711, 6756, 6947, 6955, 6957, 6960, 6978, 6994, 7022, 7023, 7060, 7086, 7139, 7167, 7168, 7173, 7189, 7209, 7211, 7219, 7247, 7248, 7259, 7262, 7273, 7311, 7357, 7369, 7372, 7414, 7418, 7423, 7479, 7488, 7516, 7548, 7584, 7596, 7603, 7613, 7685, 7695, 7722, 7726, 7732, 7846, 7867, 7901, 7933, 7994, 8006, 8033, 8070, 8125, 8160, 8191, 8207, 8221, 8222, 8225, 8284, 8286, 8305, 8311, 8365, 8368, 8401, 8471, 8473, 8545, 8550, 8576, 8692, 8773, 8822, 8838, 8845, 8857, 8868, 8899, 9115, 9137, 9169, 9198, 9219, 9256, 9267, 9280, 9394, 9438, 9454, 9495, 9574, 9578, 9583, 9586, 9605, 9639, 9650, 9652, 9684, 9723, 9725, 9734, 9790, 9816, 9888, 9908, 9932], "external_url": "https://colorpunx.io/colors?i=160&name=#fd3232", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954346847114625025"}, "#d7d7d7": {"id": 161, "name": "#d7d7d7", "description": "#d7d7d7 is one of 222 colors in the cryptopunx color pallette. It is used by 293 unique punks", "hash": "88f5fc54f6ade20fb1e79c44f856aa4b", "image": "https://gateway.pinata.cloud/ipfs/QmX4rokzh3CorTUEHYpsnrX8skxPZtHtaas7ECAA7XvmD7?filename=colorpunx161.png", "punks": [18, 65, 153, 259, 314, 362, 366, 391, 434, 562, 692, 731, 942, 958, 962, 963, 1027, 1060, 1072, 1078, 1104, 1231, 1265, 1283, 1314, 1320, 1356, 1400, 1431, 1441, 1442, 1472, 1502, 1543, 1567, 1647, 1711, 1750, 1820, 1851, 1857, 1894, 2055, 2117, 2131, 2145, 2214, 2235, 2269, 2271, 2316, 2320, 2327, 2334, 2351, 2380, 2399, 2410, 2524, 2553, 2577, 2627, 2720, 2721, 2753, 2843, 2856, 2864, 2873, 2908, 2948, 2968, 3017, 3073, 3075, 3079, 3121, 3156, 3161, 3212, 3223, 3353, 3401, 3409, 3416, 3460, 3565, 3570, 3663, 3723, 3754, 3839, 3869, 3881, 3939, 3980, 3987, 4022, 4180, 4289, 4292, 4324, 4329, 4401, 4412, 4414, 4464, 4529, 4610, 4661, 4680, 4702, 4706, 4716, 4728, 4734, 4745, 4779, 4826, 4915, 4934, 4977, 4986, 4988, 5064, 5111, 5148, 5201, 5277, 5320, 5349, 5351, 5388, 5392, 5416, 5428, 5503, 5510, 5544, 5554, 5583, 5696, 5878, 5911, 5923, 5936, 5979, 6009, 6021, 6166, 6179, 6209, 6214, 6255, 6318, 6346, 6362, 6376, 6378, 6425, 6430, 6452, 6477, 6483, 6533, 6620, 6644, 6656, 6665, 6743, 6745, 6748, 6751, 6813, 6822, 6837, 6874, 6903, 6904, 6907, 6956, 7053, 7064, 7067, 7109, 7127, 7180, 7188, 7230, 7239, 7243, 7284, 7289, 7347, 7358, 7370, 7375, 7460, 7462, 7498, 7500, 7544, 7554, 7565, 7581, 7587, 7615, 7616, 7668, 7706, 7721, 7740, 7760, 7833, 7865, 7949, 7960, 7974, 8017, 8025, 8041, 8061, 8062, 8068, 8113, 8114, 8129, 8156, 8171, 8200, 8220, 8231, 8239, 8274, 8379, 8402, 8434, 8442, 8453, 8458, 8480, 8488, 8527, 8528, 8557, 8664, 8734, 8742, 8820, 8848, 8856, 8859, 8883, 8888, 8947, 8955, 8972, 8985, 8995, 9020, 9074, 9094, 9122, 9200, 9214, 9247, 9261, 9313, 9353, 9361, 9369, 9420, 9482, 9507, 9548, 9555, 9561, 9642, 9646, 9690, 9697, 9711, 9718, 9737, 9768, 9785, 9791, 9875, 9898, 9905, 9906, 9911, 9915], "external_url": "https://colorpunx.io/colors?i=161&name=#d7d7d7", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954347946626252801"}, "#4c4c4c": {"id": 162, "name": "#4c4c4c", "description": "#4c4c4c is one of 222 colors in the cryptopunx color pallette. It is used by 300 unique punks", "hash": "477e030ff2e89e4f0b68c6fdfc0da0ea", "image": "https://gateway.pinata.cloud/ipfs/QmR7dKNfnhMcTYmrtAwH1JpKADC1LsJX9snBMCUTg8sMEx?filename=colorpunx162.png", "punks": [6, 23, 68, 76, 139, 222, 266, 299, 365, 386, 389, 444, 451, 489, 552, 572, 583, 587, 609, 649, 651, 678, 702, 716, 718, 774, 852, 881, 895, 936, 967, 1119, 1238, 1256, 1257, 1312, 1397, 1404, 1430, 1432, 1464, 1543, 1574, 1617, 1636, 1638, 1703, 1745, 1778, 1805, 1916, 1975, 2049, 2050, 2096, 2097, 2102, 2108, 2153, 2224, 2269, 2287, 2314, 2345, 2374, 2379, 2404, 2492, 2498, 2504, 2513, 2542, 2556, 2557, 2636, 2653, 2695, 2732, 2762, 2767, 2788, 2810, 2898, 2902, 2993, 2996, 3003, 3020, 3033, 3053, 3067, 3075, 3127, 3142, 3145, 3154, 3168, 3226, 3228, 3245, 3249, 3274, 3353, 3415, 3423, 3440, 3461, 3507, 3521, 3566, 3596, 3609, 3624, 3643, 3667, 3671, 3759, 3760, 3762, 3783, 3797, 3817, 3825, 3880, 3925, 3926, 3960, 4003, 4125, 4154, 4162, 4178, 4197, 4217, 4238, 4261, 4287, 4296, 4303, 4317, 4325, 4360, 4384, 4450, 4451, 4462, 4464, 4466, 4475, 4511, 4614, 4618, 4670, 4679, 4684, 4688, 4694, 4728, 4737, 4749, 4774, 4841, 4845, 4863, 4883, 4897, 4906, 4932, 5016, 5039, 5241, 5245, 5259, 5283, 5300, 5314, 5335, 5342, 5399, 5458, 5460, 5498, 5504, 5568, 5575, 5603, 5625, 5754, 5803, 5846, 5864, 5887, 5905, 5965, 6033, 6060, 6124, 6129, 6146, 6147, 6198, 6251, 6327, 6334, 6380, 6447, 6502, 6508, 6514, 6548, 6555, 6600, 6655, 6726, 6743, 6755, 6818, 6826, 6829, 6841, 6849, 6883, 6925, 6930, 7050, 7084, 7100, 7143, 7157, 7189, 7220, 7221, 7242, 7277, 7377, 7424, 7430, 7449, 7505, 7647, 7660, 7668, 7756, 7789, 7933, 7968, 8011, 8031, 8079, 8081, 8118, 8123, 8129, 8158, 8161, 8214, 8234, 8281, 8306, 8377, 8501, 8573, 8627, 8649, 8703, 8714, 8751, 8819, 8845, 8892, 8919, 8925, 8929, 8931, 8951, 8985, 9017, 9116, 9119, 9135, 9263, 9272, 9421, 9505, 9548, 9556, 9557, 9567, 9639, 9657, 9723, 9769, 9802, 9894, 9897, 9900, 9922, 9948, 9950, 9973], "external_url": "https://colorpunx.io/colors?i=162&name=#4c4c4c", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954349046137880577"}, "#636363": {"id": 163, "name": "#636363", "description": "#636363 is one of 222 colors in the cryptopunx color pallette. It is used by 300 unique punks", "hash": "cf79d92870faeba4d62dc827ac8f845f", "image": "https://gateway.pinata.cloud/ipfs/QmSf8nRoGH8QJ9ihAP2ecZYLsWj1qJeVZBKNe1niC6J516?filename=colorpunx163.png", "punks": [6, 23, 68, 76, 139, 222, 266, 299, 365, 386, 389, 444, 451, 489, 552, 572, 583, 587, 609, 649, 651, 678, 702, 716, 718, 774, 852, 881, 895, 936, 967, 1119, 1238, 1256, 1257, 1312, 1397, 1404, 1430, 1432, 1464, 1543, 1574, 1617, 1636, 1638, 1703, 1745, 1778, 1805, 1916, 1975, 2049, 2050, 2096, 2097, 2102, 2108, 2153, 2224, 2269, 2287, 2314, 2345, 2374, 2379, 2404, 2492, 2498, 2504, 2513, 2542, 2556, 2557, 2636, 2653, 2695, 2732, 2762, 2767, 2788, 2810, 2898, 2902, 2993, 2996, 3003, 3020, 3033, 3053, 3067, 3075, 3127, 3142, 3145, 3154, 3168, 3226, 3228, 3245, 3249, 3274, 3353, 3415, 3423, 3440, 3461, 3507, 3521, 3566, 3596, 3609, 3624, 3643, 3667, 3671, 3759, 3760, 3762, 3783, 3797, 3817, 3825, 3880, 3925, 3926, 3960, 4003, 4125, 4154, 4162, 4178, 4197, 4217, 4238, 4261, 4287, 4296, 4303, 4317, 4325, 4360, 4384, 4450, 4451, 4462, 4464, 4466, 4475, 4511, 4614, 4618, 4670, 4679, 4684, 4688, 4694, 4728, 4737, 4749, 4774, 4841, 4845, 4863, 4883, 4897, 4906, 4932, 5016, 5039, 5241, 5245, 5259, 5283, 5300, 5314, 5335, 5342, 5399, 5458, 5460, 5498, 5504, 5568, 5575, 5603, 5625, 5754, 5803, 5846, 5864, 5887, 5905, 5965, 6033, 6060, 6124, 6129, 6146, 6147, 6198, 6251, 6327, 6334, 6380, 6447, 6502, 6508, 6514, 6548, 6555, 6600, 6655, 6726, 6743, 6755, 6818, 6826, 6829, 6841, 6849, 6883, 6925, 6930, 7050, 7084, 7100, 7143, 7157, 7189, 7220, 7221, 7242, 7277, 7377, 7424, 7430, 7449, 7505, 7647, 7660, 7668, 7756, 7789, 7933, 7968, 8011, 8031, 8079, 8081, 8118, 8123, 8129, 8158, 8161, 8214, 8234, 8281, 8306, 8377, 8501, 8573, 8627, 8649, 8703, 8714, 8751, 8819, 8845, 8892, 8919, 8925, 8929, 8931, 8951, 8985, 9017, 9116, 9119, 9135, 9263, 9272, 9421, 9505, 9548, 9556, 9557, 9567, 9639, 9657, 9723, 9769, 9802, 9894, 9897, 9900, 9922, 9948, 9950, 9973], "external_url": "https://colorpunx.io/colors?i=163&name=#636363", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954350145649508353"}, "#683c08": {"id": 164, "name": "#683c08", "description": "#683c08 is one of 222 colors in the cryptopunx color pallette. It is used by 317 unique punks", "hash": "4f569b56d7bbb33a44f445982ee9c342", "image": "https://gateway.pinata.cloud/ipfs/QmXb2a73qNocP3XX1dnhDjQw9zPCxQ6MsbhUBujXnWpgpL?filename=colorpunx164.png", "punks": [3, 14, 133, 173, 207, 222, 231, 387, 445, 465, 476, 517, 563, 640, 649, 677, 686, 819, 908, 959, 999, 1174, 1178, 1250, 1271, 1288, 1293, 1422, 1448, 1476, 1529, 1541, 1566, 1580, 1710, 1811, 1939, 1996, 2049, 2054, 2096, 2111, 2133, 2198, 2283, 2375, 2385, 2478, 2490, 2639, 2657, 2673, 2692, 2721, 2745, 2747, 2856, 2878, 2882, 2966, 3011, 3075, 3098, 3204, 3212, 3216, 3236, 3248, 3302, 3363, 3389, 3392, 3422, 3480, 3483, 3503, 3524, 3534, 3540, 3543, 3603, 3618, 3726, 3747, 3894, 3953, 3999, 4018, 4027, 4082, 4126, 4141, 4145, 4191, 4263, 4337, 4367, 4415, 4440, 4461, 4463, 4473, 4492, 4525, 4590, 4595, 4655, 4679, 4692, 4719, 4741, 4757, 4765, 4816, 4922, 4928, 4981, 5002, 5013, 5079, 5096, 5125, 5130, 5135, 5156, 5186, 5195, 5201, 5263, 5287, 5313, 5370, 5373, 5421, 5455, 5473, 5493, 5508, 5527, 5564, 5568, 5587, 5622, 5647, 5651, 5727, 5934, 6020, 6031, 6034, 6054, 6086, 6141, 6160, 6170, 6183, 6184, 6202, 6209, 6217, 6225, 6235, 6245, 6248, 6252, 6260, 6261, 6288, 6305, 6310, 6312, 6369, 6375, 6376, 6386, 6400, 6439, 6462, 6660, 6715, 6729, 6741, 6774, 6780, 6800, 6826, 6834, 6841, 6858, 6871, 6893, 6929, 6943, 6955, 7010, 7061, 7088, 7106, 7135, 7150, 7171, 7244, 7257, 7284, 7299, 7361, 7381, 7405, 7426, 7455, 7483, 7532, 7606, 7636, 7659, 7674, 7748, 7769, 7771, 7782, 7798, 7804, 7813, 7814, 7817, 7836, 7849, 7881, 7896, 7902, 7919, 7921, 7943, 7945, 7954, 7956, 7959, 7985, 7986, 7995, 8005, 8024, 8028, 8042, 8076, 8175, 8184, 8239, 8246, 8251, 8270, 8294, 8315, 8329, 8340, 8398, 8458, 8462, 8493, 8557, 8582, 8599, 8617, 8634, 8657, 8658, 8674, 8690, 8721, 8764, 8766, 8775, 8790, 8831, 8853, 8864, 8904, 8933, 8990, 9015, 9028, 9043, 9051, 9068, 9120, 9202, 9206, 9225, 9230, 9272, 9276, 9286, 9288, 9290, 9295, 9366, 9400, 9433, 9473, 9483, 9492, 9512, 9544, 9577, 9616, 9631, 9637, 9659, 9684, 9746, 9780, 9820, 9836, 9912, 9959, 9970, 9976], "external_url": "https://colorpunx.io/colors?i=164&name=#683c08", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954351245161136129"}, "#855114": {"id": 165, "name": "#855114", "description": "#855114 is one of 222 colors in the cryptopunx color pallette. It is used by 317 unique punks", "hash": "2c19b79fcf0cd6738b75f7e871ba1cf8", "image": "https://gateway.pinata.cloud/ipfs/QmXdHzvjYNaZMXJPfQTeX4MJaihB7uj5cXyqxSTKrnw8jL?filename=colorpunx165.png", "punks": [3, 14, 133, 173, 207, 222, 231, 387, 445, 465, 476, 517, 563, 640, 649, 677, 686, 819, 908, 959, 999, 1174, 1178, 1250, 1271, 1288, 1293, 1422, 1448, 1476, 1529, 1541, 1566, 1580, 1710, 1811, 1939, 1996, 2049, 2054, 2096, 2111, 2133, 2198, 2283, 2375, 2385, 2478, 2490, 2639, 2657, 2673, 2692, 2721, 2745, 2747, 2856, 2878, 2882, 2966, 3011, 3075, 3098, 3204, 3212, 3216, 3236, 3248, 3302, 3363, 3389, 3392, 3422, 3480, 3483, 3503, 3524, 3534, 3540, 3543, 3603, 3618, 3726, 3747, 3894, 3953, 3999, 4018, 4027, 4082, 4126, 4141, 4145, 4191, 4263, 4337, 4367, 4415, 4440, 4461, 4463, 4473, 4492, 4525, 4590, 4595, 4655, 4679, 4692, 4719, 4741, 4757, 4765, 4816, 4922, 4928, 4981, 5002, 5013, 5079, 5096, 5125, 5130, 5135, 5156, 5186, 5195, 5201, 5263, 5287, 5313, 5370, 5373, 5421, 5455, 5473, 5493, 5508, 5527, 5564, 5568, 5587, 5622, 5647, 5651, 5727, 5934, 6020, 6031, 6034, 6054, 6086, 6141, 6160, 6170, 6183, 6184, 6202, 6209, 6217, 6225, 6235, 6245, 6248, 6252, 6260, 6261, 6288, 6305, 6310, 6312, 6369, 6375, 6376, 6386, 6400, 6439, 6462, 6660, 6715, 6729, 6741, 6774, 6780, 6800, 6826, 6834, 6841, 6858, 6871, 6893, 6929, 6943, 6955, 7010, 7061, 7088, 7106, 7135, 7150, 7171, 7244, 7257, 7284, 7299, 7361, 7381, 7405, 7426, 7455, 7483, 7532, 7606, 7636, 7659, 7674, 7748, 7769, 7771, 7782, 7798, 7804, 7813, 7814, 7817, 7836, 7849, 7881, 7896, 7902, 7919, 7921, 7943, 7945, 7954, 7956, 7959, 7985, 7986, 7995, 8005, 8024, 8028, 8042, 8076, 8175, 8184, 8239, 8246, 8251, 8270, 8294, 8315, 8329, 8340, 8398, 8458, 8462, 8493, 8557, 8582, 8599, 8617, 8634, 8657, 8658, 8674, 8690, 8721, 8764, 8766, 8775, 8790, 8831, 8853, 8864, 8904, 8933, 8990, 9015, 9028, 9043, 9051, 9068, 9120, 9202, 9206, 9225, 9230, 9272, 9276, 9286, 9288, 9290, 9295, 9366, 9400, 9433, 9473, 9483, 9492, 9512, 9544, 9577, 9616, 9631, 9637, 9659, 9684, 9746, 9780, 9820, 9836, 9912, 9959, 9970, 9976], "external_url": "https://colorpunx.io/colors?i=165&name=#855114", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954352344672763905"}, "#b9b9b9": {"id": 166, "name": "#b9b9b9", "description": "#b9b9b9 is one of 222 colors in the cryptopunx color pallette. It is used by 317 unique punks", "hash": "7bfa6d9129edd964d018aecf6d80c4b5", "image": "https://gateway.pinata.cloud/ipfs/QmNxhfU6ZSqkuie35AbdB5Z5wuVU2hxnEPCmUHfrj2SfdV?filename=colorpunx166.png", "punks": [3, 14, 133, 173, 207, 222, 231, 387, 445, 465, 476, 517, 563, 640, 649, 677, 686, 819, 908, 959, 999, 1174, 1178, 1250, 1271, 1288, 1293, 1422, 1448, 1476, 1529, 1541, 1566, 1580, 1710, 1811, 1939, 1996, 2049, 2054, 2096, 2111, 2133, 2198, 2283, 2375, 2385, 2478, 2490, 2639, 2657, 2673, 2692, 2721, 2745, 2747, 2856, 2878, 2882, 2966, 3011, 3075, 3098, 3204, 3212, 3216, 3236, 3248, 3302, 3363, 3389, 3392, 3422, 3480, 3483, 3503, 3524, 3534, 3540, 3543, 3603, 3618, 3726, 3747, 3894, 3953, 3999, 4018, 4027, 4082, 4126, 4141, 4145, 4191, 4263, 4337, 4367, 4415, 4440, 4461, 4463, 4473, 4492, 4525, 4590, 4595, 4655, 4679, 4692, 4719, 4741, 4757, 4765, 4816, 4922, 4928, 4981, 5002, 5013, 5079, 5096, 5125, 5130, 5135, 5156, 5186, 5195, 5201, 5263, 5287, 5313, 5370, 5373, 5421, 5455, 5473, 5493, 5508, 5527, 5564, 5568, 5587, 5622, 5647, 5651, 5727, 5934, 6020, 6031, 6034, 6054, 6086, 6141, 6160, 6170, 6183, 6184, 6202, 6209, 6217, 6225, 6235, 6245, 6248, 6252, 6260, 6261, 6288, 6305, 6310, 6312, 6369, 6375, 6376, 6386, 6400, 6439, 6462, 6660, 6715, 6729, 6741, 6774, 6780, 6800, 6826, 6834, 6841, 6858, 6871, 6893, 6929, 6943, 6955, 7010, 7061, 7088, 7106, 7135, 7150, 7171, 7244, 7257, 7284, 7299, 7361, 7381, 7405, 7426, 7455, 7483, 7532, 7606, 7636, 7659, 7674, 7748, 7769, 7771, 7782, 7798, 7804, 7813, 7814, 7817, 7836, 7849, 7881, 7896, 7902, 7919, 7921, 7943, 7945, 7954, 7956, 7959, 7985, 7986, 7995, 8005, 8024, 8028, 8042, 8076, 8175, 8184, 8239, 8246, 8251, 8270, 8294, 8315, 8329, 8340, 8398, 8458, 8462, 8493, 8557, 8582, 8599, 8617, 8634, 8657, 8658, 8674, 8690, 8721, 8764, 8766, 8775, 8790, 8831, 8853, 8864, 8904, 8933, 8990, 9015, 9028, 9043, 9051, 9068, 9120, 9202, 9206, 9225, 9230, 9272, 9276, 9286, 9288, 9290, 9295, 9366, 9400, 9433, 9473, 9483, 9492, 9512, 9544, 9577, 9616, 9631, 9637, 9659, 9684, 9746, 9780, 9820, 9836, 9912, 9959, 9970, 9976], "external_url": "https://colorpunx.io/colors?i=166&name=#b9b9b9", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954353444184391681"}, "#8d8d8d": {"id": 167, "name": "#8d8d8d", "description": "#8d8d8d is one of 222 colors in the cryptopunx color pallette. It is used by 332 unique punks", "hash": "e65a08109749bb042d79724c3f057073", "image": "https://gateway.pinata.cloud/ipfs/QmQnTHgEwVDrBgHF9r7XScHdiKd2TtCFNjFXjUxhQS8Xs1?filename=colorpunx167.png", "punks": [32, 151, 164, 305, 393, 455, 518, 534, 539, 545, 552, 563, 567, 568, 573, 612, 638, 683, 693, 713, 771, 827, 859, 890, 920, 939, 967, 972, 1044, 1083, 1126, 1185, 1209, 1230, 1272, 1365, 1389, 1448, 1475, 1479, 1492, 1505, 1515, 1575, 1582, 1605, 1611, 1640, 1737, 1739, 1755, 1869, 1897, 1922, 1951, 2035, 2048, 2049, 2084, 2087, 2107, 2160, 2227, 2231, 2234, 2325, 2353, 2460, 2468, 2531, 2555, 2560, 2570, 2592, 2766, 2807, 2823, 2826, 2883, 2892, 2954, 2973, 2980, 3021, 3024, 3085, 3088, 3108, 3129, 3245, 3259, 3322, 3398, 3429, 3451, 3466, 3500, 3506, 3511, 3563, 3587, 3633, 3642, 3699, 3741, 3746, 3826, 3838, 3859, 3866, 3883, 3927, 3942, 3977, 4033, 4056, 4066, 4125, 4132, 4165, 4167, 4223, 4251, 4260, 4285, 4301, 4320, 4359, 4378, 4394, 4396, 4404, 4452, 4469, 4499, 4527, 4533, 4536, 4549, 4551, 4562, 4565, 4574, 4578, 4588, 4597, 4628, 4630, 4675, 4683, 4743, 4780, 4819, 4828, 4855, 4857, 4877, 4897, 4916, 4984, 5056, 5062, 5081, 5103, 5124, 5138, 5157, 5164, 5173, 5213, 5276, 5475, 5490, 5546, 5555, 5578, 5618, 5644, 5685, 5714, 5715, 5782, 5837, 5851, 5854, 5913, 5916, 5922, 5929, 5950, 5964, 5974, 6012, 6018, 6132, 6147, 6176, 6183, 6207, 6315, 6329, 6332, 6367, 6402, 6415, 6453, 6458, 6459, 6473, 6522, 6525, 6542, 6544, 6563, 6579, 6612, 6613, 6651, 6669, 6766, 6770, 6808, 6818, 6867, 6940, 6968, 6979, 6990, 7027, 7048, 7143, 7145, 7183, 7197, 7393, 7403, 7417, 7430, 7451, 7453, 7504, 7508, 7620, 7643, 7666, 7680, 7753, 7814, 7820, 7825, 7831, 7839, 7852, 7871, 7920, 8000, 8056, 8057, 8102, 8103, 8111, 8115, 8128, 8131, 8161, 8187, 8278, 8290, 8333, 8380, 8407, 8478, 8489, 8510, 8522, 8529, 8534, 8568, 8574, 8575, 8595, 8612, 8676, 8685, 8768, 8787, 8796, 8808, 8863, 8893, 8928, 8951, 8969, 8990, 9010, 9019, 9036, 9104, 9168, 9248, 9264, 9283, 9296, 9297, 9346, 9385, 9400, 9476, 9480, 9487, 9494, 9529, 9554, 9558, 9565, 9617, 9623, 9636, 9671, 9694, 9735, 9741, 9762, 9839, 9849, 9894, 9941, 9947, 9961, 9963, 9969, 9982], "external_url": "https://colorpunx.io/colors?i=167&name=#8d8d8d", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954354543696019457"}, "#b4b4b4": {"id": 168, "name": "#b4b4b4", "description": "#b4b4b4 is one of 222 colors in the cryptopunx color pallette. It is used by 332 unique punks", "hash": "eb9d913bfc7644cc9d5e32799099cb2f", "image": "https://gateway.pinata.cloud/ipfs/QmWWisdTnTi37tYp4e3MHgzJws8gfc34zHvYDsGgDwutQW?filename=colorpunx168.png", "punks": [32, 151, 164, 305, 393, 455, 518, 534, 539, 545, 552, 563, 567, 568, 573, 612, 638, 683, 693, 713, 771, 827, 859, 890, 920, 939, 967, 972, 1044, 1083, 1126, 1185, 1209, 1230, 1272, 1365, 1389, 1448, 1475, 1479, 1492, 1505, 1515, 1575, 1582, 1605, 1611, 1640, 1737, 1739, 1755, 1869, 1897, 1922, 1951, 2035, 2048, 2049, 2084, 2087, 2107, 2160, 2227, 2231, 2234, 2325, 2353, 2460, 2468, 2531, 2555, 2560, 2570, 2592, 2766, 2807, 2823, 2826, 2883, 2892, 2954, 2973, 2980, 3021, 3024, 3085, 3088, 3108, 3129, 3245, 3259, 3322, 3398, 3429, 3451, 3466, 3500, 3506, 3511, 3563, 3587, 3633, 3642, 3699, 3741, 3746, 3826, 3838, 3859, 3866, 3883, 3927, 3942, 3977, 4033, 4056, 4066, 4125, 4132, 4165, 4167, 4223, 4251, 4260, 4285, 4301, 4320, 4359, 4378, 4394, 4396, 4404, 4452, 4469, 4499, 4527, 4533, 4536, 4549, 4551, 4562, 4565, 4574, 4578, 4588, 4597, 4628, 4630, 4675, 4683, 4743, 4780, 4819, 4828, 4855, 4857, 4877, 4897, 4916, 4984, 5056, 5062, 5081, 5103, 5124, 5138, 5157, 5164, 5173, 5213, 5276, 5475, 5490, 5546, 5555, 5578, 5618, 5644, 5685, 5714, 5715, 5782, 5837, 5851, 5854, 5913, 5916, 5922, 5929, 5950, 5964, 5974, 6012, 6018, 6132, 6147, 6176, 6183, 6207, 6315, 6329, 6332, 6367, 6402, 6415, 6453, 6458, 6459, 6473, 6522, 6525, 6542, 6544, 6563, 6579, 6612, 6613, 6651, 6669, 6766, 6770, 6808, 6818, 6867, 6940, 6968, 6979, 6990, 7027, 7048, 7143, 7145, 7183, 7197, 7393, 7403, 7417, 7430, 7451, 7453, 7504, 7508, 7620, 7643, 7666, 7680, 7753, 7814, 7820, 7825, 7831, 7839, 7852, 7871, 7920, 8000, 8056, 8057, 8102, 8103, 8111, 8115, 8128, 8131, 8161, 8187, 8278, 8290, 8333, 8380, 8407, 8478, 8489, 8510, 8522, 8529, 8534, 8568, 8574, 8575, 8595, 8612, 8676, 8685, 8768, 8787, 8796, 8808, 8863, 8893, 8928, 8951, 8969, 8990, 9010, 9019, 9036, 9104, 9168, 9248, 9264, 9283, 9296, 9297, 9346, 9385, 9400, 9476, 9480, 9487, 9494, 9529, 9554, 9558, 9565, 9617, 9623, 9636, 9671, 9694, 9735, 9741, 9762, 9839, 9849, 9894, 9941, 9947, 9961, 9963, 9969, 9982], "external_url": "https://colorpunx.io/colors?i=168&name=#b4b4b4", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954355643207647233"}, "#8119b7": {"id": 169, "name": "#8119b7", "description": "#8119b7 is one of 222 colors in the cryptopunx color pallette. It is used by 351 unique punks", "hash": "d9b384d4dc3fd37ac8edb0fac4775f26", "image": "https://gateway.pinata.cloud/ipfs/QmNMcFBGMixYQvHqe7qcTFjxLpGhgdvfVUc7QbzV9Q5bmN?filename=colorpunx169.png", "punks": [30, 37, 88, 119, 153, 157, 175, 218, 257, 274, 339, 453, 458, 496, 562, 570, 577, 582, 611, 633, 645, 657, 711, 725, 728, 747, 756, 779, 789, 790, 807, 816, 897, 903, 914, 963, 968, 996, 1009, 1021, 1069, 1075, 1145, 1165, 1183, 1223, 1242, 1258, 1266, 1287, 1335, 1415, 1443, 1471, 1485, 1490, 1510, 1526, 1538, 1625, 1657, 1664, 1723, 1760, 1771, 1779, 1809, 1822, 1834, 1892, 1896, 1921, 1960, 1995, 2035, 2052, 2112, 2137, 2215, 2251, 2255, 2296, 2307, 2316, 2367, 2369, 2408, 2438, 2448, 2456, 2463, 2472, 2491, 2512, 2615, 2650, 2681, 2704, 2718, 2739, 2763, 2807, 2812, 2838, 2890, 2901, 2922, 3038, 3046, 3052, 3086, 3089, 3109, 3123, 3138, 3182, 3264, 3270, 3278, 3291, 3395, 3442, 3448, 3454, 3485, 3486, 3526, 3567, 3675, 3693, 3731, 3740, 3772, 3782, 3833, 3843, 3856, 3866, 3894, 3900, 3923, 3945, 3988, 4024, 4049, 4241, 4255, 4283, 4285, 4305, 4365, 4371, 4382, 4423, 4428, 4435, 4446, 4447, 4460, 4470, 4474, 4509, 4514, 4537, 4591, 4616, 4624, 4625, 4662, 4696, 4732, 4800, 4819, 4961, 4963, 5009, 5034, 5037, 5074, 5093, 5122, 5136, 5141, 5189, 5216, 5236, 5265, 5285, 5341, 5355, 5363, 5420, 5422, 5442, 5445, 5511, 5514, 5523, 5558, 5564, 5569, 5676, 5678, 5685, 5705, 5772, 5774, 5893, 5961, 5971, 5996, 6034, 6059, 6145, 6167, 6209, 6212, 6238, 6262, 6303, 6330, 6333, 6385, 6397, 6463, 6464, 6510, 6522, 6563, 6587, 6597, 6623, 6640, 6748, 6751, 6762, 6766, 6773, 6787, 6798, 6806, 6819, 6837, 6865, 6915, 6947, 6964, 7016, 7041, 7053, 7064, 7107, 7146, 7149, 7161, 7186, 7187, 7193, 7267, 7273, 7327, 7339, 7382, 7410, 7425, 7434, 7453, 7459, 7529, 7533, 7580, 7597, 7620, 7633, 7689, 7762, 7794, 7854, 7871, 7873, 7891, 7913, 7924, 7936, 7951, 7955, 8000, 8022, 8073, 8076, 8077, 8099, 8112, 8133, 8182, 8196, 8211, 8233, 8270, 8274, 8278, 8315, 8352, 8543, 8569, 8574, 8580, 8608, 8614, 8616, 8645, 8663, 8677, 8722, 8735, 8761, 8807, 8813, 8835, 8904, 8988, 9015, 9085, 9153, 9171, 9173, 9181, 9260, 9289, 9322, 9326, 9329, 9369, 9453, 9537, 9560, 9601, 9675, 9680, 9687, 9721, 9737, 9753, 9758, 9772, 9843, 9896, 9909, 9923, 9939, 9993], "external_url": "https://colorpunx.io/colors?i=169&name=#8119b7", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954356742719275009"}, "#b261dc": {"id": 170, "name": "#b261dc", "description": "#b261dc is one of 222 colors in the cryptopunx color pallette. It is used by 351 unique punks", "hash": "4b96e9de0381b43f139e035a907fccc8", "image": "https://gateway.pinata.cloud/ipfs/Qmdnhzz83utMmdwK94s5YYAbfGHq8CznvQik6tJx3tjDEf?filename=colorpunx170.png", "punks": [30, 37, 88, 119, 153, 157, 175, 218, 257, 274, 339, 453, 458, 496, 562, 570, 577, 582, 611, 633, 645, 657, 711, 725, 728, 747, 756, 779, 789, 790, 807, 816, 897, 903, 914, 963, 968, 996, 1009, 1021, 1069, 1075, 1145, 1165, 1183, 1223, 1242, 1258, 1266, 1287, 1335, 1415, 1443, 1471, 1485, 1490, 1510, 1526, 1538, 1625, 1657, 1664, 1723, 1760, 1771, 1779, 1809, 1822, 1834, 1892, 1896, 1921, 1960, 1995, 2035, 2052, 2112, 2137, 2215, 2251, 2255, 2296, 2307, 2316, 2367, 2369, 2408, 2438, 2448, 2456, 2463, 2472, 2491, 2512, 2615, 2650, 2681, 2704, 2718, 2739, 2763, 2807, 2812, 2838, 2890, 2901, 2922, 3038, 3046, 3052, 3086, 3089, 3109, 3123, 3138, 3182, 3264, 3270, 3278, 3291, 3395, 3442, 3448, 3454, 3485, 3486, 3526, 3567, 3675, 3693, 3731, 3740, 3772, 3782, 3833, 3843, 3856, 3866, 3894, 3900, 3923, 3945, 3988, 4024, 4049, 4241, 4255, 4283, 4285, 4305, 4365, 4371, 4382, 4423, 4428, 4435, 4446, 4447, 4460, 4470, 4474, 4509, 4514, 4537, 4591, 4616, 4624, 4625, 4662, 4696, 4732, 4800, 4819, 4961, 4963, 5009, 5034, 5037, 5074, 5093, 5122, 5136, 5141, 5189, 5216, 5236, 5265, 5285, 5341, 5355, 5363, 5420, 5422, 5442, 5445, 5511, 5514, 5523, 5558, 5564, 5569, 5676, 5678, 5685, 5705, 5772, 5774, 5893, 5961, 5971, 5996, 6034, 6059, 6145, 6167, 6209, 6212, 6238, 6262, 6303, 6330, 6333, 6385, 6397, 6463, 6464, 6510, 6522, 6563, 6587, 6597, 6623, 6640, 6748, 6751, 6762, 6766, 6773, 6787, 6798, 6806, 6819, 6837, 6865, 6915, 6947, 6964, 7016, 7041, 7053, 7064, 7107, 7146, 7149, 7161, 7186, 7187, 7193, 7267, 7273, 7327, 7339, 7382, 7410, 7425, 7434, 7453, 7459, 7529, 7533, 7580, 7597, 7620, 7633, 7689, 7762, 7794, 7854, 7871, 7873, 7891, 7913, 7924, 7936, 7951, 7955, 8000, 8022, 8073, 8076, 8077, 8099, 8112, 8133, 8182, 8196, 8211, 8233, 8270, 8274, 8278, 8315, 8352, 8543, 8569, 8574, 8580, 8608, 8614, 8616, 8645, 8663, 8677, 8722, 8735, 8761, 8807, 8813, 8835, 8904, 8988, 9015, 9085, 9153, 9171, 9173, 9181, 9260, 9289, 9322, 9326, 9329, 9369, 9453, 9537, 9560, 9601, 9675, 9680, 9687, 9721, 9737, 9753, 9758, 9772, 9843, 9896, 9909, 9923, 9939, 9993], "external_url": "https://colorpunx.io/colors?i=170&name=#b261dc", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954357842230902785"}, "#296434": {"id": 171, "name": "#296434", "description": "#296434 is one of 222 colors in the cryptopunx color pallette. It is used by 382 unique punks", "hash": "267b161836b052fd86cf109f064d65a5", "image": "https://gateway.pinata.cloud/ipfs/QmbwvT1yxetszWc3pzCjwP7Z7DZCUA3DpxA7HvxuLZu6Pk?filename=colorpunx171.png", "punks": [11, 41, 127, 136, 152, 194, 238, 250, 253, 322, 330, 471, 580, 606, 607, 618, 654, 668, 737, 755, 765, 788, 812, 818, 845, 857, 858, 866, 1013, 1196, 1245, 1247, 1254, 1261, 1340, 1435, 1466, 1490, 1520, 1568, 1618, 1648, 1653, 1655, 1678, 1688, 1691, 1693, 1698, 1734, 1747, 1754, 1779, 1876, 1921, 1928, 1952, 1965, 1975, 1988, 2019, 2054, 2119, 2126, 2137, 2146, 2187, 2209, 2222, 2225, 2229, 2248, 2252, 2267, 2297, 2321, 2354, 2488, 2532, 2594, 2605, 2610, 2618, 2660, 2697, 2716, 2738, 2756, 2758, 2772, 2811, 2828, 2858, 2915, 2943, 2959, 2962, 2972, 2974, 2977, 2997, 3016, 3022, 3048, 3057, 3066, 3076, 3082, 3102, 3165, 3193, 3244, 3283, 3295, 3329, 3332, 3333, 3357, 3364, 3377, 3396, 3413, 3477, 3508, 3575, 3584, 3593, 3629, 3662, 3718, 3724, 3743, 3795, 3851, 3917, 3919, 3934, 3940, 3954, 4036, 4086, 4107, 4117, 4153, 4198, 4201, 4204, 4232, 4235, 4245, 4273, 4318, 4334, 4344, 4350, 4374, 4424, 4430, 4433, 4439, 4497, 4512, 4518, 4535, 4556, 4593, 4668, 4701, 4704, 4767, 4774, 4805, 4817, 4834, 4927, 4987, 5027, 5029, 5036, 5049, 5079, 5083, 5096, 5105, 5161, 5177, 5190, 5193, 5194, 5212, 5260, 5265, 5323, 5381, 5384, 5385, 5396, 5400, 5402, 5403, 5485, 5532, 5537, 5541, 5556, 5590, 5622, 5628, 5629, 5637, 5652, 5653, 5666, 5669, 5757, 5764, 5775, 5813, 5850, 5858, 5977, 6004, 6045, 6076, 6108, 6109, 6125, 6127, 6150, 6187, 6197, 6222, 6224, 6249, 6272, 6298, 6321, 6324, 6365, 6416, 6418, 6439, 6442, 6492, 6499, 6548, 6558, 6572, 6681, 6686, 6698, 6761, 6777, 6807, 6811, 6831, 6933, 6938, 6961, 7021, 7033, 7049, 7062, 7083, 7129, 7132, 7156, 7158, 7193, 7204, 7244, 7251, 7278, 7339, 7341, 7343, 7470, 7473, 7496, 7529, 7535, 7553, 7556, 7610, 7635, 7701, 7703, 7707, 7719, 7767, 7793, 7797, 7827, 7834, 7876, 7906, 7938, 7943, 7957, 7978, 7980, 7981, 8009, 8022, 8032, 8051, 8126, 8132, 8167, 8363, 8387, 8411, 8415, 8455, 8457, 8502, 8580, 8582, 8600, 8614, 8628, 8635, 8636, 8639, 8698, 8703, 8705, 8715, 8738, 8746, 8770, 8802, 8858, 8896, 8920, 8944, 8963, 8974, 8999, 9007, 9037, 9102, 9126, 9133, 9191, 9193, 9196, 9204, 9213, 9233, 9244, 9246, 9272, 9312, 9324, 9336, 9338, 9339, 9347, 9363, 9401, 9440, 9469, 9475, 9489, 9539, 9568, 9588, 9630, 9692, 9693, 9700, 9704, 9710, 9727, 9732, 9815, 9831, 9923, 9927, 9956, 9998], "external_url": "https://colorpunx.io/colors?i=171&name=#296434", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954358941742530561"}, "#2c9541": {"id": 172, "name": "#2c9541", "description": "#2c9541 is one of 222 colors in the cryptopunx color pallette. It is used by 382 unique punks", "hash": "612fb811fafef4dc3607ea3d7067516f", "image": "https://gateway.pinata.cloud/ipfs/QmVVNuxPDmM4nSBWkVNYHrgQnMhqLFCnSrPQ8WGsRrpqxN?filename=colorpunx172.png", "punks": [11, 41, 127, 136, 152, 194, 238, 250, 253, 322, 330, 471, 580, 606, 607, 618, 654, 668, 737, 755, 765, 788, 812, 818, 845, 857, 858, 866, 1013, 1196, 1245, 1247, 1254, 1261, 1340, 1435, 1466, 1490, 1520, 1568, 1618, 1648, 1653, 1655, 1678, 1688, 1691, 1693, 1698, 1734, 1747, 1754, 1779, 1876, 1921, 1928, 1952, 1965, 1975, 1988, 2019, 2054, 2119, 2126, 2137, 2146, 2187, 2209, 2222, 2225, 2229, 2248, 2252, 2267, 2297, 2321, 2354, 2488, 2532, 2594, 2605, 2610, 2618, 2660, 2697, 2716, 2738, 2756, 2758, 2772, 2811, 2828, 2858, 2915, 2943, 2959, 2962, 2972, 2974, 2977, 2997, 3016, 3022, 3048, 3057, 3066, 3076, 3082, 3102, 3165, 3193, 3244, 3283, 3295, 3329, 3332, 3333, 3357, 3364, 3377, 3396, 3413, 3477, 3508, 3575, 3584, 3593, 3629, 3662, 3718, 3724, 3743, 3795, 3851, 3917, 3919, 3934, 3940, 3954, 4036, 4086, 4107, 4117, 4153, 4198, 4201, 4204, 4232, 4235, 4245, 4273, 4318, 4334, 4344, 4350, 4374, 4424, 4430, 4433, 4439, 4497, 4512, 4518, 4535, 4556, 4593, 4668, 4701, 4704, 4767, 4774, 4805, 4817, 4834, 4927, 4987, 5027, 5029, 5036, 5049, 5079, 5083, 5096, 5105, 5161, 5177, 5190, 5193, 5194, 5212, 5260, 5265, 5323, 5381, 5384, 5385, 5396, 5400, 5402, 5403, 5485, 5532, 5537, 5541, 5556, 5590, 5622, 5628, 5629, 5637, 5652, 5653, 5666, 5669, 5757, 5764, 5775, 5813, 5850, 5858, 5977, 6004, 6045, 6076, 6108, 6109, 6125, 6127, 6150, 6187, 6197, 6222, 6224, 6249, 6272, 6298, 6321, 6324, 6365, 6416, 6418, 6439, 6442, 6492, 6499, 6548, 6558, 6572, 6681, 6686, 6698, 6761, 6777, 6807, 6811, 6831, 6933, 6938, 6961, 7021, 7033, 7049, 7062, 7083, 7129, 7132, 7156, 7158, 7193, 7204, 7244, 7251, 7278, 7339, 7341, 7343, 7470, 7473, 7496, 7529, 7535, 7553, 7556, 7610, 7635, 7701, 7703, 7707, 7719, 7767, 7793, 7797, 7827, 7834, 7876, 7906, 7938, 7943, 7957, 7978, 7980, 7981, 8009, 8022, 8032, 8051, 8126, 8132, 8167, 8363, 8387, 8411, 8415, 8455, 8457, 8502, 8580, 8582, 8600, 8614, 8628, 8635, 8636, 8639, 8698, 8703, 8705, 8715, 8738, 8746, 8770, 8802, 8858, 8896, 8920, 8944, 8963, 8974, 8999, 9007, 9037, 9102, 9126, 9133, 9191, 9193, 9196, 9204, 9213, 9233, 9244, 9246, 9272, 9312, 9324, 9336, 9338, 9339, 9347, 9363, 9401, 9440, 9469, 9475, 9489, 9539, 9568, 9588, 9630, 9692, 9693, 9700, 9704, 9710, 9727, 9732, 9815, 9831, 9923, 9927, 9956, 9998], "external_url": "https://colorpunx.io/colors?i=172&name=#2c9541", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954360041254158337"}, "#2858b1": {"id": 173, "name": "#2858b1", "description": "#2858b1 is one of 222 colors in the cryptopunx color pallette. It is used by 384 unique punks", "hash": "3010b5dee0de958446e1ed36cf1fdebd", "image": "https://gateway.pinata.cloud/ipfs/QmRnZarJE6AUKgZFVYLfLoXxMxqHCJbucPZXJDomNw4krc?filename=colorpunx173.png", "punks": [7, 37, 62, 116, 160, 173, 219, 270, 374, 388, 411, 423, 572, 601, 632, 677, 684, 792, 810, 835, 867, 888, 927, 960, 965, 991, 1024, 1026, 1039, 1073, 1076, 1091, 1102, 1173, 1295, 1296, 1345, 1369, 1402, 1405, 1414, 1415, 1422, 1428, 1453, 1461, 1562, 1563, 1588, 1595, 1599, 1620, 1634, 1707, 1724, 1766, 1848, 1864, 1893, 1930, 1956, 1985, 1986, 2018, 2033, 2046, 2074, 2078, 2183, 2190, 2262, 2265, 2273, 2344, 2360, 2384, 2388, 2423, 2425, 2447, 2461, 2462, 2467, 2527, 2554, 2558, 2575, 2583, 2588, 2601, 2614, 2643, 2681, 2686, 2734, 2784, 2816, 2817, 2878, 2904, 2940, 2958, 3025, 3030, 3042, 3096, 3110, 3113, 3116, 3135, 3243, 3252, 3268, 3269, 3274, 3275, 3376, 3418, 3437, 3481, 3494, 3519, 3531, 3535, 3542, 3560, 3562, 3613, 3627, 3667, 3672, 3693, 3748, 3777, 3807, 3818, 3846, 3850, 3858, 3899, 3900, 3907, 3911, 3950, 3968, 3970, 3997, 4009, 4018, 4072, 4100, 4140, 4217, 4231, 4239, 4302, 4353, 4376, 4410, 4423, 4515, 4569, 4573, 4585, 4590, 4652, 4670, 4674, 4687, 4690, 4741, 4747, 4756, 4778, 4789, 4791, 4824, 4860, 4884, 4889, 4895, 4957, 4972, 4990, 5014, 5031, 5032, 5042, 5043, 5054, 5084, 5094, 5099, 5132, 5150, 5154, 5166, 5208, 5251, 5252, 5254, 5258, 5275, 5292, 5294, 5343, 5345, 5356, 5376, 5398, 5405, 5441, 5442, 5449, 5450, 5461, 5468, 5481, 5572, 5607, 5609, 5711, 5718, 5732, 5815, 5821, 5826, 5894, 5901, 5967, 5982, 5986, 6017, 6041, 6049, 6064, 6071, 6074, 6078, 6079, 6104, 6119, 6142, 6144, 6154, 6186, 6196, 6241, 6265, 6341, 6352, 6411, 6421, 6476, 6498, 6507, 6512, 6550, 6591, 6617, 6638, 6640, 6662, 6666, 6685, 6776, 6791, 6814, 6816, 6852, 6855, 6872, 6879, 6924, 6932, 6944, 7032, 7036, 7056, 7090, 7125, 7138, 7148, 7178, 7214, 7281, 7295, 7304, 7333, 7366, 7373, 7395, 7411, 7502, 7511, 7594, 7601, 7605, 7633, 7645, 7676, 7746, 7751, 7778, 7809, 7841, 7894, 7897, 7900, 7904, 7907, 7908, 7929, 7941, 8055, 8084, 8172, 8177, 8208, 8280, 8336, 8346, 8374, 8424, 8428, 8450, 8470, 8496, 8505, 8538, 8548, 8565, 8586, 8641, 8644, 8669, 8672, 8743, 8779, 8797, 8807, 8828, 8895, 8905, 8932, 8993, 8994, 9043, 9049, 9078, 9183, 9211, 9227, 9237, 9257, 9266, 9303, 9311, 9319, 9331, 9367, 9393, 9407, 9408, 9410, 9448, 9467, 9486, 9500, 9595, 9601, 9608, 9632, 9662, 9713, 9719, 9740, 9746, 9751, 9866, 9891, 9899, 9933, 9964], "external_url": "https://colorpunx.io/colors?i=173&name=#2858b1", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954361140765786113"}, "#293e64": {"id": 174, "name": "#293e64", "description": "#293e64 is one of 222 colors in the cryptopunx color pallette. It is used by 384 unique punks", "hash": "1ee1f550b17d51fd370af39ee9c2e741", "image": "https://gateway.pinata.cloud/ipfs/QmajCPdu6vUAFXjMy1dUXQ1mNc1YhxmfhE8p3oJEm14Fpn?filename=colorpunx174.png", "punks": [7, 37, 62, 116, 160, 173, 219, 270, 374, 388, 411, 423, 572, 601, 632, 677, 684, 792, 810, 835, 867, 888, 927, 960, 965, 991, 1024, 1026, 1039, 1073, 1076, 1091, 1102, 1173, 1295, 1296, 1345, 1369, 1402, 1405, 1414, 1415, 1422, 1428, 1453, 1461, 1562, 1563, 1588, 1595, 1599, 1620, 1634, 1707, 1724, 1766, 1848, 1864, 1893, 1930, 1956, 1985, 1986, 2018, 2033, 2046, 2074, 2078, 2183, 2190, 2262, 2265, 2273, 2344, 2360, 2384, 2388, 2423, 2425, 2447, 2461, 2462, 2467, 2527, 2554, 2558, 2575, 2583, 2588, 2601, 2614, 2643, 2681, 2686, 2734, 2784, 2816, 2817, 2878, 2904, 2940, 2958, 3025, 3030, 3042, 3096, 3110, 3113, 3116, 3135, 3243, 3252, 3268, 3269, 3274, 3275, 3376, 3418, 3437, 3481, 3494, 3519, 3531, 3535, 3542, 3560, 3562, 3613, 3627, 3667, 3672, 3693, 3748, 3777, 3807, 3818, 3846, 3850, 3858, 3899, 3900, 3907, 3911, 3950, 3968, 3970, 3997, 4009, 4018, 4072, 4100, 4140, 4217, 4231, 4239, 4302, 4353, 4376, 4410, 4423, 4515, 4569, 4573, 4585, 4590, 4652, 4670, 4674, 4687, 4690, 4741, 4747, 4756, 4778, 4789, 4791, 4824, 4860, 4884, 4889, 4895, 4957, 4972, 4990, 5014, 5031, 5032, 5042, 5043, 5054, 5084, 5094, 5099, 5132, 5150, 5154, 5166, 5208, 5251, 5252, 5254, 5258, 5275, 5292, 5294, 5343, 5345, 5356, 5376, 5398, 5405, 5441, 5442, 5449, 5450, 5461, 5468, 5481, 5572, 5607, 5609, 5711, 5718, 5732, 5815, 5821, 5826, 5894, 5901, 5967, 5982, 5986, 6017, 6041, 6049, 6064, 6071, 6074, 6078, 6079, 6104, 6119, 6142, 6144, 6154, 6186, 6196, 6241, 6265, 6341, 6352, 6411, 6421, 6476, 6498, 6507, 6512, 6550, 6591, 6617, 6638, 6640, 6662, 6666, 6685, 6776, 6791, 6814, 6816, 6852, 6855, 6872, 6879, 6924, 6932, 6944, 7032, 7036, 7056, 7090, 7125, 7138, 7148, 7178, 7214, 7281, 7295, 7304, 7333, 7366, 7373, 7395, 7411, 7502, 7511, 7594, 7601, 7605, 7633, 7645, 7676, 7746, 7751, 7778, 7809, 7841, 7894, 7897, 7900, 7904, 7907, 7908, 7929, 7941, 8055, 8084, 8172, 8177, 8208, 8280, 8336, 8346, 8374, 8424, 8428, 8450, 8470, 8496, 8505, 8538, 8548, 8565, 8586, 8641, 8644, 8669, 8672, 8743, 8779, 8797, 8807, 8828, 8895, 8905, 8932, 8993, 8994, 9043, 9049, 9078, 9183, 9211, 9227, 9237, 9257, 9266, 9303, 9311, 9319, 9331, 9367, 9393, 9407, 9408, 9410, 9448, 9467, 9486, 9500, 9595, 9601, 9608, 9632, 9662, 9713, 9719, 9740, 9746, 9751, 9866, 9891, 9899, 9933, 9964], "external_url": "https://colorpunx.io/colors?i=174&name=#293e64", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954362240277413889"}, "#2c5195": {"id": 175, "name": "#2c5195", "description": "#2c5195 is one of 222 colors in the cryptopunx color pallette. It is used by 384 unique punks", "hash": "a25f83569e3b340ee0ae53d0a396100c", "image": "https://gateway.pinata.cloud/ipfs/QmaBCs8suAUnPTc93iLwo2rX6JkN2w7bkfrEUbcPdpKCJT?filename=colorpunx175.png", "punks": [7, 37, 62, 116, 160, 173, 219, 270, 374, 388, 411, 423, 572, 601, 632, 677, 684, 792, 810, 835, 867, 888, 927, 960, 965, 991, 1024, 1026, 1039, 1073, 1076, 1091, 1102, 1173, 1295, 1296, 1345, 1369, 1402, 1405, 1414, 1415, 1422, 1428, 1453, 1461, 1562, 1563, 1588, 1595, 1599, 1620, 1634, 1707, 1724, 1766, 1848, 1864, 1893, 1930, 1956, 1985, 1986, 2018, 2033, 2046, 2074, 2078, 2183, 2190, 2262, 2265, 2273, 2344, 2360, 2384, 2388, 2423, 2425, 2447, 2461, 2462, 2467, 2527, 2554, 2558, 2575, 2583, 2588, 2601, 2614, 2643, 2681, 2686, 2734, 2784, 2816, 2817, 2878, 2904, 2940, 2958, 3025, 3030, 3042, 3096, 3110, 3113, 3116, 3135, 3243, 3252, 3268, 3269, 3274, 3275, 3376, 3418, 3437, 3481, 3494, 3519, 3531, 3535, 3542, 3560, 3562, 3613, 3627, 3667, 3672, 3693, 3748, 3777, 3807, 3818, 3846, 3850, 3858, 3899, 3900, 3907, 3911, 3950, 3968, 3970, 3997, 4009, 4018, 4072, 4100, 4140, 4217, 4231, 4239, 4302, 4353, 4376, 4410, 4423, 4515, 4569, 4573, 4585, 4590, 4652, 4670, 4674, 4687, 4690, 4741, 4747, 4756, 4778, 4789, 4791, 4824, 4860, 4884, 4889, 4895, 4957, 4972, 4990, 5014, 5031, 5032, 5042, 5043, 5054, 5084, 5094, 5099, 5132, 5150, 5154, 5166, 5208, 5251, 5252, 5254, 5258, 5275, 5292, 5294, 5343, 5345, 5356, 5376, 5398, 5405, 5441, 5442, 5449, 5450, 5461, 5468, 5481, 5572, 5607, 5609, 5711, 5718, 5732, 5815, 5821, 5826, 5894, 5901, 5967, 5982, 5986, 6017, 6041, 6049, 6064, 6071, 6074, 6078, 6079, 6104, 6119, 6142, 6144, 6154, 6186, 6196, 6241, 6265, 6341, 6352, 6411, 6421, 6476, 6498, 6507, 6512, 6550, 6591, 6617, 6638, 6640, 6662, 6666, 6685, 6776, 6791, 6814, 6816, 6852, 6855, 6872, 6879, 6924, 6932, 6944, 7032, 7036, 7056, 7090, 7125, 7138, 7148, 7178, 7214, 7281, 7295, 7304, 7333, 7366, 7373, 7395, 7411, 7502, 7511, 7594, 7601, 7605, 7633, 7645, 7676, 7746, 7751, 7778, 7809, 7841, 7894, 7897, 7900, 7904, 7907, 7908, 7929, 7941, 8055, 8084, 8172, 8177, 8208, 8280, 8336, 8346, 8374, 8424, 8428, 8450, 8470, 8496, 8505, 8538, 8548, 8565, 8586, 8641, 8644, 8669, 8672, 8743, 8779, 8797, 8807, 8828, 8895, 8905, 8932, 8993, 8994, 9043, 9049, 9078, 9183, 9211, 9227, 9237, 9257, 9266, 9303, 9311, 9319, 9331, 9367, 9393, 9407, 9408, 9410, 9448, 9467, 9486, 9500, 9595, 9601, 9608, 9632, 9662, 9713, 9719, 9740, 9746, 9751, 9866, 9891, 9899, 9933, 9964], "external_url": "https://colorpunx.io/colors?i=175&name=#2c5195", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954363339789041665"}, "#1a6ed5": {"id": 176, "name": "#1a6ed5", "description": "#1a6ed5 is one of 222 colors in the cryptopunx color pallette. It is used by 406 unique punks", "hash": "bea641f48e05dc1bdf30ce9903df6c0b", "image": "https://gateway.pinata.cloud/ipfs/QmPKnRoCHr5FsToeYBFEhPHHaRw2cc9SHzMinz4BXxBke9?filename=colorpunx176.png", "punks": [57, 65, 81, 82, 107, 108, 126, 141, 167, 190, 202, 220, 224, 300, 340, 373, 377, 410, 431, 485, 502, 505, 529, 546, 595, 614, 631, 710, 764, 794, 819, 845, 846, 899, 910, 916, 928, 940, 942, 961, 964, 999, 1016, 1019, 1023, 1058, 1178, 1195, 1215, 1224, 1302, 1359, 1379, 1424, 1435, 1440, 1445, 1456, 1462, 1503, 1533, 1566, 1570, 1607, 1613, 1673, 1680, 1781, 1790, 1812, 1868, 1871, 1874, 1898, 1901, 1908, 1962, 2003, 2040, 2070, 2075, 2083, 2087, 2099, 2104, 2105, 2107, 2155, 2163, 2234, 2291, 2298, 2323, 2341, 2361, 2363, 2376, 2386, 2403, 2421, 2452, 2552, 2558, 2560, 2585, 2587, 2606, 2607, 2671, 2707, 2749, 2757, 2775, 2849, 2859, 2862, 2885, 2897, 2928, 2950, 2976, 3059, 3066, 3092, 3100, 3136, 3200, 3211, 3273, 3319, 3327, 3331, 3358, 3367, 3372, 3394, 3410, 3422, 3435, 3467, 3473, 3482, 3506, 3523, 3531, 3565, 3577, 3601, 3642, 3662, 3668, 3677, 3681, 3714, 3742, 3745, 3761, 3818, 3822, 3830, 3838, 3849, 3877, 3878, 3903, 3917, 3958, 3980, 4009, 4040, 4072, 4088, 4094, 4122, 4123, 4142, 4158, 4164, 4203, 4212, 4221, 4247, 4256, 4312, 4324, 4350, 4358, 4368, 4369, 4387, 4390, 4414, 4484, 4505, 4550, 4552, 4557, 4578, 4581, 4605, 4609, 4697, 4698, 4704, 4747, 4844, 4856, 4867, 4905, 4942, 4966, 4988, 5003, 5004, 5029, 5059, 5075, 5140, 5147, 5163, 5223, 5243, 5249, 5258, 5273, 5324, 5339, 5404, 5415, 5456, 5539, 5549, 5559, 5586, 5590, 5698, 5762, 5812, 5824, 5853, 5876, 5888, 5890, 5903, 5932, 5955, 5995, 6009, 6013, 6035, 6094, 6108, 6168, 6222, 6227, 6228, 6285, 6292, 6349, 6373, 6423, 6454, 6467, 6488, 6498, 6536, 6603, 6630, 6657, 6675, 6682, 6695, 6698, 6744, 6782, 6815, 6832, 6833, 6868, 6886, 6905, 6945, 6968, 6971, 6975, 6976, 7058, 7062, 7122, 7150, 7159, 7184, 7232, 7264, 7280, 7300, 7308, 7319, 7323, 7355, 7370, 7372, 7399, 7406, 7408, 7427, 7435, 7438, 7441, 7455, 7463, 7464, 7474, 7491, 7541, 7571, 7657, 7658, 7684, 7692, 7716, 7728, 7739, 7785, 7821, 7832, 7847, 7855, 7861, 7894, 7899, 7934, 7943, 7953, 7969, 7981, 7988, 8049, 8050, 8115, 8127, 8151, 8157, 8159, 8166, 8178, 8179, 8192, 8198, 8212, 8272, 8286, 8292, 8311, 8376, 8406, 8450, 8466, 8481, 8505, 8588, 8591, 8637, 8692, 8716, 8748, 8763, 8831, 8837, 8914, 8917, 8924, 8941, 9023, 9045, 9059, 9088, 9138, 9199, 9206, 9227, 9323, 9380, 9414, 9511, 9512, 9517, 9554, 9561, 9573, 9576, 9589, 9597, 9627, 9674, 9751, 9768, 9808, 9811, 9819, 9837, 9855, 9886, 9898, 9936, 9938], "external_url": "https://colorpunx.io/colors?i=176&name=#1a6ed5", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954364439300669441"}, "#933709": {"id": 177, "name": "#933709", "description": "#933709 is one of 222 colors in the cryptopunx color pallette. It is used by 419 unique punks", "hash": "5368c29d856dc4dc0eee2fff30a54c8e", "image": "https://gateway.pinata.cloud/ipfs/QmQWbSZB1jaH311P1s2WzsLeZCzaVDLnrWgxCQK7zoALJw?filename=colorpunx177.png", "punks": [47, 52, 75, 78, 86, 111, 230, 234, 268, 330, 347, 381, 409, 439, 452, 457, 461, 470, 484, 508, 513, 531, 535, 538, 547, 569, 594, 640, 661, 683, 736, 745, 814, 836, 849, 853, 859, 885, 950, 975, 994, 1089, 1113, 1151, 1160, 1201, 1233, 1235, 1255, 1275, 1304, 1309, 1351, 1368, 1369, 1400, 1402, 1497, 1505, 1516, 1517, 1518, 1530, 1540, 1550, 1557, 1601, 1622, 1641, 1646, 1692, 1748, 1756, 1774, 1814, 1824, 1830, 1839, 1870, 1877, 1890, 1922, 1933, 1940, 1943, 1955, 2005, 2024, 2027, 2066, 2079, 2082, 2086, 2090, 2140, 2192, 2200, 2205, 2242, 2256, 2267, 2334, 2399, 2407, 2431, 2458, 2459, 2465, 2468, 2473, 2487, 2530, 2553, 2562, 2609, 2619, 2677, 2691, 2785, 2803, 2808, 2824, 2847, 2864, 2870, 2905, 2906, 2939, 2966, 2982, 3017, 3025, 3040, 3069, 3081, 3095, 3111, 3114, 3118, 3166, 3167, 3180, 3192, 3196, 3199, 3285, 3323, 3350, 3355, 3356, 3359, 3381, 3402, 3452, 3484, 3580, 3633, 3634, 3663, 3690, 3700, 3855, 3858, 3865, 3899, 3911, 3971, 3982, 4025, 4034, 4039, 4053, 4060, 4066, 4085, 4189, 4202, 4266, 4284, 4298, 4307, 4427, 4429, 4449, 4471, 4473, 4476, 4516, 4521, 4532, 4534, 4563, 4596, 4629, 4703, 4715, 4753, 4837, 4865, 4959, 4962, 4965, 4974, 5035, 5066, 5072, 5078, 5087, 5088, 5095, 5142, 5149, 5156, 5217, 5233, 5240, 5250, 5269, 5312, 5322, 5482, 5516, 5519, 5552, 5553, 5560, 5565, 5588, 5604, 5616, 5617, 5658, 5700, 5739, 5749, 5751, 5753, 5770, 5804, 5826, 5837, 5870, 5897, 5899, 5907, 5953, 5954, 5956, 5981, 5997, 6002, 6018, 6064, 6070, 6089, 6117, 6160, 6162, 6180, 6196, 6197, 6211, 6229, 6261, 6274, 6293, 6325, 6346, 6396, 6399, 6407, 6438, 6448, 6499, 6512, 6523, 6546, 6566, 6567, 6573, 6586, 6595, 6664, 6686, 6688, 6691, 6702, 6761, 6763, 6791, 6803, 6825, 6838, 6845, 6857, 6884, 6892, 6894, 6907, 6938, 6957, 6986, 7002, 7006, 7024, 7077, 7080, 7113, 7123, 7183, 7191, 7226, 7259, 7270, 7305, 7330, 7331, 7332, 7335, 7387, 7405, 7440, 7442, 7458, 7477, 7487, 7492, 7523, 7530, 7548, 7607, 7609, 7721, 7724, 7770, 7797, 7911, 7914, 7918, 7927, 7932, 7954, 7992, 8007, 8019, 8026, 8052, 8067, 8075, 8091, 8106, 8152, 8154, 8171, 8199, 8213, 8219, 8236, 8257, 8294, 8308, 8309, 8319, 8327, 8338, 8342, 8346, 8367, 8391, 8423, 8453, 8551, 8555, 8604, 8606, 8693, 8781, 8806, 8838, 8854, 8874, 8950, 8959, 8965, 8996, 9032, 9070, 9076, 9111, 9168, 9186, 9222, 9234, 9242, 9271, 9342, 9362, 9390, 9405, 9407, 9410, 9445, 9516, 9527, 9682, 9685, 9686, 9730, 9743, 9763, 9788, 9795, 9806, 9812, 9839, 9850, 9915, 9947, 9967], "external_url": "https://colorpunx.io/colors?i=177&name=#933709", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954365538812297217"}, "#ca4e11": {"id": 178, "name": "#ca4e11", "description": "#ca4e11 is one of 222 colors in the cryptopunx color pallette. It is used by 419 unique punks", "hash": "29209d8029648b71c3efc9e74f3bfaeb", "image": "https://gateway.pinata.cloud/ipfs/QmdYuNWdvGytXWLQTWkDWbuDfEivqWjxSF3QafkDKL7Vw8?filename=colorpunx178.png", "punks": [47, 52, 75, 78, 86, 111, 230, 234, 268, 330, 347, 381, 409, 439, 452, 457, 461, 470, 484, 508, 513, 531, 535, 538, 547, 569, 594, 640, 661, 683, 736, 745, 814, 836, 849, 853, 859, 885, 950, 975, 994, 1089, 1113, 1151, 1160, 1201, 1233, 1235, 1255, 1275, 1304, 1309, 1351, 1368, 1369, 1400, 1402, 1497, 1505, 1516, 1517, 1518, 1530, 1540, 1550, 1557, 1601, 1622, 1641, 1646, 1692, 1748, 1756, 1774, 1814, 1824, 1830, 1839, 1870, 1877, 1890, 1922, 1933, 1940, 1943, 1955, 2005, 2024, 2027, 2066, 2079, 2082, 2086, 2090, 2140, 2192, 2200, 2205, 2242, 2256, 2267, 2334, 2399, 2407, 2431, 2458, 2459, 2465, 2468, 2473, 2487, 2530, 2553, 2562, 2609, 2619, 2677, 2691, 2785, 2803, 2808, 2824, 2847, 2864, 2870, 2905, 2906, 2939, 2966, 2982, 3017, 3025, 3040, 3069, 3081, 3095, 3111, 3114, 3118, 3166, 3167, 3180, 3192, 3196, 3199, 3285, 3323, 3350, 3355, 3356, 3359, 3381, 3402, 3452, 3484, 3580, 3633, 3634, 3663, 3690, 3700, 3855, 3858, 3865, 3899, 3911, 3971, 3982, 4025, 4034, 4039, 4053, 4060, 4066, 4085, 4189, 4202, 4266, 4284, 4298, 4307, 4427, 4429, 4449, 4471, 4473, 4476, 4516, 4521, 4532, 4534, 4563, 4596, 4629, 4703, 4715, 4753, 4837, 4865, 4959, 4962, 4965, 4974, 5035, 5066, 5072, 5078, 5087, 5088, 5095, 5142, 5149, 5156, 5217, 5233, 5240, 5250, 5269, 5312, 5322, 5482, 5516, 5519, 5552, 5553, 5560, 5565, 5588, 5604, 5616, 5617, 5658, 5700, 5739, 5749, 5751, 5753, 5770, 5804, 5826, 5837, 5870, 5897, 5899, 5907, 5953, 5954, 5956, 5981, 5997, 6002, 6018, 6064, 6070, 6089, 6117, 6160, 6162, 6180, 6196, 6197, 6211, 6229, 6261, 6274, 6293, 6325, 6346, 6396, 6399, 6407, 6438, 6448, 6499, 6512, 6523, 6546, 6566, 6567, 6573, 6586, 6595, 6664, 6686, 6688, 6691, 6702, 6761, 6763, 6791, 6803, 6825, 6838, 6845, 6857, 6884, 6892, 6894, 6907, 6938, 6957, 6986, 7002, 7006, 7024, 7077, 7080, 7113, 7123, 7183, 7191, 7226, 7259, 7270, 7305, 7330, 7331, 7332, 7335, 7387, 7405, 7440, 7442, 7458, 7477, 7487, 7492, 7523, 7530, 7548, 7607, 7609, 7721, 7724, 7770, 7797, 7911, 7914, 7918, 7927, 7932, 7954, 7992, 8007, 8019, 8026, 8052, 8067, 8075, 8091, 8106, 8152, 8154, 8171, 8199, 8213, 8219, 8236, 8257, 8294, 8308, 8309, 8319, 8327, 8338, 8342, 8346, 8367, 8391, 8423, 8453, 8551, 8555, 8604, 8606, 8693, 8781, 8806, 8838, 8854, 8874, 8950, 8959, 8965, 8996, 9032, 9070, 9076, 9111, 9168, 9186, 9222, 9234, 9242, 9271, 9342, 9362, 9390, 9405, 9407, 9410, 9445, 9516, 9527, 9682, 9685, 9686, 9730, 9743, 9763, 9788, 9795, 9806, 9812, 9839, 9850, 9915, 9947, 9967], "external_url": "https://colorpunx.io/colors?i=178&name=#ca4e11", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954366638323924993"}, "#85561e": {"id": 179, "name": "#85561e", "description": "#85561e is one of 222 colors in the cryptopunx color pallette. It is used by 441 unique punks", "hash": "0f82af0640d2ac2dac912c312b37e2e3", "image": "https://gateway.pinata.cloud/ipfs/QmY5Wx1RgUswsagCi8cYX6p9ZmGTgVMsTpra92JZM5Wqbx?filename=colorpunx179.png", "punks": [1, 10, 17, 48, 95, 113, 122, 130, 142, 146, 181, 191, 214, 215, 237, 239, 287, 358, 366, 476, 518, 528, 540, 555, 564, 589, 636, 643, 655, 658, 685, 734, 740, 763, 777, 783, 806, 829, 841, 917, 934, 1041, 1067, 1068, 1141, 1146, 1173, 1180, 1185, 1194, 1213, 1236, 1358, 1361, 1395, 1405, 1407, 1408, 1410, 1431, 1436, 1475, 1482, 1639, 1654, 1701, 1705, 1724, 1737, 1747, 1754, 1758, 1788, 1797, 1815, 1847, 1915, 1965, 1977, 2053, 2092, 2100, 2103, 2139, 2145, 2150, 2184, 2212, 2216, 2238, 2239, 2257, 2271, 2281, 2285, 2330, 2337, 2366, 2394, 2398, 2425, 2493, 2500, 2507, 2511, 2518, 2529, 2545, 2563, 2586, 2597, 2629, 2644, 2696, 2744, 2773, 2776, 2839, 2860, 2957, 2963, 3002, 3004, 3042, 3090, 3149, 3150, 3156, 3161, 3163, 3179, 3219, 3221, 3241, 3272, 3279, 3297, 3325, 3364, 3398, 3418, 3455, 3458, 3509, 3513, 3524, 3539, 3593, 3606, 3621, 3632, 3644, 3658, 3688, 3716, 3781, 3785, 3786, 3789, 3820, 3848, 3860, 3912, 3938, 3947, 3974, 3985, 3996, 4010, 4042, 4050, 4068, 4111, 4121, 4126, 4127, 4172, 4174, 4180, 4184, 4191, 4216, 4260, 4263, 4331, 4361, 4385, 4412, 4415, 4463, 4479, 4488, 4490, 4491, 4504, 4530, 4556, 4569, 4623, 4630, 4643, 4672, 4692, 4730, 4762, 4777, 4793, 4809, 4821, 4836, 4864, 4891, 4908, 4968, 4971, 4994, 5015, 5022, 5105, 5126, 5176, 5193, 5198, 5200, 5247, 5248, 5302, 5340, 5349, 5353, 5366, 5368, 5394, 5432, 5434, 5481, 5536, 5544, 5573, 5580, 5587, 5606, 5672, 5694, 5718, 5729, 5741, 5757, 5766, 5784, 5839, 5857, 5896, 5910, 5944, 5945, 5959, 5960, 5988, 5999, 6088, 6109, 6110, 6139, 6148, 6171, 6172, 6200, 6230, 6245, 6291, 6313, 6318, 6328, 6393, 6395, 6414, 6421, 6429, 6460, 6461, 6475, 6478, 6553, 6602, 6605, 6616, 6692, 6710, 6724, 6772, 6827, 6850, 6898, 6908, 6942, 6959, 7017, 7043, 7068, 7073, 7076, 7089, 7173, 7202, 7224, 7238, 7283, 7284, 7290, 7297, 7312, 7321, 7340, 7344, 7358, 7411, 7414, 7444, 7450, 7460, 7486, 7506, 7510, 7532, 7545, 7552, 7570, 7574, 7590, 7591, 7610, 7611, 7627, 7635, 7678, 7681, 7693, 7713, 7717, 7737, 7803, 7820, 7835, 7840, 7857, 7859, 7876, 7889, 7922, 7926, 7949, 7961, 7965, 7974, 7982, 7991, 8001, 8116, 8121, 8174, 8177, 8197, 8221, 8240, 8256, 8284, 8340, 8351, 8355, 8378, 8388, 8422, 8510, 8519, 8540, 8541, 8572, 8584, 8594, 8657, 8697, 8710, 8715, 8818, 8843, 8855, 8861, 8894, 8956, 8982, 8992, 9029, 9035, 9077, 9084, 9103, 9110, 9132, 9134, 9144, 9179, 9192, 9228, 9281, 9283, 9309, 9321, 9336, 9337, 9343, 9345, 9348, 9351, 9357, 9388, 9426, 9437, 9439, 9457, 9469, 9501, 9582, 9609, 9622, 9643, 9700, 9717, 9735, 9752, 9776, 9790, 9805, 9857, 9891, 9903, 9931, 9940, 9986, 9990, 9999], "external_url": "https://colorpunx.io/colors?i=179&name=#85561e", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954367737835552769"}, "#2a2a2a": {"id": 180, "name": "#2a2a2a", "description": "#2a2a2a is one of 222 colors in the cryptopunx color pallette. It is used by 442 unique punks", "hash": "67c3234144c675413ab21f532d525a3a", "image": "https://gateway.pinata.cloud/ipfs/QmYeNnWeqbc1W9y2brd7qWv8VJjA56BEGq14Ss6YPR6nU7?filename=colorpunx180.png", "punks": [34, 38, 144, 161, 162, 197, 235, 250, 283, 307, 311, 337, 368, 371, 378, 401, 434, 469, 519, 548, 575, 613, 619, 622, 634, 663, 692, 717, 748, 751, 760, 785, 839, 868, 894, 954, 1003, 1059, 1066, 1081, 1087, 1095, 1097, 1128, 1155, 1230, 1291, 1299, 1316, 1324, 1325, 1336, 1347, 1366, 1373, 1387, 1396, 1413, 1418, 1419, 1441, 1448, 1487, 1504, 1513, 1524, 1545, 1614, 1618, 1643, 1667, 1676, 1753, 1762, 1764, 1770, 1803, 1826, 1833, 1835, 1879, 1899, 1904, 1905, 1914, 1917, 1976, 1981, 1992, 1997, 2004, 2012, 2032, 2037, 2069, 2078, 2123, 2126, 2148, 2149, 2152, 2166, 2177, 2181, 2186, 2189, 2201, 2266, 2283, 2305, 2309, 2352, 2419, 2428, 2486, 2510, 2554, 2594, 2628, 2630, 2635, 2642, 2647, 2667, 2668, 2673, 2693, 2754, 2779, 2826, 2911, 2914, 2929, 2942, 2944, 2955, 2969, 2973, 2988, 3000, 3024, 3085, 3181, 3189, 3202, 3218, 3262, 3283, 3296, 3299, 3318, 3320, 3374, 3386, 3389, 3397, 3438, 3460, 3495, 3500, 3502, 3508, 3510, 3553, 3558, 3578, 3602, 3683, 3710, 3723, 3730, 3736, 3767, 3776, 3826, 3834, 3837, 3846, 3875, 3893, 3898, 3902, 3905, 3936, 4007, 4031, 4128, 4134, 4137, 4138, 4150, 4163, 4185, 4186, 4193, 4223, 4262, 4265, 4314, 4321, 4341, 4344, 4351, 4386, 4392, 4404, 4419, 4421, 4430, 4433, 4528, 4543, 4555, 4573, 4582, 4597, 4613, 4617, 4636, 4645, 4691, 4776, 4843, 4878, 4879, 4882, 4896, 4911, 4935, 4937, 4958, 5018, 5031, 5044, 5061, 5098, 5103, 5108, 5145, 5174, 5201, 5227, 5276, 5284, 5292, 5293, 5301, 5367, 5370, 5373, 5384, 5392, 5410, 5449, 5492, 5527, 5570, 5591, 5600, 5683, 5728, 5744, 5747, 5752, 5802, 5843, 5862, 5925, 5935, 5938, 5952, 5962, 5975, 5992, 6046, 6048, 6080, 6085, 6086, 6092, 6125, 6134, 6199, 6220, 6240, 6279, 6284, 6305, 6321, 6324, 6348, 6361, 6387, 6391, 6415, 6422, 6445, 6507, 6579, 6614, 6646, 6771, 6792, 6824, 6852, 6882, 6911, 6962, 6978, 6982, 6989, 6996, 7014, 7034, 7081, 7121, 7182, 7204, 7225, 7228, 7265, 7268, 7274, 7315, 7361, 7375, 7436, 7496, 7499, 7511, 7559, 7584, 7586, 7595, 7619, 7621, 7636, 7669, 7688, 7706, 7711, 7754, 7771, 7772, 7781, 7833, 7837, 7862, 7864, 7874, 7883, 7959, 7978, 7983, 7989, 8006, 8037, 8069, 8078, 8087, 8092, 8097, 8098, 8108, 8119, 8131, 8175, 8180, 8248, 8275, 8323, 8333, 8385, 8399, 8448, 8457, 8464, 8480, 8483, 8490, 8492, 8502, 8547, 8567, 8641, 8727, 8749, 8778, 8780, 8824, 8846, 8891, 8915, 8937, 8949, 8957, 8973, 8975, 9012, 9022, 9025, 9027, 9030, 9036, 9043, 9055, 9073, 9080, 9095, 9113, 9114, 9122, 9123, 9126, 9165, 9261, 9302, 9365, 9402, 9442, 9456, 9503, 9558, 9564, 9572, 9628, 9656, 9668, 9690, 9701, 9739, 9760, 9777, 9786, 9792, 9797, 9840, 9888, 9918, 9921, 9944, 9972], "external_url": "https://colorpunx.io/colors?i=180&name=#2a2a2a", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954368837347180545"}, "#142c7c": {"id": 181, "name": "#142c7c", "description": "#142c7c is one of 222 colors in the cryptopunx color pallette. It is used by 481 unique punks", "hash": "05380461e38f1acba243e344aae2c89d", "image": "https://gateway.pinata.cloud/ipfs/QmTkri7e3M8wtsL7BFmc97zwfgdiFppTazPvnKY45aCx8e?filename=colorpunx181.png", "punks": [19, 40, 49, 73, 93, 112, 118, 177, 216, 219, 233, 246, 302, 310, 316, 317, 318, 328, 329, 342, 353, 360, 374, 384, 398, 419, 463, 511, 567, 574, 635, 647, 677, 693, 730, 739, 742, 792, 796, 797, 850, 855, 864, 869, 905, 932, 974, 995, 1025, 1052, 1098, 1112, 1125, 1143, 1181, 1186, 1190, 1208, 1217, 1231, 1252, 1314, 1337, 1356, 1380, 1398, 1427, 1444, 1449, 1451, 1452, 1525, 1528, 1534, 1587, 1616, 1624, 1633, 1660, 1690, 1717, 1740, 1767, 1787, 1796, 1831, 1842, 1855, 1895, 1902, 1909, 1939, 1942, 1988, 2021, 2072, 2076, 2088, 2091, 2115, 2141, 2147, 2154, 2191, 2207, 2213, 2230, 2243, 2246, 2249, 2290, 2297, 2319, 2320, 2333, 2344, 2354, 2358, 2362, 2387, 2402, 2424, 2430, 2457, 2460, 2469, 2471, 2481, 2520, 2547, 2564, 2577, 2582, 2593, 2627, 2638, 2639, 2652, 2666, 2687, 2708, 2714, 2772, 2783, 2786, 2820, 2825, 2843, 2866, 2904, 2915, 2916, 2917, 2933, 2941, 2947, 3023, 3027, 3028, 3034, 3073, 3093, 3099, 3110, 3147, 3152, 3260, 3302, 3322, 3342, 3362, 3378, 3414, 3421, 3426, 3459, 3487, 3501, 3568, 3575, 3584, 3622, 3626, 3680, 3721, 3722, 3771, 3784, 3788, 3796, 3824, 3842, 3852, 3863, 3874, 3906, 3930, 3963, 4000, 4002, 4014, 4023, 4052, 4067, 4116, 4156, 4157, 4209, 4213, 4233, 4236, 4273, 4291, 4292, 4327, 4408, 4426, 4436, 4443, 4508, 4512, 4519, 4527, 4539, 4547, 4567, 4576, 4644, 4667, 4675, 4727, 4743, 4746, 4778, 4783, 4823, 4854, 4890, 4914, 4925, 4950, 4973, 4987, 5017, 5020, 5048, 5071, 5099, 5139, 5150, 5175, 5195, 5220, 5251, 5268, 5279, 5328, 5364, 5371, 5400, 5401, 5441, 5521, 5522, 5537, 5540, 5581, 5609, 5620, 5647, 5654, 5717, 5720, 5722, 5761, 5764, 5822, 5829, 5855, 5875, 5878, 5912, 5927, 5940, 5963, 5972, 5989, 5991, 6001, 6021, 6056, 6101, 6123, 6136, 6157, 6192, 6210, 6232, 6254, 6257, 6271, 6282, 6299, 6366, 6388, 6433, 6453, 6516, 6518, 6574, 6583, 6596, 6639, 6654, 6685, 6689, 6716, 6729, 6749, 6765, 6774, 6784, 6848, 6871, 6872, 6878, 6879, 6896, 6973, 6990, 7007, 7030, 7040, 7127, 7170, 7190, 7192, 7207, 7218, 7246, 7253, 7255, 7256, 7271, 7298, 7299, 7304, 7334, 7346, 7350, 7394, 7429, 7431, 7443, 7479, 7493, 7502, 7565, 7573, 7575, 7581, 7598, 7638, 7639, 7662, 7696, 7705, 7714, 7786, 7823, 7842, 7852, 7869, 7878, 7906, 7962, 7964, 7997, 8040, 8054, 8060, 8086, 8103, 8143, 8209, 8239, 8245, 8249, 8271, 8280, 8310, 8318, 8331, 8335, 8339, 8381, 8400, 8401, 8424, 8436, 8437, 8446, 8462, 8463, 8495, 8517, 8548, 8571, 8597, 8642, 8652, 8662, 8698, 8734, 8788, 8808, 8858, 8869, 8878, 8903, 8926, 8927, 8938, 8946, 8952, 9001, 9019, 9026, 9041, 9047, 9049, 9056, 9065, 9082, 9091, 9101, 9161, 9163, 9180, 9182, 9198, 9212, 9225, 9233, 9248, 9265, 9269, 9277, 9286, 9319, 9320, 9355, 9361, 9391, 9434, 9444, 9447, 9458, 9472, 9519, 9521, 9525, 9529, 9533, 9565, 9586, 9587, 9607, 9610, 9620, 9624, 9662, 9775, 9824, 9833, 9847, 9880, 9917, 9949, 9964, 9992], "external_url": "https://colorpunx.io/colors?i=181&name=#142c7c", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954369936858808321"}, "#1637a4": {"id": 182, "name": "#1637a4", "description": "#1637a4 is one of 222 colors in the cryptopunx color pallette. It is used by 481 unique punks", "hash": "9cb3ec0fd7c32ef4ffb1212bb62a069b", "image": "https://gateway.pinata.cloud/ipfs/QmTEYoEPZLz295o4y2Ru5dyf2eTPQ3BCjeLAYsMPe1kEGC?filename=colorpunx182.png", "punks": [19, 40, 49, 73, 93, 112, 118, 177, 216, 219, 233, 246, 302, 310, 316, 317, 318, 328, 329, 342, 353, 360, 374, 384, 398, 419, 463, 511, 567, 574, 635, 647, 677, 693, 730, 739, 742, 792, 796, 797, 850, 855, 864, 869, 905, 932, 974, 995, 1025, 1052, 1098, 1112, 1125, 1143, 1181, 1186, 1190, 1208, 1217, 1231, 1252, 1314, 1337, 1356, 1380, 1398, 1427, 1444, 1449, 1451, 1452, 1525, 1528, 1534, 1587, 1616, 1624, 1633, 1660, 1690, 1717, 1740, 1767, 1787, 1796, 1831, 1842, 1855, 1895, 1902, 1909, 1939, 1942, 1988, 2021, 2072, 2076, 2088, 2091, 2115, 2141, 2147, 2154, 2191, 2207, 2213, 2230, 2243, 2246, 2249, 2290, 2297, 2319, 2320, 2333, 2344, 2354, 2358, 2362, 2387, 2402, 2424, 2430, 2457, 2460, 2469, 2471, 2481, 2520, 2547, 2564, 2577, 2582, 2593, 2627, 2638, 2639, 2652, 2666, 2687, 2708, 2714, 2772, 2783, 2786, 2820, 2825, 2843, 2866, 2904, 2915, 2916, 2917, 2933, 2941, 2947, 3023, 3027, 3028, 3034, 3073, 3093, 3099, 3110, 3147, 3152, 3260, 3302, 3322, 3342, 3362, 3378, 3414, 3421, 3426, 3459, 3487, 3501, 3568, 3575, 3584, 3622, 3626, 3680, 3721, 3722, 3771, 3784, 3788, 3796, 3824, 3842, 3852, 3863, 3874, 3906, 3930, 3963, 4000, 4002, 4014, 4023, 4052, 4067, 4116, 4156, 4157, 4209, 4213, 4233, 4236, 4273, 4291, 4292, 4327, 4408, 4426, 4436, 4443, 4508, 4512, 4519, 4527, 4539, 4547, 4567, 4576, 4644, 4667, 4675, 4727, 4743, 4746, 4778, 4783, 4823, 4854, 4890, 4914, 4925, 4950, 4973, 4987, 5017, 5020, 5048, 5071, 5099, 5139, 5150, 5175, 5195, 5220, 5251, 5268, 5279, 5328, 5364, 5371, 5400, 5401, 5441, 5521, 5522, 5537, 5540, 5581, 5609, 5620, 5647, 5654, 5717, 5720, 5722, 5761, 5764, 5822, 5829, 5855, 5875, 5878, 5912, 5927, 5940, 5963, 5972, 5989, 5991, 6001, 6021, 6056, 6101, 6123, 6136, 6157, 6192, 6210, 6232, 6254, 6257, 6271, 6282, 6299, 6366, 6388, 6433, 6453, 6516, 6518, 6574, 6583, 6596, 6639, 6654, 6685, 6689, 6716, 6729, 6749, 6765, 6774, 6784, 6848, 6871, 6872, 6878, 6879, 6896, 6973, 6990, 7007, 7030, 7040, 7127, 7170, 7190, 7192, 7207, 7218, 7246, 7253, 7255, 7256, 7271, 7298, 7299, 7304, 7334, 7346, 7350, 7394, 7429, 7431, 7443, 7479, 7493, 7502, 7565, 7573, 7575, 7581, 7598, 7638, 7639, 7662, 7696, 7705, 7714, 7786, 7823, 7842, 7852, 7869, 7878, 7906, 7962, 7964, 7997, 8040, 8054, 8060, 8086, 8103, 8143, 8209, 8239, 8245, 8249, 8271, 8280, 8310, 8318, 8331, 8335, 8339, 8381, 8400, 8401, 8424, 8436, 8437, 8446, 8462, 8463, 8495, 8517, 8548, 8571, 8597, 8642, 8652, 8662, 8698, 8734, 8788, 8808, 8858, 8869, 8878, 8903, 8926, 8927, 8938, 8946, 8952, 9001, 9019, 9026, 9041, 9047, 9049, 9056, 9065, 9082, 9091, 9101, 9161, 9163, 9180, 9182, 9198, 9212, 9225, 9233, 9248, 9265, 9269, 9277, 9286, 9319, 9320, 9355, 9361, 9391, 9434, 9444, 9447, 9458, 9472, 9519, 9521, 9525, 9529, 9533, 9565, 9586, 9587, 9607, 9610, 9620, 9624, 9662, 9775, 9824, 9833, 9847, 9880, 9917, 9949, 9964, 9992], "external_url": "https://colorpunx.io/colors?i=182&name=#1637a4", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954371036370436097"}, "#1a43c8": {"id": 183, "name": "#1a43c8", "description": "#1a43c8 is one of 222 colors in the cryptopunx color pallette. It is used by 481 unique punks", "hash": "77e38a8fe18ef395ec0001b1488dd33c", "image": "https://gateway.pinata.cloud/ipfs/QmSsp5yf22PmLZdj6RfFmWfM57WgTJ79r2fNvSEkfdpYeZ?filename=colorpunx183.png", "punks": [19, 40, 49, 73, 93, 112, 118, 177, 216, 219, 233, 246, 302, 310, 316, 317, 318, 328, 329, 342, 353, 360, 374, 384, 398, 419, 463, 511, 567, 574, 635, 647, 677, 693, 730, 739, 742, 792, 796, 797, 850, 855, 864, 869, 905, 932, 974, 995, 1025, 1052, 1098, 1112, 1125, 1143, 1181, 1186, 1190, 1208, 1217, 1231, 1252, 1314, 1337, 1356, 1380, 1398, 1427, 1444, 1449, 1451, 1452, 1525, 1528, 1534, 1587, 1616, 1624, 1633, 1660, 1690, 1717, 1740, 1767, 1787, 1796, 1831, 1842, 1855, 1895, 1902, 1909, 1939, 1942, 1988, 2021, 2072, 2076, 2088, 2091, 2115, 2141, 2147, 2154, 2191, 2207, 2213, 2230, 2243, 2246, 2249, 2290, 2297, 2319, 2320, 2333, 2344, 2354, 2358, 2362, 2387, 2402, 2424, 2430, 2457, 2460, 2469, 2471, 2481, 2520, 2547, 2564, 2577, 2582, 2593, 2627, 2638, 2639, 2652, 2666, 2687, 2708, 2714, 2772, 2783, 2786, 2820, 2825, 2843, 2866, 2904, 2915, 2916, 2917, 2933, 2941, 2947, 3023, 3027, 3028, 3034, 3073, 3093, 3099, 3110, 3147, 3152, 3260, 3302, 3322, 3342, 3362, 3378, 3414, 3421, 3426, 3459, 3487, 3501, 3568, 3575, 3584, 3622, 3626, 3680, 3721, 3722, 3771, 3784, 3788, 3796, 3824, 3842, 3852, 3863, 3874, 3906, 3930, 3963, 4000, 4002, 4014, 4023, 4052, 4067, 4116, 4156, 4157, 4209, 4213, 4233, 4236, 4273, 4291, 4292, 4327, 4408, 4426, 4436, 4443, 4508, 4512, 4519, 4527, 4539, 4547, 4567, 4576, 4644, 4667, 4675, 4727, 4743, 4746, 4778, 4783, 4823, 4854, 4890, 4914, 4925, 4950, 4973, 4987, 5017, 5020, 5048, 5071, 5099, 5139, 5150, 5175, 5195, 5220, 5251, 5268, 5279, 5328, 5364, 5371, 5400, 5401, 5441, 5521, 5522, 5537, 5540, 5581, 5609, 5620, 5647, 5654, 5717, 5720, 5722, 5761, 5764, 5822, 5829, 5855, 5875, 5878, 5912, 5927, 5940, 5963, 5972, 5989, 5991, 6001, 6021, 6056, 6101, 6123, 6136, 6157, 6192, 6210, 6232, 6254, 6257, 6271, 6282, 6299, 6366, 6388, 6433, 6453, 6516, 6518, 6574, 6583, 6596, 6639, 6654, 6685, 6689, 6716, 6729, 6749, 6765, 6774, 6784, 6848, 6871, 6872, 6878, 6879, 6896, 6973, 6990, 7007, 7030, 7040, 7127, 7170, 7190, 7192, 7207, 7218, 7246, 7253, 7255, 7256, 7271, 7298, 7299, 7304, 7334, 7346, 7350, 7394, 7429, 7431, 7443, 7479, 7493, 7502, 7565, 7573, 7575, 7581, 7598, 7638, 7639, 7662, 7696, 7705, 7714, 7786, 7823, 7842, 7852, 7869, 7878, 7906, 7962, 7964, 7997, 8040, 8054, 8060, 8086, 8103, 8143, 8209, 8239, 8245, 8249, 8271, 8280, 8310, 8318, 8331, 8335, 8339, 8381, 8400, 8401, 8424, 8436, 8437, 8446, 8462, 8463, 8495, 8517, 8548, 8571, 8597, 8642, 8652, 8662, 8698, 8734, 8788, 8808, 8858, 8869, 8878, 8903, 8926, 8927, 8938, 8946, 8952, 9001, 9019, 9026, 9041, 9047, 9049, 9056, 9065, 9082, 9091, 9101, 9161, 9163, 9180, 9182, 9198, 9212, 9225, 9233, 9248, 9265, 9269, 9277, 9286, 9319, 9320, 9355, 9361, 9391, 9434, 9444, 9447, 9458, 9472, 9519, 9521, 9525, 9529, 9533, 9565, 9586, 9587, 9607, 9610, 9620, 9624, 9662, 9775, 9824, 9833, 9847, 9880, 9917, 9949, 9964, 9992], "external_url": "https://colorpunx.io/colors?i=183&name=#1a43c8", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954372135882063873"}, "#5c390f": {"id": 184, "name": "#5c390f", "description": "#5c390f is one of 222 colors in the cryptopunx color pallette. It is used by 502 unique punks", "hash": "32113c525cbfbc6fef0e4ce5fe7d086c", "image": "https://gateway.pinata.cloud/ipfs/QmQxhSNsevCK8e244FBZkoY7LT7igLgVS822yDZF2T7DKs?filename=colorpunx184.png", "punks": [21, 38, 170, 179, 199, 221, 282, 310, 384, 403, 412, 460, 467, 489, 492, 583, 590, 616, 636, 657, 671, 675, 733, 747, 751, 782, 796, 800, 848, 852, 879, 928, 946, 974, 1010, 1036, 1042, 1061, 1080, 1088, 1094, 1179, 1228, 1257, 1264, 1292, 1302, 1310, 1321, 1357, 1373, 1380, 1383, 1392, 1417, 1444, 1451, 1518, 1522, 1535, 1539, 1580, 1601, 1673, 1704, 1710, 1714, 1784, 1786, 1788, 1791, 1797, 1799, 1813, 1819, 1829, 1912, 1914, 1925, 1945, 1948, 1994, 2010, 2020, 2095, 2106, 2108, 2136, 2139, 2168, 2177, 2202, 2257, 2343, 2358, 2369, 2377, 2385, 2412, 2433, 2446, 2484, 2493, 2498, 2595, 2608, 2639, 2670, 2727, 2782, 2788, 2830, 2839, 2866, 2903, 2935, 2946, 2969, 2971, 3044, 3046, 3077, 3081, 3090, 3091, 3094, 3114, 3122, 3125, 3153, 3204, 3205, 3218, 3242, 3287, 3312, 3346, 3374, 3380, 3438, 3447, 3452, 3458, 3459, 3461, 3479, 3509, 3579, 3592, 3598, 3604, 3605, 3628, 3644, 3654, 3671, 3674, 3712, 3713, 3750, 3758, 3773, 3775, 3799, 3830, 3834, 3855, 3884, 3895, 3922, 3986, 4001, 4011, 4034, 4043, 4063, 4091, 4172, 4186, 4206, 4228, 4258, 4281, 4282, 4308, 4310, 4316, 4325, 4352, 4354, 4355, 4383, 4409, 4416, 4428, 4524, 4540, 4552, 4553, 4570, 4601, 4618, 4645, 4656, 4662, 4723, 4744, 4773, 4830, 4833, 4853, 4878, 4940, 4943, 4946, 4947, 4951, 4963, 4966, 4992, 5008, 5020, 5026, 5033, 5034, 5035, 5057, 5067, 5073, 5078, 5106, 5146, 5149, 5180, 5202, 5204, 5218, 5223, 5237, 5238, 5249, 5291, 5304, 5305, 5363, 5364, 5367, 5372, 5435, 5493, 5561, 5566, 5586, 5596, 5601, 5612, 5621, 5626, 5667, 5678, 5693, 5705, 5710, 5722, 5747, 5755, 5763, 5765, 5794, 5810, 5820, 5835, 5907, 5915, 5927, 5940, 5941, 5943, 5968, 5976, 5992, 6027, 6030, 6039, 6065, 6090, 6157, 6175, 6178, 6210, 6228, 6234, 6243, 6268, 6271, 6287, 6294, 6313, 6396, 6412, 6419, 6435, 6446, 6464, 6495, 6505, 6540, 6549, 6561, 6585, 6588, 6596, 6600, 6609, 6627, 6693, 6746, 6758, 6768, 6798, 6806, 6824, 6869, 6877, 6883, 6898, 6931, 6934, 6941, 6942, 6949, 6970, 6984, 7000, 7019, 7025, 7059, 7077, 7106, 7137, 7162, 7198, 7203, 7231, 7264, 7269, 7280, 7293, 7328, 7332, 7336, 7359, 7360, 7362, 7384, 7407, 7408, 7433, 7480, 7489, 7491, 7518, 7540, 7577, 7586, 7606, 7617, 7646, 7679, 7699, 7715, 7750, 7759, 7775, 7788, 7796, 7802, 7828, 7844, 7845, 7857, 7884, 7922, 7927, 7934, 7939, 7964, 7965, 8011, 8066, 8140, 8145, 8157, 8168, 8235, 8282, 8288, 8294, 8295, 8317, 8334, 8348, 8361, 8386, 8388, 8403, 8433, 8446, 8460, 8508, 8526, 8547, 8601, 8607, 8619, 8632, 8687, 8689, 8700, 8720, 8732, 8758, 8766, 8771, 8782, 8784, 8793, 8810, 8830, 8839, 8842, 8879, 8889, 8922, 8926, 8948, 8949, 8971, 8976, 9002, 9005, 9018, 9024, 9026, 9046, 9050, 9087, 9119, 9124, 9128, 9142, 9173, 9221, 9229, 9236, 9250, 9273, 9281, 9306, 9315, 9323, 9335, 9344, 9380, 9381, 9439, 9506, 9515, 9517, 9543, 9550, 9557, 9560, 9566, 9570, 9576, 9596, 9600, 9609, 9645, 9653, 9663, 9673, 9681, 9707, 9709, 9739, 9763, 9772, 9780, 9784, 9805, 9813, 9861, 9865, 9882, 9886, 9948, 9959, 9970, 9980, 9983], "external_url": "https://colorpunx.io/colors?i=184&name=#5c390f", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954373235393691649"}, "#c77514": {"id": 185, "name": "#c77514", "description": "#c77514 is one of 222 colors in the cryptopunx color pallette. It is used by 502 unique punks", "hash": "aa0d4f9d89bcdd69518a6387f6a661f2", "image": "https://gateway.pinata.cloud/ipfs/QmXHC6CVEvNMmxQHUNAEDXKvq5HzeDurSedt85c7nbBcfS?filename=colorpunx185.png", "punks": [21, 38, 170, 179, 199, 221, 282, 310, 384, 403, 412, 460, 467, 489, 492, 583, 590, 616, 636, 657, 671, 675, 733, 747, 751, 782, 796, 800, 848, 852, 879, 928, 946, 974, 1010, 1036, 1042, 1061, 1080, 1088, 1094, 1179, 1228, 1257, 1264, 1292, 1302, 1310, 1321, 1357, 1373, 1380, 1383, 1392, 1417, 1444, 1451, 1518, 1522, 1535, 1539, 1580, 1601, 1673, 1704, 1710, 1714, 1784, 1786, 1788, 1791, 1797, 1799, 1813, 1819, 1829, 1912, 1914, 1925, 1945, 1948, 1994, 2010, 2020, 2095, 2106, 2108, 2136, 2139, 2168, 2177, 2202, 2257, 2343, 2358, 2369, 2377, 2385, 2412, 2433, 2446, 2484, 2493, 2498, 2595, 2608, 2639, 2670, 2727, 2782, 2788, 2830, 2839, 2866, 2903, 2935, 2946, 2969, 2971, 3044, 3046, 3077, 3081, 3090, 3091, 3094, 3114, 3122, 3125, 3153, 3204, 3205, 3218, 3242, 3287, 3312, 3346, 3374, 3380, 3438, 3447, 3452, 3458, 3459, 3461, 3479, 3509, 3579, 3592, 3598, 3604, 3605, 3628, 3644, 3654, 3671, 3674, 3712, 3713, 3750, 3758, 3773, 3775, 3799, 3830, 3834, 3855, 3884, 3895, 3922, 3986, 4001, 4011, 4034, 4043, 4063, 4091, 4172, 4186, 4206, 4228, 4258, 4281, 4282, 4308, 4310, 4316, 4325, 4352, 4354, 4355, 4383, 4409, 4416, 4428, 4524, 4540, 4552, 4553, 4570, 4601, 4618, 4645, 4656, 4662, 4723, 4744, 4773, 4830, 4833, 4853, 4878, 4940, 4943, 4946, 4947, 4951, 4963, 4966, 4992, 5008, 5020, 5026, 5033, 5034, 5035, 5057, 5067, 5073, 5078, 5106, 5146, 5149, 5180, 5202, 5204, 5218, 5223, 5237, 5238, 5249, 5291, 5304, 5305, 5363, 5364, 5367, 5372, 5435, 5493, 5561, 5566, 5586, 5596, 5601, 5612, 5621, 5626, 5667, 5678, 5693, 5705, 5710, 5722, 5747, 5755, 5763, 5765, 5794, 5810, 5820, 5835, 5907, 5915, 5927, 5940, 5941, 5943, 5968, 5976, 5992, 6027, 6030, 6039, 6065, 6090, 6157, 6175, 6178, 6210, 6228, 6234, 6243, 6268, 6271, 6287, 6294, 6313, 6396, 6412, 6419, 6435, 6446, 6464, 6495, 6505, 6540, 6549, 6561, 6585, 6588, 6596, 6600, 6609, 6627, 6693, 6746, 6758, 6768, 6798, 6806, 6824, 6869, 6877, 6883, 6898, 6931, 6934, 6941, 6942, 6949, 6970, 6984, 7000, 7019, 7025, 7059, 7077, 7106, 7137, 7162, 7198, 7203, 7231, 7264, 7269, 7280, 7293, 7328, 7332, 7336, 7359, 7360, 7362, 7384, 7407, 7408, 7433, 7480, 7489, 7491, 7518, 7540, 7577, 7586, 7606, 7617, 7646, 7679, 7699, 7715, 7750, 7759, 7775, 7788, 7796, 7802, 7828, 7844, 7845, 7857, 7884, 7922, 7927, 7934, 7939, 7964, 7965, 8011, 8066, 8140, 8145, 8157, 8168, 8235, 8282, 8288, 8294, 8295, 8317, 8334, 8348, 8361, 8386, 8388, 8403, 8433, 8446, 8460, 8508, 8526, 8547, 8601, 8607, 8619, 8632, 8687, 8689, 8700, 8720, 8732, 8758, 8766, 8771, 8782, 8784, 8793, 8810, 8830, 8839, 8842, 8879, 8889, 8922, 8926, 8948, 8949, 8971, 8976, 9002, 9005, 9018, 9024, 9026, 9046, 9050, 9087, 9119, 9124, 9128, 9142, 9173, 9221, 9229, 9236, 9250, 9273, 9281, 9306, 9315, 9323, 9335, 9344, 9380, 9381, 9439, 9506, 9515, 9517, 9543, 9550, 9557, 9560, 9566, 9570, 9576, 9596, 9600, 9609, 9645, 9653, 9663, 9673, 9681, 9707, 9709, 9739, 9763, 9772, 9780, 9784, 9805, 9813, 9861, 9865, 9882, 9886, 9948, 9959, 9970, 9980, 9983], "external_url": "https://colorpunx.io/colors?i=185&name=#c77514", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954374334905319425"}, "#281b09": {"id": 186, "name": "#281b09", "description": "#281b09 is one of 222 colors in the cryptopunx color pallette. It is used by 521 unique punks", "hash": "36b46c1cfcd15db71979ca25b695e0d8", "image": "https://gateway.pinata.cloud/ipfs/QmfBJ9FbTM6TeH6PvcMt4oiwJRoZoZXfGYpdWMkXDnj4q2?filename=colorpunx186.png", "punks": [52, 74, 75, 136, 154, 179, 183, 304, 343, 362, 363, 414, 439, 441, 444, 492, 540, 556, 565, 599, 612, 639, 690, 709, 730, 740, 748, 754, 771, 774, 787, 791, 793, 805, 808, 819, 833, 887, 889, 890, 891, 902, 911, 923, 969, 1062, 1063, 1111, 1116, 1117, 1119, 1128, 1137, 1172, 1242, 1270, 1274, 1305, 1335, 1358, 1366, 1380, 1398, 1402, 1478, 1497, 1501, 1503, 1605, 1630, 1639, 1649, 1674, 1692, 1696, 1716, 1886, 1948, 2002, 2032, 2035, 2081, 2112, 2153, 2175, 2209, 2236, 2264, 2276, 2288, 2291, 2298, 2311, 2313, 2314, 2315, 2319, 2385, 2420, 2458, 2489, 2490, 2498, 2512, 2519, 2528, 2535, 2565, 2569, 2577, 2639, 2640, 2648, 2691, 2702, 2709, 2744, 2769, 2771, 2783, 2789, 2796, 2885, 2902, 2912, 2923, 2931, 2944, 2956, 2970, 2998, 3010, 3014, 3023, 3028, 3033, 3045, 3047, 3068, 3101, 3103, 3106, 3157, 3180, 3184, 3191, 3233, 3316, 3320, 3330, 3339, 3352, 3355, 3365, 3370, 3410, 3421, 3433, 3438, 3445, 3452, 3455, 3460, 3467, 3469, 3477, 3493, 3505, 3506, 3509, 3544, 3549, 3566, 3598, 3600, 3614, 3654, 3670, 3672, 3676, 3701, 3714, 3716, 3719, 3732, 3779, 3780, 3849, 3860, 3869, 3926, 3933, 3938, 3966, 3968, 3994, 4033, 4039, 4091, 4163, 4182, 4210, 4216, 4220, 4255, 4262, 4272, 4280, 4283, 4296, 4297, 4307, 4328, 4370, 4379, 4386, 4404, 4407, 4425, 4448, 4452, 4470, 4481, 4482, 4483, 4484, 4488, 4494, 4503, 4521, 4565, 4569, 4574, 4591, 4599, 4604, 4651, 4680, 4684, 4709, 4745, 4746, 4765, 4770, 4791, 4793, 4807, 4810, 4840, 4847, 4869, 4871, 4881, 4894, 4919, 4967, 4968, 5021, 5031, 5034, 5037, 5050, 5080, 5095, 5109, 5174, 5218, 5226, 5230, 5241, 5242, 5273, 5286, 5297, 5322, 5349, 5365, 5370, 5392, 5397, 5402, 5448, 5453, 5473, 5514, 5529, 5536, 5543, 5585, 5595, 5633, 5634, 5643, 5663, 5665, 5694, 5707, 5722, 5746, 5802, 5805, 5841, 5849, 5853, 5855, 5859, 5876, 5892, 5897, 5902, 5933, 5968, 5985, 6056, 6092, 6126, 6132, 6138, 6146, 6177, 6208, 6213, 6226, 6233, 6246, 6258, 6275, 6289, 6299, 6307, 6313, 6314, 6316, 6327, 6334, 6336, 6344, 6349, 6361, 6374, 6399, 6413, 6421, 6491, 6493, 6514, 6529, 6553, 6557, 6595, 6602, 6605, 6610, 6705, 6709, 6742, 6746, 6749, 6758, 6850, 6852, 6874, 6889, 6949, 6973, 6982, 6985, 6992, 7008, 7139, 7152, 7154, 7167, 7179, 7185, 7186, 7215, 7238, 7240, 7245, 7307, 7334, 7376, 7385, 7388, 7393, 7399, 7405, 7435, 7440, 7458, 7466, 7478, 7485, 7487, 7488, 7517, 7538, 7541, 7546, 7554, 7572, 7625, 7627, 7666, 7684, 7745, 7756, 7757, 7781, 7796, 7815, 7902, 7952, 8002, 8022, 8050, 8070, 8080, 8087, 8095, 8102, 8122, 8155, 8180, 8181, 8186, 8237, 8256, 8366, 8432, 8492, 8500, 8520, 8536, 8545, 8550, 8568, 8571, 8598, 8619, 8642, 8650, 8651, 8658, 8659, 8661, 8707, 8737, 8780, 8781, 8806, 8834, 8851, 8868, 8919, 8931, 8958, 8981, 9017, 9036, 9047, 9056, 9076, 9079, 9082, 9094, 9112, 9113, 9119, 9121, 9123, 9124, 9157, 9159, 9172, 9207, 9208, 9249, 9254, 9264, 9266, 9275, 9279, 9287, 9322, 9329, 9389, 9391, 9421, 9448, 9472, 9494, 9507, 9525, 9553, 9557, 9569, 9626, 9649, 9681, 9704, 9726, 9766, 9774, 9785, 9794, 9804, 9810, 9823, 9835, 9850, 9860, 9872, 9914, 9929, 9946, 9950, 9951, 9987, 9993], "external_url": "https://colorpunx.io/colors?i=186&name=#281b09", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954376533928574977"}, "#28b143": {"id": 187, "name": "#28b143", "description": "#28b143 is one of 222 colors in the cryptopunx color pallette. It is used by 524 unique punks", "hash": "d8cb13818b8ba71858f705de6a449473", "image": "https://gateway.pinata.cloud/ipfs/QmR2xNHphweS1ULd8LCutWS7u8mYRsFc3PGsHrD3pFJbA5?filename=colorpunx187.png", "punks": [11, 41, 127, 136, 152, 155, 194, 238, 250, 253, 322, 330, 335, 367, 403, 471, 580, 605, 606, 607, 618, 654, 665, 668, 688, 737, 755, 765, 778, 788, 812, 818, 845, 857, 858, 866, 907, 1013, 1196, 1198, 1229, 1245, 1247, 1254, 1261, 1268, 1340, 1435, 1466, 1490, 1491, 1520, 1559, 1561, 1568, 1577, 1618, 1621, 1648, 1653, 1655, 1678, 1688, 1691, 1693, 1698, 1702, 1726, 1734, 1747, 1754, 1765, 1779, 1864, 1876, 1921, 1928, 1952, 1965, 1975, 1988, 2019, 2054, 2095, 2119, 2126, 2137, 2146, 2185, 2187, 2203, 2209, 2222, 2225, 2229, 2248, 2252, 2267, 2297, 2321, 2326, 2336, 2354, 2375, 2391, 2475, 2488, 2495, 2532, 2594, 2605, 2610, 2618, 2660, 2697, 2716, 2738, 2756, 2758, 2772, 2811, 2828, 2845, 2858, 2915, 2930, 2943, 2959, 2962, 2972, 2974, 2977, 2997, 3016, 3022, 3048, 3057, 3063, 3066, 3071, 3076, 3082, 3102, 3103, 3165, 3177, 3193, 3208, 3244, 3246, 3283, 3295, 3316, 3329, 3332, 3333, 3357, 3364, 3377, 3396, 3413, 3477, 3508, 3529, 3554, 3575, 3584, 3593, 3623, 3629, 3662, 3702, 3718, 3724, 3738, 3743, 3746, 3795, 3851, 3882, 3885, 3910, 3917, 3919, 3921, 3934, 3940, 3954, 4036, 4086, 4107, 4113, 4117, 4144, 4153, 4196, 4198, 4201, 4204, 4232, 4235, 4245, 4273, 4318, 4334, 4344, 4350, 4374, 4381, 4424, 4430, 4433, 4439, 4458, 4497, 4512, 4515, 4518, 4535, 4542, 4549, 4556, 4593, 4607, 4627, 4668, 4701, 4704, 4767, 4774, 4786, 4805, 4817, 4832, 4834, 4862, 4927, 4928, 4987, 5027, 5029, 5036, 5049, 5079, 5083, 5096, 5105, 5143, 5161, 5177, 5190, 5193, 5194, 5212, 5239, 5260, 5265, 5272, 5277, 5323, 5348, 5359, 5375, 5381, 5384, 5385, 5396, 5400, 5402, 5403, 5433, 5485, 5532, 5537, 5541, 5556, 5590, 5622, 5628, 5629, 5637, 5640, 5652, 5653, 5656, 5666, 5669, 5691, 5708, 5726, 5746, 5757, 5764, 5775, 5811, 5813, 5850, 5858, 5908, 5977, 6004, 6045, 6076, 6108, 6109, 6121, 6125, 6127, 6150, 6187, 6197, 6222, 6224, 6249, 6272, 6296, 6298, 6321, 6324, 6326, 6365, 6416, 6418, 6436, 6439, 6442, 6443, 6471, 6492, 6499, 6524, 6543, 6548, 6557, 6558, 6572, 6575, 6590, 6681, 6686, 6698, 6740, 6742, 6761, 6777, 6781, 6807, 6811, 6831, 6933, 6938, 6961, 6988, 7021, 7033, 7049, 7062, 7083, 7129, 7131, 7132, 7142, 7156, 7158, 7193, 7204, 7244, 7251, 7278, 7339, 7341, 7343, 7395, 7398, 7470, 7473, 7496, 7529, 7535, 7549, 7553, 7556, 7596, 7610, 7635, 7651, 7701, 7703, 7707, 7719, 7757, 7767, 7793, 7797, 7827, 7834, 7848, 7850, 7876, 7906, 7938, 7943, 7957, 7958, 7975, 7978, 7980, 7981, 7993, 8009, 8022, 8032, 8041, 8045, 8051, 8126, 8132, 8167, 8250, 8268, 8325, 8344, 8363, 8368, 8387, 8411, 8415, 8455, 8457, 8502, 8524, 8580, 8582, 8600, 8614, 8628, 8635, 8636, 8639, 8661, 8689, 8698, 8703, 8705, 8715, 8724, 8726, 8738, 8743, 8744, 8746, 8770, 8802, 8858, 8896, 8920, 8944, 8963, 8974, 8999, 9005, 9007, 9037, 9060, 9072, 9098, 9102, 9126, 9133, 9175, 9191, 9193, 9196, 9204, 9213, 9233, 9244, 9246, 9254, 9272, 9290, 9312, 9324, 9336, 9338, 9339, 9347, 9363, 9401, 9440, 9455, 9469, 9475, 9489, 9495, 9531, 9539, 9568, 9577, 9588, 9630, 9644, 9661, 9678, 9689, 9692, 9693, 9700, 9704, 9710, 9718, 9727, 9732, 9815, 9831, 9851, 9853, 9923, 9927, 9928, 9932, 9956, 9974, 9998], "external_url": "https://colorpunx.io/colors?i=187&name=#28b143", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954377633440202753"}, "#4a1201": {"id": 188, "name": "#4a1201", "description": "#4a1201 is one of 222 colors in the cryptopunx color pallette. It is used by 530 unique punks", "hash": "47aef3e16fb73324aea73fc620ac74f7", "image": "https://gateway.pinata.cloud/ipfs/QmchjDVhqhSdFQTgKxU94KKLNkxXpp5oY1VHEixiRKm7f1?filename=colorpunx188.png", "punks": [10, 25, 31, 37, 42, 49, 66, 85, 89, 94, 114, 115, 184, 191, 200, 219, 232, 245, 247, 248, 253, 262, 316, 357, 374, 378, 417, 427, 428, 431, 443, 471, 474, 509, 532, 534, 545, 553, 579, 580, 585, 590, 597, 618, 670, 671, 675, 688, 737, 749, 759, 780, 822, 832, 835, 844, 861, 874, 876, 898, 912, 914, 931, 982, 1000, 1015, 1040, 1086, 1130, 1158, 1212, 1296, 1302, 1318, 1332, 1341, 1345, 1352, 1355, 1372, 1382, 1417, 1434, 1442, 1449, 1461, 1471, 1476, 1485, 1498, 1512, 1535, 1547, 1595, 1670, 1684, 1693, 1711, 1724, 1742, 1754, 1761, 1815, 1816, 1818, 1827, 1838, 1855, 1856, 1860, 1869, 1877, 1885, 1906, 1924, 1930, 1931, 1956, 1980, 2000, 2008, 2017, 2019, 2022, 2041, 2047, 2052, 2053, 2054, 2095, 2118, 2129, 2133, 2171, 2177, 2204, 2222, 2244, 2279, 2312, 2321, 2351, 2381, 2398, 2409, 2422, 2445, 2462, 2475, 2478, 2486, 2487, 2527, 2563, 2578, 2594, 2602, 2613, 2649, 2660, 2676, 2690, 2705, 2710, 2723, 2734, 2741, 2760, 2761, 2800, 2821, 2828, 2832, 2837, 2841, 2850, 2896, 2918, 2919, 2920, 2950, 2966, 2997, 3002, 3008, 3058, 3059, 3105, 3110, 3139, 3148, 3153, 3165, 3170, 3231, 3269, 3333, 3351, 3354, 3356, 3385, 3386, 3401, 3417, 3430, 3432, 3470, 3479, 3480, 3483, 3494, 3498, 3502, 3519, 3529, 3621, 3646, 3711, 3723, 3734, 3763, 3795, 3827, 3853, 3856, 3864, 3898, 3899, 3918, 3920, 3965, 3974, 3981, 4048, 4078, 4085, 4103, 4146, 4149, 4195, 4198, 4214, 4236, 4245, 4265, 4273, 4276, 4300, 4340, 4374, 4432, 4443, 4449, 4461, 4467, 4535, 4563, 4571, 4573, 4585, 4606, 4627, 4634, 4671, 4676, 4677, 4682, 4726, 4782, 4798, 4814, 4815, 4848, 4859, 4882, 4893, 4931, 4935, 4946, 4961, 4979, 4985, 5005, 5009, 5011, 5027, 5054, 5067, 5068, 5083, 5115, 5153, 5165, 5180, 5181, 5183, 5190, 5210, 5236, 5254, 5264, 5271, 5279, 5340, 5376, 5385, 5386, 5407, 5507, 5516, 5525, 5534, 5578, 5587, 5590, 5608, 5637, 5670, 5684, 5698, 5704, 5748, 5757, 5759, 5771, 5772, 5781, 5783, 5809, 5811, 5813, 5852, 5890, 5901, 5929, 5934, 5945, 5972, 5998, 6028, 6043, 6088, 6099, 6102, 6107, 6113, 6163, 6164, 6170, 6197, 6199, 6221, 6230, 6239, 6273, 6305, 6323, 6341, 6348, 6371, 6430, 6448, 6454, 6462, 6497, 6532, 6559, 6564, 6581, 6588, 6603, 6620, 6625, 6626, 6651, 6663, 6681, 6688, 6695, 6762, 6763, 6794, 6804, 6806, 6811, 6812, 6834, 6875, 6881, 6884, 6903, 6932, 6963, 6997, 6998, 7009, 7043, 7074, 7081, 7101, 7104, 7111, 7234, 7259, 7260, 7288, 7300, 7306, 7326, 7327, 7336, 7342, 7354, 7419, 7528, 7587, 7601, 7626, 7734, 7736, 7750, 7758, 7794, 7801, 7813, 7826, 7830, 7832, 7850, 7857, 7894, 7919, 7973, 7982, 8030, 8092, 8150, 8168, 8176, 8184, 8201, 8209, 8240, 8269, 8276, 8279, 8284, 8310, 8320, 8331, 8351, 8352, 8360, 8365, 8428, 8436, 8438, 8447, 8454, 8467, 8470, 8487, 8505, 8512, 8524, 8565, 8577, 8589, 8592, 8600, 8629, 8656, 8665, 8680, 8732, 8733, 8763, 8764, 8766, 8773, 8776, 8804, 8809, 8856, 8858, 8888, 8891, 8916, 8917, 8944, 8959, 8994, 9001, 9013, 9035, 9067, 9081, 9127, 9217, 9240, 9304, 9358, 9369, 9409, 9451, 9455, 9457, 9461, 9470, 9481, 9495, 9503, 9608, 9629, 9632, 9719, 9727, 9729, 9781, 9801, 9806, 9831, 9846, 9849, 9867, 9898, 9907, 9928, 9994, 9999], "external_url": "https://colorpunx.io/colors?i=188&name=#4a1201", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954378732951830529"}, "#690c45": {"id": 189, "name": "#690c45", "description": "#690c45 is one of 222 colors in the cryptopunx color pallette. It is used by 535 unique punks", "hash": "e1fccff70052d28ab30941ec69e19884", "image": "https://gateway.pinata.cloud/ipfs/QmWxT7ns1cEeCsXiuwVphYv9GgzrHMtKEJgqs7dYHYpdqp?filename=colorpunx189.png", "punks": [4, 13, 28, 48, 53, 84, 120, 125, 149, 175, 196, 205, 220, 240, 273, 294, 309, 339, 426, 447, 470, 506, 588, 610, 624, 631, 634, 673, 722, 768, 780, 821, 914, 925, 945, 985, 1028, 1034, 1059, 1075, 1085, 1121, 1125, 1132, 1183, 1239, 1258, 1260, 1271, 1282, 1284, 1325, 1328, 1374, 1393, 1419, 1421, 1432, 1449, 1474, 1477, 1486, 1498, 1545, 1651, 1683, 1686, 1697, 1720, 1741, 1742, 1743, 1744, 1764, 1810, 1858, 1878, 1909, 1932, 1949, 1959, 1998, 2000, 2053, 2090, 2093, 2150, 2163, 2185, 2240, 2268, 2294, 2310, 2341, 2342, 2345, 2430, 2449, 2451, 2459, 2523, 2533, 2576, 2607, 2615, 2623, 2642, 2650, 2654, 2687, 2700, 2723, 2737, 2749, 2778, 2802, 2831, 2897, 2898, 2930, 2952, 3009, 3061, 3072, 3124, 3137, 3139, 3148, 3194, 3217, 3220, 3222, 3233, 3264, 3291, 3351, 3358, 3360, 3375, 3386, 3387, 3395, 3406, 3417, 3427, 3430, 3436, 3464, 3465, 3467, 3478, 3488, 3513, 3578, 3603, 3618, 3623, 3658, 3691, 3706, 3715, 3722, 3739, 3767, 3825, 3831, 3835, 3860, 3873, 3888, 3896, 3941, 3999, 4013, 4026, 4045, 4052, 4054, 4084, 4096, 4138, 4150, 4152, 4179, 4199, 4210, 4212, 4215, 4220, 4229, 4238, 4256, 4275, 4276, 4312, 4331, 4341, 4345, 4360, 4407, 4421, 4425, 4426, 4440, 4462, 4508, 4539, 4550, 4566, 4571, 4581, 4586, 4599, 4600, 4603, 4606, 4611, 4617, 4620, 4625, 4696, 4727, 4753, 4759, 4763, 4772, 4790, 4811, 4823, 4829, 4852, 4883, 4890, 4901, 4907, 4909, 4924, 4925, 4949, 4956, 4979, 4985, 5009, 5017, 5071, 5126, 5127, 5133, 5158, 5170, 5176, 5178, 5187, 5203, 5221, 5229, 5234, 5242, 5272, 5319, 5377, 5390, 5391, 5411, 5422, 5452, 5453, 5459, 5484, 5496, 5500, 5507, 5519, 5523, 5539, 5542, 5570, 5571, 5589, 5633, 5659, 5665, 5676, 5695, 5707, 5744, 5758, 5823, 5830, 5897, 5900, 5912, 5918, 5924, 5932, 5949, 5969, 6011, 6063, 6098, 6149, 6189, 6195, 6200, 6202, 6252, 6261, 6290, 6296, 6319, 6333, 6337, 6353, 6356, 6391, 6399, 6408, 6440, 6454, 6470, 6523, 6598, 6623, 6642, 6684, 6687, 6695, 6702, 6713, 6716, 6725, 6726, 6749, 6759, 6771, 6778, 6789, 6827, 6861, 6887, 6892, 6895, 6905, 6920, 6927, 6975, 6982, 6991, 7030, 7065, 7085, 7097, 7133, 7149, 7151, 7157, 7175, 7176, 7213, 7226, 7267, 7282, 7283, 7314, 7330, 7334, 7383, 7385, 7389, 7436, 7443, 7468, 7472, 7477, 7490, 7513, 7527, 7534, 7541, 7551, 7552, 7585, 7599, 7609, 7621, 7625, 7632, 7634, 7652, 7686, 7713, 7724, 7763, 7815, 7816, 7823, 7826, 7830, 7832, 7838, 7864, 7903, 7918, 7921, 7940, 7946, 7968, 7971, 7991, 8015, 8020, 8027, 8028, 8043, 8044, 8060, 8090, 8118, 8158, 8166, 8174, 8184, 8193, 8205, 8255, 8265, 8289, 8302, 8309, 8327, 8338, 8344, 8359, 8372, 8391, 8394, 8400, 8405, 8445, 8459, 8507, 8521, 8592, 8598, 8603, 8613, 8617, 8650, 8679, 8681, 8691, 8693, 8696, 8759, 8781, 8783, 8804, 8832, 8833, 8854, 8862, 8870, 8872, 8897, 8911, 8913, 8914, 8919, 8929, 8964, 8965, 8967, 8992, 9006, 9031, 9059, 9066, 9067, 9080, 9082, 9096, 9111, 9125, 9138, 9144, 9158, 9180, 9181, 9202, 9205, 9220, 9226, 9239, 9265, 9270, 9298, 9316, 9318, 9343, 9378, 9383, 9387, 9390, 9425, 9432, 9434, 9441, 9455, 9501, 9522, 9523, 9549, 9559, 9598, 9668, 9686, 9701, 9728, 9750, 9766, 9778, 9786, 9793, 9794, 9803, 9817, 9818, 9829, 9889, 9920, 9931, 9945, 9953, 9968, 9972], "external_url": "https://colorpunx.io/colors?i=189&name=#690c45", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954379832463458305"}, "#8c0d5b": {"id": 190, "name": "#8c0d5b", "description": "#8c0d5b is one of 222 colors in the cryptopunx color pallette. It is used by 535 unique punks", "hash": "f1622140b63f5a49093ce94e41f3801b", "image": "https://gateway.pinata.cloud/ipfs/QmeKDGhe2EJ6n3P8jpYvqfMTBhVDM5jtMr2PKq5r6AJobE?filename=colorpunx190.png", "punks": [4, 13, 28, 48, 53, 84, 120, 125, 149, 175, 196, 205, 220, 240, 273, 294, 309, 339, 426, 447, 470, 506, 588, 610, 624, 631, 634, 673, 722, 768, 780, 821, 914, 925, 945, 985, 1028, 1034, 1059, 1075, 1085, 1121, 1125, 1132, 1183, 1239, 1258, 1260, 1271, 1282, 1284, 1325, 1328, 1374, 1393, 1419, 1421, 1432, 1449, 1474, 1477, 1486, 1498, 1545, 1651, 1683, 1686, 1697, 1720, 1741, 1742, 1743, 1744, 1764, 1810, 1858, 1878, 1909, 1932, 1949, 1959, 1998, 2000, 2053, 2090, 2093, 2150, 2163, 2185, 2240, 2268, 2294, 2310, 2341, 2342, 2345, 2430, 2449, 2451, 2459, 2523, 2533, 2576, 2607, 2615, 2623, 2642, 2650, 2654, 2687, 2700, 2723, 2737, 2749, 2778, 2802, 2831, 2897, 2898, 2930, 2952, 3009, 3061, 3072, 3124, 3137, 3139, 3148, 3194, 3217, 3220, 3222, 3233, 3264, 3291, 3351, 3358, 3360, 3375, 3386, 3387, 3395, 3406, 3417, 3427, 3430, 3436, 3464, 3465, 3467, 3478, 3488, 3513, 3578, 3603, 3618, 3623, 3658, 3691, 3706, 3715, 3722, 3739, 3767, 3825, 3831, 3835, 3860, 3873, 3888, 3896, 3941, 3999, 4013, 4026, 4045, 4052, 4054, 4084, 4096, 4138, 4150, 4152, 4179, 4199, 4210, 4212, 4215, 4220, 4229, 4238, 4256, 4275, 4276, 4312, 4331, 4341, 4345, 4360, 4407, 4421, 4425, 4426, 4440, 4462, 4508, 4539, 4550, 4566, 4571, 4581, 4586, 4599, 4600, 4603, 4606, 4611, 4617, 4620, 4625, 4696, 4727, 4753, 4759, 4763, 4772, 4790, 4811, 4823, 4829, 4852, 4883, 4890, 4901, 4907, 4909, 4924, 4925, 4949, 4956, 4979, 4985, 5009, 5017, 5071, 5126, 5127, 5133, 5158, 5170, 5176, 5178, 5187, 5203, 5221, 5229, 5234, 5242, 5272, 5319, 5377, 5390, 5391, 5411, 5422, 5452, 5453, 5459, 5484, 5496, 5500, 5507, 5519, 5523, 5539, 5542, 5570, 5571, 5589, 5633, 5659, 5665, 5676, 5695, 5707, 5744, 5758, 5823, 5830, 5897, 5900, 5912, 5918, 5924, 5932, 5949, 5969, 6011, 6063, 6098, 6149, 6189, 6195, 6200, 6202, 6252, 6261, 6290, 6296, 6319, 6333, 6337, 6353, 6356, 6391, 6399, 6408, 6440, 6454, 6470, 6523, 6598, 6623, 6642, 6684, 6687, 6695, 6702, 6713, 6716, 6725, 6726, 6749, 6759, 6771, 6778, 6789, 6827, 6861, 6887, 6892, 6895, 6905, 6920, 6927, 6975, 6982, 6991, 7030, 7065, 7085, 7097, 7133, 7149, 7151, 7157, 7175, 7176, 7213, 7226, 7267, 7282, 7283, 7314, 7330, 7334, 7383, 7385, 7389, 7436, 7443, 7468, 7472, 7477, 7490, 7513, 7527, 7534, 7541, 7551, 7552, 7585, 7599, 7609, 7621, 7625, 7632, 7634, 7652, 7686, 7713, 7724, 7763, 7815, 7816, 7823, 7826, 7830, 7832, 7838, 7864, 7903, 7918, 7921, 7940, 7946, 7968, 7971, 7991, 8015, 8020, 8027, 8028, 8043, 8044, 8060, 8090, 8118, 8158, 8166, 8174, 8184, 8193, 8205, 8255, 8265, 8289, 8302, 8309, 8327, 8338, 8344, 8359, 8372, 8391, 8394, 8400, 8405, 8445, 8459, 8507, 8521, 8592, 8598, 8603, 8613, 8617, 8650, 8679, 8681, 8691, 8693, 8696, 8759, 8781, 8783, 8804, 8832, 8833, 8854, 8862, 8870, 8872, 8897, 8911, 8913, 8914, 8919, 8929, 8964, 8965, 8967, 8992, 9006, 9031, 9059, 9066, 9067, 9080, 9082, 9096, 9111, 9125, 9138, 9144, 9158, 9180, 9181, 9202, 9205, 9220, 9226, 9239, 9265, 9270, 9298, 9316, 9318, 9343, 9378, 9383, 9387, 9390, 9425, 9432, 9434, 9441, 9455, 9501, 9522, 9523, 9549, 9559, 9598, 9668, 9686, 9701, 9728, 9750, 9766, 9778, 9786, 9793, 9794, 9803, 9817, 9818, 9829, 9889, 9920, 9931, 9945, 9953, 9968, 9972], "external_url": "https://colorpunx.io/colors?i=190&name=#8c0d5b", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954380931975086081"}, "#ad2160": {"id": 191, "name": "#ad2160", "description": "#ad2160 is one of 222 colors in the cryptopunx color pallette. It is used by 535 unique punks", "hash": "0ca0da7473e872f8326e7ac9982d60cd", "image": "https://gateway.pinata.cloud/ipfs/QmNmpBDkeV1yCWFnVf8x2P8Q258WY223eyfHmKF3Pu9xQZ?filename=colorpunx191.png", "punks": [4, 13, 28, 48, 53, 84, 120, 125, 149, 175, 196, 205, 220, 240, 273, 294, 309, 339, 426, 447, 470, 506, 588, 610, 624, 631, 634, 673, 722, 768, 780, 821, 914, 925, 945, 985, 1028, 1034, 1059, 1075, 1085, 1121, 1125, 1132, 1183, 1239, 1258, 1260, 1271, 1282, 1284, 1325, 1328, 1374, 1393, 1419, 1421, 1432, 1449, 1474, 1477, 1486, 1498, 1545, 1651, 1683, 1686, 1697, 1720, 1741, 1742, 1743, 1744, 1764, 1810, 1858, 1878, 1909, 1932, 1949, 1959, 1998, 2000, 2053, 2090, 2093, 2150, 2163, 2185, 2240, 2268, 2294, 2310, 2341, 2342, 2345, 2430, 2449, 2451, 2459, 2523, 2533, 2576, 2607, 2615, 2623, 2642, 2650, 2654, 2687, 2700, 2723, 2737, 2749, 2778, 2802, 2831, 2897, 2898, 2930, 2952, 3009, 3061, 3072, 3124, 3137, 3139, 3148, 3194, 3217, 3220, 3222, 3233, 3264, 3291, 3351, 3358, 3360, 3375, 3386, 3387, 3395, 3406, 3417, 3427, 3430, 3436, 3464, 3465, 3467, 3478, 3488, 3513, 3578, 3603, 3618, 3623, 3658, 3691, 3706, 3715, 3722, 3739, 3767, 3825, 3831, 3835, 3860, 3873, 3888, 3896, 3941, 3999, 4013, 4026, 4045, 4052, 4054, 4084, 4096, 4138, 4150, 4152, 4179, 4199, 4210, 4212, 4215, 4220, 4229, 4238, 4256, 4275, 4276, 4312, 4331, 4341, 4345, 4360, 4407, 4421, 4425, 4426, 4440, 4462, 4508, 4539, 4550, 4566, 4571, 4581, 4586, 4599, 4600, 4603, 4606, 4611, 4617, 4620, 4625, 4696, 4727, 4753, 4759, 4763, 4772, 4790, 4811, 4823, 4829, 4852, 4883, 4890, 4901, 4907, 4909, 4924, 4925, 4949, 4956, 4979, 4985, 5009, 5017, 5071, 5126, 5127, 5133, 5158, 5170, 5176, 5178, 5187, 5203, 5221, 5229, 5234, 5242, 5272, 5319, 5377, 5390, 5391, 5411, 5422, 5452, 5453, 5459, 5484, 5496, 5500, 5507, 5519, 5523, 5539, 5542, 5570, 5571, 5589, 5633, 5659, 5665, 5676, 5695, 5707, 5744, 5758, 5823, 5830, 5897, 5900, 5912, 5918, 5924, 5932, 5949, 5969, 6011, 6063, 6098, 6149, 6189, 6195, 6200, 6202, 6252, 6261, 6290, 6296, 6319, 6333, 6337, 6353, 6356, 6391, 6399, 6408, 6440, 6454, 6470, 6523, 6598, 6623, 6642, 6684, 6687, 6695, 6702, 6713, 6716, 6725, 6726, 6749, 6759, 6771, 6778, 6789, 6827, 6861, 6887, 6892, 6895, 6905, 6920, 6927, 6975, 6982, 6991, 7030, 7065, 7085, 7097, 7133, 7149, 7151, 7157, 7175, 7176, 7213, 7226, 7267, 7282, 7283, 7314, 7330, 7334, 7383, 7385, 7389, 7436, 7443, 7468, 7472, 7477, 7490, 7513, 7527, 7534, 7541, 7551, 7552, 7585, 7599, 7609, 7621, 7625, 7632, 7634, 7652, 7686, 7713, 7724, 7763, 7815, 7816, 7823, 7826, 7830, 7832, 7838, 7864, 7903, 7918, 7921, 7940, 7946, 7968, 7971, 7991, 8015, 8020, 8027, 8028, 8043, 8044, 8060, 8090, 8118, 8158, 8166, 8174, 8184, 8193, 8205, 8255, 8265, 8289, 8302, 8309, 8327, 8338, 8344, 8359, 8372, 8391, 8394, 8400, 8405, 8445, 8459, 8507, 8521, 8592, 8598, 8603, 8613, 8617, 8650, 8679, 8681, 8691, 8693, 8696, 8759, 8781, 8783, 8804, 8832, 8833, 8854, 8862, 8870, 8872, 8897, 8911, 8913, 8914, 8919, 8929, 8964, 8965, 8967, 8992, 9006, 9031, 9059, 9066, 9067, 9080, 9082, 9096, 9111, 9125, 9138, 9144, 9158, 9180, 9181, 9202, 9205, 9220, 9226, 9239, 9265, 9270, 9298, 9316, 9318, 9343, 9378, 9383, 9387, 9390, 9425, 9432, 9434, 9441, 9455, 9501, 9522, 9523, 9549, 9559, 9598, 9668, 9686, 9701, 9728, 9750, 9766, 9778, 9786, 9793, 9794, 9803, 9817, 9818, 9829, 9889, 9920, 9931, 9945, 9953, 9968, 9972], "external_url": "https://colorpunx.io/colors?i=191&name=#ad2160", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954382031486713857"}, "#596570": {"id": 192, "name": "#596570", "description": "#596570 is one of 222 colors in the cryptopunx color pallette. It is used by 535 unique punks", "hash": "5ac3d2388d1b1f2409f2918abdc4f3e9", "image": "https://gateway.pinata.cloud/ipfs/QmQuXYDEMxPQ7v2DXQvC1tkhs8WfpmfsnrLFqZsDjmmAFr?filename=colorpunx192.png", "punks": [19, 29, 35, 112, 129, 138, 143, 162, 174, 308, 328, 332, 347, 425, 431, 536, 555, 620, 622, 623, 645, 664, 691, 705, 764, 766, 783, 790, 903, 904, 922, 987, 993, 995, 997, 998, 1016, 1029, 1055, 1067, 1117, 1167, 1198, 1222, 1235, 1309, 1336, 1341, 1352, 1363, 1366, 1372, 1397, 1430, 1503, 1508, 1570, 1586, 1657, 1679, 1687, 1690, 1701, 1751, 1780, 1790, 1795, 1826, 1831, 1832, 1836, 1856, 1895, 1905, 1908, 1969, 1973, 2003, 2005, 2026, 2029, 2065, 2071, 2094, 2161, 2184, 2192, 2206, 2220, 2221, 2223, 2226, 2230, 2285, 2296, 2299, 2326, 2331, 2366, 2374, 2395, 2431, 2435, 2443, 2448, 2452, 2469, 2472, 2483, 2492, 2497, 2518, 2520, 2538, 2598, 2603, 2619, 2631, 2653, 2663, 2673, 2701, 2710, 2728, 2786, 2789, 2796, 2797, 2799, 2819, 2832, 2840, 2871, 2936, 2965, 2989, 2993, 3008, 3014, 3026, 3045, 3050, 3064, 3067, 3093, 3104, 3119, 3173, 3181, 3186, 3196, 3200, 3208, 3239, 3250, 3300, 3302, 3310, 3316, 3371, 3384, 3390, 3394, 3402, 3420, 3421, 3440, 3486, 3498, 3540, 3585, 3589, 3625, 3679, 3680, 3781, 3785, 3786, 3806, 3819, 3824, 3833, 3864, 3874, 3890, 3921, 3945, 3955, 3976, 4051, 4067, 4070, 4090, 4101, 4136, 4147, 4149, 4162, 4184, 4189, 4234, 4244, 4259, 4287, 4330, 4356, 4362, 4371, 4375, 4384, 4432, 4451, 4453, 4470, 4481, 4483, 4485, 4519, 4592, 4642, 4653, 4663, 4672, 4678, 4703, 4713, 4732, 4737, 4752, 4761, 4783, 4809, 4820, 4837, 4845, 4856, 4879, 4906, 4995, 5004, 5010, 5030, 5039, 5072, 5077, 5104, 5107, 5109, 5186, 5241, 5247, 5261, 5268, 5288, 5290, 5298, 5314, 5315, 5330, 5341, 5346, 5350, 5357, 5365, 5413, 5420, 5501, 5540, 5553, 5593, 5610, 5611, 5662, 5663, 5737, 5741, 5761, 5769, 5776, 5806, 5840, 5865, 5891, 5892, 5921, 5958, 5978, 5993, 6007, 6013, 6020, 6022, 6031, 6036, 6056, 6066, 6068, 6083, 6103, 6113, 6131, 6138, 6153, 6161, 6162, 6198, 6203, 6213, 6226, 6269, 6306, 6309, 6310, 6339, 6398, 6409, 6437, 6443, 6467, 6469, 6479, 6504, 6506, 6527, 6597, 6601, 6605, 6618, 6624, 6635, 6655, 6668, 6678, 6691, 6697, 6712, 6730, 6809, 6810, 6823, 6835, 6846, 6851, 6854, 6873, 6888, 6899, 6974, 6983, 6995, 7007, 7037, 7081, 7088, 7102, 7121, 7163, 7177, 7182, 7187, 7194, 7205, 7221, 7263, 7271, 7274, 7275, 7288, 7290, 7296, 7302, 7307, 7315, 7317, 7320, 7363, 7390, 7420, 7422, 7442, 7465, 7487, 7537, 7542, 7543, 7557, 7566, 7567, 7575, 7576, 7589, 7598, 7614, 7628, 7638, 7671, 7689, 7718, 7725, 7734, 7737, 7741, 7756, 7765, 7770, 7781, 7801, 7806, 7807, 7821, 7859, 7874, 7895, 7896, 7902, 7909, 7912, 7963, 8047, 8073, 8079, 8086, 8093, 8119, 8121, 8159, 8163, 8246, 8259, 8291, 8300, 8304, 8308, 8335, 8378, 8429, 8436, 8444, 8454, 8474, 8500, 8513, 8514, 8543, 8559, 8560, 8581, 8640, 8645, 8647, 8649, 8651, 8661, 8684, 8710, 8713, 8714, 8717, 8741, 8744, 8753, 8755, 8765, 8767, 8778, 8790, 8794, 8813, 8849, 8852, 8865, 8866, 8876, 8887, 8907, 8923, 8924, 8925, 8934, 8937, 8954, 8958, 8978, 8982, 9016, 9032, 9034, 9040, 9054, 9061, 9073, 9083, 9086, 9147, 9156, 9182, 9216, 9228, 9260, 9308, 9321, 9328, 9330, 9333, 9376, 9403, 9415, 9497, 9564, 9580, 9593, 9602, 9603, 9611, 9637, 9647, 9649, 9665, 9677, 9685, 9687, 9745, 9771, 9795, 9814, 9837, 9840, 9856, 9857, 9870, 9883, 9896, 9930, 9957, 9990], "external_url": "https://colorpunx.io/colors?i=192&name=#596570", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954383130998341633"}, "#a58d8d": {"id": 193, "name": "#a58d8d", "description": "#a58d8d is one of 222 colors in the cryptopunx color pallette. It is used by 540 unique punks", "hash": "cde56c33faa81d2de6a348e0677bbf02", "image": "https://gateway.pinata.cloud/ipfs/QmWsM41kB3Shii4jG3nYVYfs95HTDX1pwa86YBinnT1Y86?filename=colorpunx193.png", "punks": [59, 80, 82, 113, 126, 133, 182, 233, 246, 252, 263, 264, 278, 280, 284, 286, 288, 314, 318, 324, 327, 331, 354, 359, 364, 410, 413, 420, 434, 452, 475, 514, 515, 521, 526, 558, 570, 576, 603, 614, 627, 644, 647, 658, 659, 662, 720, 725, 753, 760, 762, 779, 802, 816, 826, 831, 855, 863, 893, 894, 911, 934, 937, 951, 961, 963, 971, 975, 978, 994, 1002, 1011, 1020, 1045, 1082, 1087, 1092, 1107, 1113, 1118, 1174, 1187, 1192, 1197, 1208, 1218, 1225, 1241, 1253, 1278, 1287, 1304, 1323, 1358, 1426, 1447, 1462, 1519, 1529, 1530, 1573, 1591, 1597, 1612, 1630, 1665, 1674, 1680, 1681, 1689, 1708, 1716, 1718, 1756, 1771, 1776, 1794, 1817, 1843, 1854, 1873, 1884, 1892, 1920, 1966, 1993, 2002, 2013, 2063, 2077, 2099, 2116, 2122, 2169, 2176, 2214, 2239, 2314, 2327, 2330, 2337, 2357, 2367, 2393, 2394, 2473, 2477, 2495, 2499, 2508, 2513, 2514, 2530, 2573, 2582, 2632, 2638, 2640, 2667, 2699, 2704, 2714, 2759, 2824, 2833, 2851, 2882, 2902, 2914, 2957, 3018, 3028, 3038, 3053, 3060, 3089, 3111, 3131, 3145, 3151, 3158, 3163, 3223, 3234, 3237, 3251, 3256, 3273, 3282, 3285, 3307, 3317, 3327, 3337, 3391, 3405, 3412, 3455, 3457, 3463, 3524, 3528, 3544, 3574, 3600, 3607, 3631, 3687, 3697, 3759, 3768, 3771, 3772, 3814, 3815, 3829, 3837, 3839, 3877, 3889, 3904, 3923, 3930, 3948, 3953, 3963, 3978, 3993, 3998, 4012, 4021, 4049, 4055, 4077, 4109, 4114, 4124, 4128, 4130, 4142, 4159, 4163, 4164, 4203, 4211, 4240, 4253, 4263, 4264, 4269, 4304, 4313, 4402, 4405, 4412, 4415, 4471, 4473, 4495, 4511, 4520, 4530, 4564, 4579, 4594, 4608, 4619, 4664, 4679, 4699, 4706, 4754, 4836, 4885, 4910, 4928, 4934, 4936, 4937, 4941, 4945, 4960, 4975, 4986, 5007, 5085, 5205, 5214, 5225, 5297, 5310, 5318, 5344, 5375, 5394, 5399, 5434, 5499, 5514, 5531, 5547, 5576, 5579, 5581, 5616, 5630, 5651, 5677, 5708, 5713, 5724, 5749, 5785, 5814, 5825, 5829, 5853, 5859, 5881, 5908, 5920, 5925, 5951, 5981, 5990, 6037, 6051, 6084, 6092, 6097, 6115, 6134, 6139, 6190, 6219, 6220, 6267, 6307, 6312, 6326, 6357, 6363, 6378, 6383, 6406, 6441, 6444, 6449, 6450, 6481, 6487, 6501, 6502, 6510, 6516, 6546, 6553, 6594, 6632, 6637, 6659, 6689, 6728, 6733, 6737, 6740, 6751, 6781, 6800, 6801, 6813, 6840, 6842, 6857, 6865, 6874, 6928, 6930, 6958, 6966, 6973, 6981, 7004, 7031, 7047, 7057, 7070, 7114, 7123, 7147, 7169, 7192, 7217, 7218, 7233, 7241, 7258, 7276, 7287, 7319, 7321, 7348, 7361, 7375, 7381, 7402, 7409, 7421, 7440, 7441, 7446, 7474, 7475, 7501, 7514, 7581, 7588, 7590, 7619, 7662, 7668, 7677, 7678, 7690, 7729, 7731, 7777, 7863, 7865, 7877, 7883, 7887, 7905, 8109, 8120, 8133, 8134, 8162, 8165, 8171, 8175, 8183, 8214, 8264, 8267, 8274, 8293, 8296, 8315, 8347, 8350, 8355, 8362, 8414, 8417, 8440, 8443, 8456, 8482, 8549, 8583, 8593, 8597, 8634, 8648, 8652, 8654, 8658, 8678, 8688, 8708, 8735, 8750, 8769, 8777, 8815, 8818, 8859, 8878, 8979, 9003, 9029, 9033, 9047, 9048, 9058, 9074, 9077, 9092, 9113, 9154, 9164, 9174, 9185, 9194, 9212, 9215, 9230, 9278, 9295, 9299, 9320, 9332, 9348, 9365, 9416, 9418, 9426, 9452, 9453, 9471, 9491, 9513, 9514, 9520, 9538, 9541, 9607, 9627, 9635, 9682, 9702, 9714, 9718, 9759, 9775, 9783, 9799, 9807, 9808, 9822, 9862, 9873, 9876, 9877, 9895, 9921, 9922, 9943, 9978], "external_url": "https://colorpunx.io/colors?i=193&name=#a58d8d", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954384230509969409"}, "#c9b2b2": {"id": 194, "name": "#c9b2b2", "description": "#c9b2b2 is one of 222 colors in the cryptopunx color pallette. It is used by 540 unique punks", "hash": "4b1526ad7f099535df5336afd926ed33", "image": "https://gateway.pinata.cloud/ipfs/QmT1X5bFvwJb8HBkdauWDZy8FEiymUq36FLLjayxnahqnp?filename=colorpunx194.png", "punks": [59, 80, 82, 113, 126, 133, 182, 233, 246, 252, 263, 264, 278, 280, 284, 286, 288, 314, 318, 324, 327, 331, 354, 359, 364, 410, 413, 420, 434, 452, 475, 514, 515, 521, 526, 558, 570, 576, 603, 614, 627, 644, 647, 658, 659, 662, 720, 725, 753, 760, 762, 779, 802, 816, 826, 831, 855, 863, 893, 894, 911, 934, 937, 951, 961, 963, 971, 975, 978, 994, 1002, 1011, 1020, 1045, 1082, 1087, 1092, 1107, 1113, 1118, 1174, 1187, 1192, 1197, 1208, 1218, 1225, 1241, 1253, 1278, 1287, 1304, 1323, 1358, 1426, 1447, 1462, 1519, 1529, 1530, 1573, 1591, 1597, 1612, 1630, 1665, 1674, 1680, 1681, 1689, 1708, 1716, 1718, 1756, 1771, 1776, 1794, 1817, 1843, 1854, 1873, 1884, 1892, 1920, 1966, 1993, 2002, 2013, 2063, 2077, 2099, 2116, 2122, 2169, 2176, 2214, 2239, 2314, 2327, 2330, 2337, 2357, 2367, 2393, 2394, 2473, 2477, 2495, 2499, 2508, 2513, 2514, 2530, 2573, 2582, 2632, 2638, 2640, 2667, 2699, 2704, 2714, 2759, 2824, 2833, 2851, 2882, 2902, 2914, 2957, 3018, 3028, 3038, 3053, 3060, 3089, 3111, 3131, 3145, 3151, 3158, 3163, 3223, 3234, 3237, 3251, 3256, 3273, 3282, 3285, 3307, 3317, 3327, 3337, 3391, 3405, 3412, 3455, 3457, 3463, 3524, 3528, 3544, 3574, 3600, 3607, 3631, 3687, 3697, 3759, 3768, 3771, 3772, 3814, 3815, 3829, 3837, 3839, 3877, 3889, 3904, 3923, 3930, 3948, 3953, 3963, 3978, 3993, 3998, 4012, 4021, 4049, 4055, 4077, 4109, 4114, 4124, 4128, 4130, 4142, 4159, 4163, 4164, 4203, 4211, 4240, 4253, 4263, 4264, 4269, 4304, 4313, 4402, 4405, 4412, 4415, 4471, 4473, 4495, 4511, 4520, 4530, 4564, 4579, 4594, 4608, 4619, 4664, 4679, 4699, 4706, 4754, 4836, 4885, 4910, 4928, 4934, 4936, 4937, 4941, 4945, 4960, 4975, 4986, 5007, 5085, 5205, 5214, 5225, 5297, 5310, 5318, 5344, 5375, 5394, 5399, 5434, 5499, 5514, 5531, 5547, 5576, 5579, 5581, 5616, 5630, 5651, 5677, 5708, 5713, 5724, 5749, 5785, 5814, 5825, 5829, 5853, 5859, 5881, 5908, 5920, 5925, 5951, 5981, 5990, 6037, 6051, 6084, 6092, 6097, 6115, 6134, 6139, 6190, 6219, 6220, 6267, 6307, 6312, 6326, 6357, 6363, 6378, 6383, 6406, 6441, 6444, 6449, 6450, 6481, 6487, 6501, 6502, 6510, 6516, 6546, 6553, 6594, 6632, 6637, 6659, 6689, 6728, 6733, 6737, 6740, 6751, 6781, 6800, 6801, 6813, 6840, 6842, 6857, 6865, 6874, 6928, 6930, 6958, 6966, 6973, 6981, 7004, 7031, 7047, 7057, 7070, 7114, 7123, 7147, 7169, 7192, 7217, 7218, 7233, 7241, 7258, 7276, 7287, 7319, 7321, 7348, 7361, 7375, 7381, 7402, 7409, 7421, 7440, 7441, 7446, 7474, 7475, 7501, 7514, 7581, 7588, 7590, 7619, 7662, 7668, 7677, 7678, 7690, 7729, 7731, 7777, 7863, 7865, 7877, 7883, 7887, 7905, 8109, 8120, 8133, 8134, 8162, 8165, 8171, 8175, 8183, 8214, 8264, 8267, 8274, 8293, 8296, 8315, 8347, 8350, 8355, 8362, 8414, 8417, 8440, 8443, 8456, 8482, 8549, 8583, 8593, 8597, 8634, 8648, 8652, 8654, 8658, 8678, 8688, 8708, 8735, 8750, 8769, 8777, 8815, 8818, 8859, 8878, 8979, 9003, 9029, 9033, 9047, 9048, 9058, 9074, 9077, 9092, 9113, 9154, 9164, 9174, 9185, 9194, 9212, 9215, 9230, 9278, 9295, 9299, 9320, 9332, 9348, 9365, 9416, 9418, 9426, 9452, 9453, 9471, 9491, 9513, 9514, 9520, 9538, 9541, 9607, 9627, 9635, 9682, 9702, 9714, 9718, 9759, 9775, 9783, 9799, 9807, 9808, 9822, 9862, 9873, 9876, 9877, 9895, 9921, 9922, 9943, 9978], "external_url": "https://colorpunx.io/colors?i=194&name=#c9b2b2", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954384230509969409"}, "#5f1d09": {"id": 195, "name": "#5f1d09", "description": "#5f1d09 is one of 222 colors in the cryptopunx color pallette. It is used by 553 unique punks", "hash": "8a89a186e0cafd0969843d2a7e5b342e", "image": "https://gateway.pinata.cloud/ipfs/QmWtdt23ywbiVDXbsVEaVPgQKQAfGDmhYB6A9R1WVWvne6?filename=colorpunx195.png", "punks": [0, 5, 7, 26, 29, 36, 43, 65, 70, 100, 120, 123, 127, 164, 210, 213, 215, 227, 231, 238, 240, 250, 270, 289, 290, 329, 345, 350, 352, 371, 383, 385, 396, 405, 419, 438, 446, 488, 500, 501, 529, 530, 547, 559, 566, 573, 581, 593, 611, 620, 631, 653, 668, 691, 695, 706, 714, 739, 818, 834, 858, 875, 886, 888, 917, 929, 952, 976, 984, 985, 1037, 1050, 1070, 1076, 1083, 1141, 1148, 1151, 1161, 1199, 1205, 1224, 1232, 1272, 1293, 1329, 1333, 1354, 1369, 1390, 1433, 1438, 1444, 1467, 1475, 1477, 1491, 1496, 1523, 1552, 1563, 1582, 1619, 1620, 1669, 1672, 1700, 1710, 1713, 1747, 1758, 1775, 1780, 1793, 1821, 1859, 1861, 1872, 1888, 1910, 1917, 1944, 1951, 1959, 1977, 1979, 1986, 1994, 1996, 2016, 2023, 2030, 2078, 2092, 2110, 2152, 2164, 2174, 2186, 2189, 2201, 2206, 2207, 2217, 2232, 2283, 2284, 2286, 2334, 2359, 2370, 2371, 2372, 2391, 2407, 2425, 2461, 2481, 2488, 2496, 2502, 2517, 2583, 2589, 2596, 2598, 2601, 2605, 2627, 2643, 2646, 2659, 2682, 2686, 2698, 2703, 2707, 2725, 2755, 2775, 2781, 2787, 2793, 2795, 2822, 2849, 2857, 2860, 2867, 2884, 2941, 2972, 2981, 3005, 3030, 3031, 3044, 3050, 3096, 3102, 3124, 3162, 3176, 3187, 3207, 3227, 3236, 3240, 3264, 3275, 3278, 3294, 3314, 3318, 3334, 3338, 3340, 3343, 3347, 3377, 3408, 3413, 3418, 3451, 3488, 3492, 3512, 3513, 3534, 3541, 3542, 3547, 3556, 3560, 3567, 3584, 3604, 3615, 3637, 3656, 3692, 3712, 3747, 3773, 3785, 3791, 3796, 3824, 3841, 3859, 3894, 3919, 3951, 3970, 4010, 4080, 4106, 4132, 4134, 4139, 4151, 4208, 4213, 4218, 4225, 4227, 4239, 4243, 4281, 4288, 4347, 4362, 4366, 4410, 4416, 4418, 4456, 4468, 4489, 4517, 4616, 4621, 4656, 4675, 4687, 4693, 4729, 4740, 4769, 4778, 4779, 4784, 4835, 4849, 4857, 4880, 4895, 4898, 4929, 4954, 4963, 4981, 5026, 5038, 5064, 5069, 5075, 5105, 5186, 5203, 5248, 5301, 5330, 5333, 5343, 5345, 5361, 5389, 5405, 5426, 5438, 5492, 5508, 5522, 5540, 5564, 5567, 5605, 5607, 5611, 5636, 5646, 5652, 5668, 5673, 5693, 5717, 5719, 5728, 5744, 5778, 5808, 5815, 5821, 5843, 5856, 5860, 5869, 5895, 5898, 5904, 5906, 5927, 5947, 5980, 5983, 6023, 6029, 6030, 6067, 6158, 6169, 6175, 6182, 6186, 6201, 6227, 6242, 6270, 6272, 6277, 6278, 6285, 6288, 6292, 6302, 6320, 6386, 6394, 6402, 6405, 6458, 6460, 6495, 6534, 6537, 6563, 6566, 6568, 6584, 6640, 6706, 6711, 6712, 6714, 6720, 6759, 6766, 6780, 6793, 6814, 6825, 6864, 6870, 6885, 6909, 6933, 6946, 6954, 6970, 7022, 7063, 7066, 7069, 7087, 7090, 7141, 7142, 7174, 7180, 7211, 7219, 7289, 7305, 7322, 7344, 7366, 7390, 7395, 7447, 7448, 7459, 7465, 7469, 7493, 7503, 7511, 7530, 7534, 7556, 7562, 7563, 7603, 7701, 7792, 7798, 7803, 7811, 7849, 7852, 7855, 7860, 7899, 7916, 7924, 7930, 7943, 8001, 8024, 8032, 8034, 8054, 8076, 8091, 8128, 8148, 8149, 8167, 8221, 8224, 8228, 8252, 8254, 8255, 8314, 8321, 8356, 8397, 8420, 8424, 8437, 8566, 8638, 8639, 8662, 8723, 8742, 8744, 8755, 8765, 8782, 8787, 8793, 8829, 8846, 8905, 8907, 8942, 8964, 8973, 8975, 8976, 8989, 9043, 9052, 9111, 9125, 9149, 9153, 9182, 9205, 9224, 9229, 9237, 9258, 9261, 9303, 9307, 9313, 9334, 9366, 9367, 9370, 9423, 9428, 9446, 9489, 9531, 9545, 9563, 9577, 9581, 9593, 9642, 9661, 9674, 9693, 9742, 9746, 9747, 9757, 9758, 9763, 9796, 9825, 9834, 9851, 9852, 9864, 9875, 9917, 9938, 9974], "external_url": "https://colorpunx.io/colors?i=195&name=#5f1d09", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954385330021597185"}, "#e22626": {"id": 196, "name": "#e22626", "description": "#e22626 is one of 222 colors in the cryptopunx color pallette. It is used by 561 unique punks", "hash": "cddbb95e2b0870c64954c12ab9d0a145", "image": "https://gateway.pinata.cloud/ipfs/QmU9jXHdXHFhSFDaznpQKaBXSmnAmWDGwHYFaDSfXi5KLY?filename=colorpunx196.png", "punks": [20, 28, 36, 70, 85, 104, 114, 186, 204, 212, 213, 223, 270, 276, 277, 297, 301, 303, 327, 420, 437, 475, 487, 495, 544, 557, 584, 600, 602, 624, 679, 705, 724, 766, 770, 795, 800, 832, 833, 837, 906, 921, 966, 971, 972, 988, 992, 1049, 1062, 1065, 1158, 1184, 1193, 1205, 1222, 1247, 1260, 1267, 1270, 1284, 1301, 1332, 1348, 1353, 1442, 1454, 1479, 1498, 1499, 1521, 1529, 1536, 1541, 1572, 1573, 1586, 1593, 1649, 1669, 1681, 1693, 1706, 1755, 1768, 1784, 1801, 1817, 1837, 1859, 1910, 1928, 1930, 1961, 1970, 1974, 1978, 1979, 1989, 1993, 2006, 2008, 2028, 2030, 2042, 2067, 2085, 2113, 2125, 2136, 2156, 2157, 2171, 2183, 2198, 2208, 2260, 2284, 2288, 2304, 2313, 2335, 2355, 2380, 2393, 2397, 2417, 2446, 2453, 2461, 2505, 2514, 2517, 2551, 2583, 2602, 2610, 2634, 2658, 2661, 2735, 2780, 2781, 2784, 2857, 2874, 2877, 2936, 2962, 2974, 2984, 3006, 3015, 3029, 3051, 3058, 3117, 3133, 3134, 3164, 3183, 3186, 3210, 3220, 3250, 3268, 3284, 3290, 3313, 3324, 3332, 3340, 3344, 3393, 3405, 3409, 3431, 3456, 3471, 3472, 3477, 3488, 3491, 3515, 3520, 3522, 3542, 3545, 3550, 3572, 3597, 3639, 3645, 3648, 3674, 3715, 3734, 3744, 3750, 3752, 3757, 3765, 3813, 3819, 3836, 3839, 3864, 3919, 3934, 3946, 3950, 3957, 3981, 3994, 3995, 4051, 4071, 4074, 4089, 4107, 4135, 4139, 4159, 4170, 4187, 4206, 4232, 4243, 4259, 4304, 4315, 4339, 4340, 4353, 4364, 4366, 4377, 4401, 4413, 4440, 4503, 4544, 4548, 4553, 4571, 4574, 4580, 4586, 4588, 4634, 4637, 4671, 4681, 4695, 4701, 4779, 4790, 4803, 4805, 4814, 4839, 4847, 4857, 4869, 4870, 4872, 4907, 4920, 4931, 4934, 4957, 4983, 4996, 5012, 5036, 5062, 5067, 5102, 5110, 5115, 5129, 5137, 5151, 5167, 5180, 5187, 5208, 5215, 5224, 5234, 5261, 5307, 5323, 5330, 5332, 5358, 5385, 5412, 5436, 5505, 5547, 5582, 5592, 5596, 5657, 5671, 5675, 5680, 5681, 5689, 5697, 5704, 5731, 5758, 5759, 5779, 5783, 5823, 5847, 5852, 5873, 5900, 5914, 5941, 5950, 5990, 6000, 6022, 6025, 6037, 6038, 6041, 6066, 6067, 6074, 6078, 6099, 6102, 6107, 6119, 6161, 6175, 6186, 6195, 6219, 6235, 6267, 6272, 6294, 6298, 6304, 6309, 6347, 6408, 6411, 6469, 6483, 6500, 6534, 6541, 6558, 6570, 6582, 6609, 6628, 6642, 6645, 6649, 6672, 6696, 6718, 6733, 6734, 6736, 6757, 6760, 6767, 6799, 6811, 6821, 6863, 6880, 6885, 6900, 6910, 6929, 6939, 6943, 6970, 7023, 7038, 7039, 7059, 7060, 7066, 7079, 7091, 7095, 7102, 7103, 7109, 7136, 7137, 7148, 7209, 7210, 7222, 7231, 7250, 7252, 7278, 7295, 7310, 7314, 7352, 7359, 7371, 7373, 7401, 7419, 7447, 7448, 7451, 7488, 7531, 7534, 7536, 7553, 7555, 7603, 7617, 7632, 7682, 7683, 7708, 7727, 7729, 7735, 7750, 7761, 7763, 7768, 7796, 7818, 7841, 7856, 7866, 7882, 7897, 7903, 7904, 7907, 7920, 7940, 8016, 8018, 8025, 8038, 8068, 8114, 8126, 8147, 8165, 8167, 8168, 8169, 8190, 8195, 8204, 8210, 8217, 8227, 8229, 8235, 8252, 8261, 8264, 8269, 8273, 8298, 8337, 8347, 8349, 8353, 8382, 8386, 8393, 8443, 8473, 8477, 8497, 8504, 8523, 8563, 8599, 8635, 8665, 8673, 8699, 8786, 8793, 8796, 8800, 8829, 8879, 8888, 8930, 8944, 8947, 8977, 9021, 9038, 9051, 9099, 9131, 9141, 9150, 9176, 9183, 9196, 9229, 9239, 9273, 9285, 9297, 9315, 9316, 9349, 9359, 9389, 9406, 9409, 9412, 9418, 9463, 9482, 9532, 9543, 9545, 9551, 9562, 9563, 9569, 9591, 9606, 9640, 9645, 9654, 9670, 9695, 9696, 9711, 9715, 9732, 9745, 9746, 9781, 9791, 9813, 9849, 9890, 9996], "external_url": "https://colorpunx.io/colors?i=196&name=#e22626", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954386429533224961"}, "#fff68e": {"id": 197, "name": "#fff68e", "description": "#fff68e is one of 222 colors in the cryptopunx color pallette. It is used by 564 unique punks", "hash": "ddbaf88321788b8f053b3ac70adbce72", "image": "https://gateway.pinata.cloud/ipfs/QmasmDNnHDjoktbbN95iq9w7i69K1jLigAgAVnrRPjw97F?filename=colorpunx197.png", "punks": [0, 12, 13, 64, 96, 103, 106, 168, 172, 184, 195, 199, 240, 241, 253, 262, 279, 290, 305, 324, 333, 383, 388, 391, 396, 400, 407, 440, 443, 446, 466, 486, 493, 498, 499, 521, 522, 527, 530, 560, 579, 581, 596, 603, 616, 653, 672, 755, 780, 782, 815, 818, 822, 830, 834, 858, 867, 870, 872, 898, 912, 922, 927, 929, 960, 976, 982, 985, 1038, 1046, 1055, 1082, 1083, 1086, 1092, 1123, 1148, 1159, 1162, 1197, 1210, 1225, 1227, 1243, 1245, 1251, 1253, 1261, 1293, 1329, 1341, 1346, 1355, 1389, 1390, 1411, 1414, 1420, 1428, 1434, 1453, 1455, 1493, 1496, 1547, 1595, 1596, 1634, 1637, 1661, 1714, 1738, 1749, 1750, 1766, 1789, 1816, 1818, 1828, 1844, 1850, 1854, 1865, 1866, 1869, 1875, 1876, 1888, 1906, 1918, 1926, 1956, 1958, 1959, 1980, 1985, 1986, 1994, 2007, 2018, 2054, 2101, 2117, 2118, 2143, 2164, 2182, 2199, 2222, 2229, 2237, 2262, 2293, 2324, 2359, 2372, 2382, 2395, 2411, 2436, 2454, 2455, 2496, 2523, 2532, 2649, 2660, 2686, 2698, 2705, 2713, 2716, 2736, 2740, 2751, 2793, 2795, 2811, 2813, 2829, 2841, 2893, 2940, 2954, 2994, 3026, 3032, 3037, 3043, 3078, 3112, 3116, 3153, 3165, 3187, 3201, 3212, 3251, 3252, 3289, 3294, 3321, 3360, 3371, 3401, 3424, 3427, 3432, 3457, 3470, 3483, 3494, 3548, 3560, 3582, 3589, 3594, 3595, 3616, 3649, 3653, 3656, 3697, 3725, 3747, 3763, 3775, 3793, 3803, 3812, 3827, 3861, 3870, 3891, 3962, 3999, 4019, 4032, 4043, 4061, 4075, 4093, 4099, 4129, 4132, 4133, 4140, 4166, 4176, 4183, 4218, 4225, 4235, 4254, 4264, 4267, 4276, 4286, 4345, 4349, 4362, 4393, 4398, 4417, 4432, 4461, 4502, 4560, 4568, 4595, 4598, 4641, 4656, 4676, 4710, 4712, 4719, 4761, 4798, 4799, 4829, 4848, 4849, 4859, 4868, 4889, 4893, 4903, 4921, 4922, 4980, 5014, 5076, 5081, 5082, 5084, 5096, 5124, 5125, 5160, 5166, 5177, 5212, 5219, 5256, 5264, 5267, 5270, 5271, 5282, 5295, 5310, 5345, 5347, 5361, 5372, 5386, 5405, 5413, 5419, 5429, 5431, 5457, 5474, 5497, 5503, 5508, 5515, 5534, 5551, 5563, 5574, 5576, 5605, 5621, 5622, 5642, 5649, 5673, 5712, 5723, 5745, 5778, 5785, 5808, 5825, 5848, 5858, 5860, 5928, 6015, 6030, 6072, 6104, 6155, 6164, 6184, 6187, 6215, 6216, 6239, 6242, 6256, 6277, 6338, 6350, 6357, 6370, 6377, 6381, 6442, 6465, 6497, 6520, 6528, 6554, 6556, 6560, 6564, 6568, 6577, 6592, 6613, 6629, 6638, 6703, 6706, 6711, 6714, 6723, 6739, 6752, 6797, 6812, 6814, 6816, 6836, 6855, 6858, 6859, 6890, 6895, 6950, 6954, 6972, 6998, 7009, 7011, 7020, 7027, 7052, 7056, 7063, 7085, 7086, 7114, 7128, 7133, 7169, 7180, 7196, 7211, 7269, 7272, 7292, 7322, 7336, 7343, 7366, 7367, 7413, 7422, 7437, 7445, 7457, 7465, 7482, 7503, 7515, 7520, 7562, 7563, 7577, 7606, 7645, 7648, 7652, 7695, 7698, 7700, 7703, 7734, 7751, 7758, 7777, 7792, 7793, 7802, 7811, 7814, 7875, 7976, 7987, 7999, 8009, 8020, 8063, 8094, 8128, 8148, 8149, 8183, 8184, 8193, 8194, 8228, 8254, 8255, 8267, 8276, 8293, 8321, 8374, 8387, 8394, 8414, 8419, 8426, 8428, 8431, 8454, 8487, 8506, 8529, 8539, 8565, 8566, 8577, 8582, 8592, 8605, 8636, 8670, 8680, 8709, 8723, 8745, 8759, 8760, 8766, 8776, 8787, 8795, 8802, 8850, 8856, 8873, 8887, 8912, 8989, 8997, 8999, 9000, 9006, 9034, 9052, 9109, 9125, 9147, 9191, 9195, 9201, 9278, 9308, 9310, 9397, 9400, 9408, 9431, 9438, 9459, 9461, 9470, 9473, 9493, 9506, 9514, 9522, 9544, 9566, 9593, 9599, 9629, 9650, 9663, 9712, 9742, 9828, 9831, 9832, 9852, 9925, 9980, 9994], "external_url": "https://colorpunx.io/colors?i=197&name=#fff68e", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954387529044852737"}, "#cd00cb": {"id": 198, "name": "#cd00cb", "description": "#cd00cb is one of 222 colors in the cryptopunx color pallette. It is used by 637 unique punks", "hash": "46670d983fd16c622a2ba0202b75c734", "image": "https://gateway.pinata.cloud/ipfs/QmVwmeAFkrLqKForoATUspJg3d284MqZPJkmCvXUG3dqQY?filename=colorpunx198.png", "punks": [12, 22, 34, 38, 46, 60, 64, 67, 71, 92, 110, 121, 125, 150, 160, 172, 176, 189, 202, 244, 275, 279, 285, 302, 303, 305, 313, 331, 333, 368, 379, 381, 384, 400, 407, 422, 430, 445, 449, 466, 477, 493, 537, 554, 571, 600, 604, 606, 628, 642, 660, 666, 672, 684, 696, 708, 712, 728, 733, 753, 757, 761, 776, 778, 796, 825, 831, 843, 857, 866, 884, 944, 960, 966, 977, 983, 990, 1038, 1043, 1052, 1071, 1073, 1090, 1110, 1140, 1156, 1169, 1206, 1210, 1214, 1217, 1220, 1227, 1247, 1253, 1265, 1289, 1291, 1367, 1379, 1420, 1441, 1452, 1453, 1455, 1470, 1489, 1544, 1548, 1550, 1554, 1556, 1593, 1598, 1599, 1609, 1626, 1645, 1648, 1662, 1664, 1666, 1678, 1679, 1688, 1707, 1738, 1750, 1779, 1800, 1817, 1866, 1881, 1883, 1902, 1907, 1937, 1952, 1953, 1988, 1990, 2001, 2033, 2039, 2062, 2068, 2072, 2103, 2117, 2137, 2149, 2162, 2169, 2180, 2183, 2199, 2212, 2318, 2358, 2368, 2397, 2436, 2442, 2454, 2515, 2521, 2523, 2526, 2531, 2533, 2618, 2623, 2634, 2664, 2675, 2692, 2696, 2700, 2706, 2713, 2717, 2740, 2782, 2792, 2808, 2811, 2812, 2815, 2858, 2876, 2889, 2915, 2917, 2937, 2945, 2963, 2973, 3004, 3051, 3078, 3109, 3113, 3125, 3158, 3178, 3185, 3201, 3210, 3212, 3241, 3253, 3254, 3283, 3304, 3311, 3344, 3364, 3366, 3388, 3397, 3402, 3405, 3409, 3414, 3424, 3435, 3437, 3457, 3476, 3515, 3531, 3535, 3581, 3589, 3593, 3595, 3602, 3607, 3608, 3648, 3663, 3678, 3704, 3705, 3707, 3770, 3775, 3789, 3798, 3816, 3828, 3858, 3861, 3870, 3909, 3911, 3946, 3948, 3985, 3995, 3997, 4006, 4028, 4032, 4036, 4037, 4046, 4056, 4061, 4069, 4073, 4083, 4086, 4089, 4092, 4095, 4118, 4122, 4130, 4147, 4196, 4237, 4250, 4254, 4267, 4269, 4270, 4301, 4302, 4304, 4309, 4310, 4313, 4332, 4343, 4346, 4351, 4353, 4357, 4358, 4377, 4382, 4398, 4401, 4405, 4453, 4455, 4500, 4536, 4568, 4575, 4584, 4612, 4615, 4622, 4652, 4654, 4664, 4700, 4702, 4719, 4752, 4767, 4839, 4885, 4911, 4922, 4927, 4934, 4941, 4943, 5049, 5060, 5085, 5137, 5154, 5166, 5167, 5168, 5211, 5212, 5266, 5267, 5281, 5293, 5302, 5307, 5339, 5373, 5384, 5391, 5401, 5419, 5431, 5468, 5481, 5485, 5493, 5497, 5513, 5554, 5562, 5591, 5621, 5623, 5629, 5638, 5640, 5648, 5672, 5685, 5691, 5758, 5785, 5804, 5825, 5826, 5873, 5888, 5900, 5913, 5917, 5931, 5955, 5967, 6003, 6017, 6055, 6057, 6065, 6070, 6071, 6084, 6115, 6116, 6141, 6150, 6215, 6249, 6255, 6298, 6321, 6329, 6343, 6357, 6365, 6368, 6369, 6376, 6389, 6390, 6434, 6436, 6461, 6465, 6513, 6518, 6549, 6550, 6565, 6570, 6618, 6662, 6667, 6678, 6696, 6699, 6718, 6731, 6734, 6735, 6739, 6765, 6767, 6776, 6796, 6801, 6807, 6810, 6817, 6821, 6822, 6840, 6842, 6844, 6856, 6896, 6936, 6939, 6945, 6981, 6990, 6994, 7013, 7056, 7073, 7079, 7082, 7083, 7093, 7105, 7116, 7122, 7125, 7131, 7138, 7183, 7204, 7237, 7269, 7295, 7299, 7301, 7304, 7311, 7348, 7378, 7387, 7420, 7422, 7429, 7450, 7495, 7520, 7545, 7557, 7560, 7580, 7586, 7604, 7606, 7631, 7643, 7645, 7649, 7654, 7662, 7663, 7703, 7710, 7735, 7763, 7786, 7823, 7853, 7862, 7872, 7877, 7906, 7932, 7965, 8027, 8038, 8063, 8077, 8126, 8133, 8142, 8147, 8164, 8172, 8183, 8194, 8217, 8230, 8261, 8265, 8271, 8282, 8323, 8330, 8349, 8364, 8374, 8387, 8394, 8406, 8414, 8416, 8421, 8426, 8431, 8434, 8465, 8483, 8495, 8509, 8529, 8533, 8535, 8580, 8585, 8602, 8630, 8635, 8646, 8647, 8670, 8674, 8683, 8702, 8725, 8747, 8760, 8805, 8807, 8810, 8842, 8847, 8850, 8873, 8884, 8887, 8966, 8982, 8999, 9020, 9029, 9042, 9057, 9068, 9102, 9120, 9126, 9134, 9136, 9164, 9186, 9191, 9215, 9223, 9247, 9311, 9326, 9338, 9359, 9376, 9400, 9406, 9411, 9417, 9430, 9438, 9473, 9486, 9492, 9493, 9520, 9534, 9539, 9540, 9544, 9571, 9575, 9586, 9595, 9630, 9638, 9647, 9652, 9662, 9663, 9710, 9731, 9786, 9844, 9857, 9876, 9881, 9920, 9925, 9934, 9940, 9958, 9960, 9964, 9983], "external_url": "https://colorpunx.io/colors?i=198&name=#cd00cb", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954388628556480513"}, "#c42110": {"id": 199, "name": "#c42110", "description": "#c42110 is one of 222 colors in the cryptopunx color pallette. It is used by 695 unique punks", "hash": "d17d6783849d23e306e38765f77cf2e0", "image": "https://gateway.pinata.cloud/ipfs/QmaMPFdS872VqJfd8MHpsmBPd7TPoKH3tCh6kcAGsxte1L?filename=colorpunx199.png", "punks": [14, 19, 62, 86, 88, 131, 140, 161, 167, 169, 173, 180, 185, 196, 201, 209, 212, 225, 226, 233, 283, 301, 318, 324, 326, 359, 388, 464, 482, 486, 491, 507, 514, 525, 527, 538, 584, 589, 602, 616, 646, 667, 697, 707, 719, 773, 795, 828, 829, 830, 865, 872, 901, 904, 907, 971, 974, 988, 1023, 1024, 1033, 1039, 1041, 1046, 1051, 1055, 1107, 1115, 1120, 1139, 1149, 1162, 1165, 1198, 1204, 1233, 1245, 1246, 1255, 1277, 1299, 1311, 1357, 1364, 1377, 1446, 1450, 1468, 1493, 1495, 1500, 1514, 1561, 1566, 1612, 1618, 1628, 1635, 1637, 1652, 1725, 1726, 1740, 1749, 1759, 1776, 1795, 1803, 1806, 1835, 1854, 1875, 1876, 1893, 1913, 1914, 1918, 1926, 1936, 1949, 1958, 1971, 1982, 1985, 2007, 2012, 2014, 2037, 2065, 2069, 2074, 2077, 2105, 2120, 2121, 2134, 2142, 2154, 2158, 2168, 2170, 2195, 2196, 2198, 2202, 2208, 2229, 2257, 2274, 2278, 2281, 2322, 2361, 2387, 2411, 2429, 2431, 2455, 2467, 2516, 2562, 2608, 2617, 2626, 2645, 2652, 2658, 2716, 2721, 2731, 2735, 2756, 2807, 2813, 2814, 2817, 2903, 2904, 2905, 2914, 2940, 2943, 2969, 2977, 2984, 2994, 3015, 3025, 3034, 3037, 3057, 3071, 3087, 3098, 3112, 3116, 3118, 3183, 3190, 3220, 3247, 3289, 3290, 3293, 3301, 3308, 3336, 3341, 3348, 3358, 3360, 3371, 3394, 3431, 3436, 3441, 3453, 3464, 3465, 3481, 3486, 3487, 3490, 3510, 3526, 3528, 3558, 3578, 3590, 3594, 3610, 3617, 3623, 3628, 3629, 3675, 3684, 3733, 3749, 3757, 3774, 3786, 3799, 3811, 3812, 3823, 3867, 3891, 3932, 3950, 3969, 3975, 3976, 3991, 3996, 3999, 4015, 4018, 4019, 4030, 4042, 4043, 4044, 4065, 4072, 4074, 4087, 4093, 4099, 4100, 4105, 4116, 4117, 4120, 4129, 4159, 4168, 4169, 4184, 4190, 4191, 4194, 4200, 4229, 4235, 4242, 4247, 4249, 4257, 4266, 4275, 4286, 4294, 4316, 4319, 4334, 4344, 4364, 4365, 4376, 4383, 4396, 4417, 4420, 4423, 4465, 4486, 4491, 4496, 4512, 4514, 4518, 4530, 4537, 4545, 4547, 4548, 4554, 4598, 4625, 4643, 4711, 4721, 4722, 4742, 4756, 4768, 4772, 4788, 4802, 4813, 4833, 4834, 4868, 4884, 4886, 4887, 4958, 4983, 4996, 4997, 5000, 5001, 5007, 5032, 5036, 5042, 5053, 5071, 5073, 5074, 5079, 5082, 5094, 5096, 5106, 5159, 5160, 5164, 5177, 5187, 5195, 5199, 5221, 5251, 5256, 5277, 5285, 5295, 5310, 5398, 5409, 5413, 5432, 5462, 5467, 5490, 5499, 5532, 5535, 5541, 5545, 5550, 5552, 5563, 5609, 5615, 5616, 5619, 5620, 5622, 5628, 5667, 5692, 5703, 5708, 5713, 5721, 5723, 5751, 5765, 5770, 5833, 5836, 5858, 5863, 5881, 5896, 5914, 5919, 5940, 5976, 5978, 5982, 5991, 5993, 6037, 6038, 6073, 6078, 6079, 6086, 6098, 6104, 6110, 6111, 6133, 6144, 6191, 6205, 6206, 6231, 6235, 6243, 6256, 6259, 6290, 6293, 6294, 6300, 6309, 6340, 6350, 6352, 6377, 6441, 6450, 6464, 6469, 6481, 6483, 6498, 6510, 6512, 6554, 6556, 6569, 6577, 6587, 6590, 6612, 6621, 6631, 6637, 6698, 6710, 6728, 6752, 6753, 6761, 6764, 6769, 6779, 6816, 6836, 6848, 6859, 6863, 6868, 6880, 6897, 6904, 6910, 6924, 6931, 6958, 6961, 6972, 7039, 7041, 7044, 7052, 7057, 7070, 7085, 7103, 7114, 7136, 7153, 7170, 7216, 7229, 7250, 7258, 7272, 7338, 7367, 7394, 7397, 7398, 7426, 7445, 7464, 7473, 7484, 7500, 7506, 7555, 7568, 7593, 7610, 7637, 7661, 7682, 7693, 7694, 7700, 7715, 7751, 7791, 7802, 7866, 7876, 7897, 7898, 7900, 7903, 7904, 7920, 7929, 7935, 7937, 7940, 7942, 7958, 7980, 7981, 7987, 7999, 8007, 8010, 8018, 8020, 8035, 8039, 8044, 8055, 8058, 8066, 8094, 8134, 8166, 8173, 8187, 8220, 8268, 8287, 8293, 8300, 8354, 8363, 8400, 8418, 8439, 8440, 8450, 8493, 8514, 8516, 8519, 8537, 8538, 8539, 8548, 8631, 8636, 8704, 8709, 8719, 8731, 8746, 8767, 8771, 8792, 8813, 8822, 8836, 8837, 8849, 8855, 8883, 8886, 8893, 8895, 8896, 8903, 8906, 8912, 8922, 8928, 8932, 8937, 8950, 8977, 8980, 8997, 9000, 9021, 9034, 9071, 9147, 9177, 9188, 9194, 9213, 9244, 9248, 9253, 9257, 9271, 9278, 9286, 9312, 9317, 9331, 9339, 9348, 9349, 9381, 9383, 9392, 9395, 9413, 9419, 9433, 9440, 9456, 9460, 9466, 9468, 9482, 9483, 9485, 9490, 9526, 9529, 9546, 9550, 9566, 9572, 9579, 9592, 9607, 9640, 9641, 9646, 9650, 9660, 9675, 9682, 9725, 9740, 9741, 9755, 9782, 9792, 9814, 9824, 9832, 9840, 9866, 9868, 9871, 9885, 9895, 9899, 9903, 9908, 9923, 9924, 9926, 9937, 9942, 9966, 9989], "external_url": "https://colorpunx.io/colors?i=199&name=#c42110", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954389728068108289"}, "#8b532c": {"id": 200, "name": "#8b532c", "description": "#8b532c is one of 222 colors in the cryptopunx color pallette. It is used by 698 unique punks", "hash": "f452d00ffc04ca41951a5f72fc6eac81", "image": "https://gateway.pinata.cloud/ipfs/QmSj91qLF2bGXpAX1mqkWRfeoHBF8DMrUpABv7MjSXW5MB?filename=colorpunx200.png", "punks": [1, 10, 35, 62, 74, 79, 85, 89, 110, 114, 116, 132, 140, 155, 181, 188, 191, 211, 212, 214, 237, 239, 247, 303, 323, 349, 367, 370, 402, 403, 426, 428, 464, 468, 478, 532, 555, 564, 584, 601, 639, 646, 652, 670, 675, 680, 689, 700, 713, 722, 741, 758, 791, 798, 832, 840, 889, 923, 935, 941, 947, 955, 956, 973, 986, 1029, 1040, 1056, 1063, 1090, 1091, 1106, 1109, 1158, 1189, 1194, 1200, 1254, 1277, 1297, 1319, 1332, 1361, 1393, 1395, 1401, 1407, 1429, 1431, 1436, 1442, 1458, 1463, 1482, 1498, 1506, 1512, 1537, 1542, 1548, 1558, 1577, 1584, 1600, 1602, 1611, 1639, 1668, 1683, 1693, 1702, 1724, 1728, 1729, 1754, 1792, 1797, 1813, 1815, 1827, 1838, 1841, 1847, 1856, 1927, 1930, 1938, 1949, 1953, 1957, 1964, 1965, 1974, 2000, 2008, 2019, 2026, 2041, 2053, 2055, 2067, 2085, 2094, 2100, 2103, 2106, 2124, 2135, 2139, 2142, 2150, 2151, 2160, 2168, 2171, 2185, 2204, 2208, 2257, 2271, 2285, 2326, 2339, 2343, 2351, 2397, 2398, 2406, 2409, 2437, 2445, 2450, 2451, 2480, 2490, 2511, 2516, 2518, 2522, 2563, 2565, 2578, 2597, 2602, 2611, 2656, 2662, 2676, 2684, 2688, 2696, 2744, 2756, 2768, 2771, 2791, 2796, 2858, 2878, 2888, 2934, 2971, 2974, 2995, 3001, 3002, 3009, 3011, 3036, 3042, 3058, 3063, 3103, 3104, 3122, 3129, 3150, 3177, 3204, 3205, 3209, 3213, 3215, 3219, 3220, 3243, 3272, 3290, 3326, 3352, 3376, 3400, 3409, 3431, 3433, 3453, 3458, 3478, 3498, 3509, 3515, 3527, 3539, 3554, 3571, 3583, 3588, 3593, 3599, 3608, 3621, 3630, 3647, 3674, 3716, 3734, 3739, 3753, 3757, 3789, 3790, 3802, 3805, 3835, 3862, 3864, 3918, 3920, 3950, 3967, 3974, 3981, 3985, 3986, 3992, 3995, 3997, 4050, 4058, 4069, 4074, 4078, 4081, 4089, 4105, 4127, 4161, 4179, 4191, 4311, 4315, 4322, 4329, 4340, 4363, 4391, 4422, 4452, 4457, 4463, 4477, 4478, 4571, 4592, 4601, 4632, 4634, 4650, 4651, 4671, 4681, 4709, 4739, 4741, 4744, 4752, 4765, 4775, 4785, 4793, 4809, 4814, 4853, 4862, 4908, 4931, 4951, 4971, 4983, 4989, 5015, 5021, 5022, 5023, 5025, 5041, 5042, 5054, 5067, 5100, 5101, 5115, 5119, 5123, 5126, 5131, 5137, 5165, 5176, 5180, 5196, 5198, 5202, 5207, 5222, 5229, 5237, 5262, 5278, 5290, 5307, 5325, 5338, 5340, 5349, 5353, 5380, 5385, 5387, 5430, 5433, 5452, 5455, 5466, 5475, 5525, 5544, 5578, 5587, 5614, 5635, 5637, 5653, 5697, 5701, 5703, 5704, 5711, 5726, 5738, 5757, 5759, 5760, 5783, 5789, 5799, 5817, 5830, 5834, 5839, 5840, 5852, 5861, 5873, 5884, 5886, 5892, 5909, 5911, 5931, 5943, 5945, 5959, 5999, 6003, 6008, 6016, 6038, 6077, 6088, 6102, 6107, 6121, 6143, 6154, 6159, 6172, 6173, 6200, 6205, 6206, 6230, 6235, 6246, 6289, 6291, 6298, 6309, 6322, 6323, 6332, 6335, 6341, 6359, 6362, 6371, 6390, 6395, 6421, 6474, 6483, 6490, 6503, 6535, 6551, 6581, 6588, 6604, 6605, 6660, 6681, 6718, 6724, 6734, 6741, 6742, 6757, 6767, 6794, 6811, 6843, 6846, 6880, 6898, 6899, 6910, 6931, 6932, 6967, 6999, 7019, 7043, 7054, 7111, 7115, 7175, 7197, 7198, 7212, 7281, 7286, 7295, 7316, 7345, 7347, 7358, 7379, 7391, 7419, 7444, 7460, 7486, 7506, 7510, 7525, 7527, 7532, 7545, 7552, 7574, 7591, 7601, 7608, 7626, 7646, 7671, 7680, 7681, 7693, 7702, 7709, 7713, 7730, 7735, 7736, 7737, 7750, 7763, 7782, 7808, 7813, 7820, 7824, 7826, 7830, 7834, 7835, 7857, 7870, 7890, 7897, 7902, 7919, 7923, 7931, 7935, 7963, 7974, 7975, 7982, 8004, 8071, 8095, 8126, 8147, 8168, 8176, 8232, 8237, 8238, 8240, 8241, 8244, 8247, 8269, 8284, 8285, 8288, 8291, 8325, 8351, 8370, 8373, 8380, 8427, 8438, 8449, 8470, 8478, 8493, 8519, 8540, 8545, 8568, 8572, 8586, 8630, 8656, 8661, 8665, 8710, 8783, 8810, 8817, 8825, 8842, 8848, 8863, 8888, 8889, 8911, 8922, 8944, 8948, 8970, 8971, 8992, 8994, 9021, 9035, 9060, 9061, 9075, 9132, 9143, 9175, 9183, 9192, 9217, 9219, 9226, 9228, 9241, 9243, 9257, 9266, 9283, 9291, 9293, 9318, 9330, 9343, 9364, 9383, 9386, 9403, 9404, 9409, 9411, 9437, 9448, 9450, 9464, 9465, 9482, 9483, 9488, 9490, 9499, 9504, 9507, 9532, 9580, 9606, 9617, 9631, 9640, 9643, 9659, 9677, 9678, 9691, 9700, 9705, 9717, 9719, 9720, 9729, 9735, 9750, 9752, 9764, 9765, 9776, 9780, 9781, 9791, 9793, 9818, 9821, 9823, 9830, 9841, 9846, 9849, 9863, 9865, 9867, 9872, 9887, 9891, 9903, 9907, 9910, 9930, 9981, 9986, 9999], "external_url": "https://colorpunx.io/colors?i=200&name=#8b532c", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954365538812297217"}, "#555555": {"id": 201, "name": "#555555", "description": "#555555 is one of 222 colors in the cryptopunx color pallette. It is used by 700 unique punks", "hash": "b8a9a33ec5e568ac400b6099f3a849e9", "image": "https://gateway.pinata.cloud/ipfs/QmeP6XCwoqouNaTwoZmsm3894Pq4r4kHvZdKqAZ6KErNip?filename=colorpunx201.png", "punks": [54, 58, 87, 90, 99, 105, 132, 147, 148, 154, 179, 189, 192, 211, 269, 284, 289, 291, 294, 296, 364, 379, 402, 406, 416, 424, 433, 435, 456, 465, 512, 520, 536, 559, 599, 617, 627, 630, 644, 656, 669, 670, 675, 689, 696, 698, 715, 765, 772, 784, 788, 802, 805, 810, 820, 847, 865, 877, 918, 923, 924, 939, 1012, 1022, 1027, 1028, 1034, 1036, 1078, 1080, 1090, 1094, 1108, 1109, 1117, 1121, 1133, 1177, 1182, 1189, 1219, 1248, 1249, 1250, 1254, 1277, 1334, 1377, 1384, 1391, 1393, 1422, 1423, 1447, 1457, 1463, 1470, 1472, 1484, 1486, 1500, 1512, 1532, 1539, 1542, 1548, 1568, 1576, 1591, 1599, 1602, 1611, 1615, 1644, 1648, 1653, 1674, 1685, 1697, 1716, 1728, 1733, 1734, 1776, 1783, 1792, 1793, 1827, 1838, 1841, 1856, 1878, 1925, 1927, 1946, 2048, 2051, 2062, 2071, 2073, 2084, 2093, 2094, 2106, 2119, 2132, 2144, 2178, 2196, 2210, 2232, 2258, 2294, 2301, 2306, 2310, 2311, 2317, 2325, 2328, 2338, 2339, 2343, 2348, 2356, 2357, 2409, 2423, 2435, 2441, 2450, 2451, 2464, 2516, 2522, 2550, 2565, 2584, 2611, 2616, 2617, 2633, 2674, 2770, 2791, 2797, 2823, 2842, 2848, 2880, 2886, 2894, 2924, 2949, 2967, 2981, 2991, 3022, 3039, 3049, 3061, 3070, 3098, 3101, 3115, 3140, 3141, 3158, 3195, 3213, 3216, 3224, 3233, 3255, 3259, 3265, 3298, 3304, 3309, 3310, 3339, 3349, 3400, 3408, 3411, 3445, 3447, 3466, 3475, 3478, 3518, 3530, 3537, 3541, 3543, 3544, 3562, 3564, 3573, 3591, 3599, 3608, 3614, 3619, 3651, 3666, 3672, 3689, 3705, 3713, 3720, 3753, 3764, 3805, 3809, 3810, 3859, 3873, 3876, 3879, 3886, 3895, 3896, 3901, 3913, 3918, 3920, 3924, 3939, 3951, 3961, 3969, 3983, 3990, 4006, 4047, 4062, 4078, 4105, 4120, 4171, 4173, 4182, 4205, 4207, 4220, 4242, 4246, 4257, 4318, 4322, 4329, 4335, 4356, 4370, 4379, 4389, 4395, 4409, 4416, 4441, 4454, 4478, 4482, 4496, 4526, 4551, 4565, 4589, 4592, 4593, 4608, 4650, 4651, 4652, 4653, 4663, 4664, 4668, 4680, 4683, 4705, 4713, 4724, 4744, 4745, 4757, 4760, 4768, 4770, 4781, 4813, 4818, 4842, 4861, 4918, 4919, 4926, 4927, 4929, 4930, 4940, 4947, 4951, 4964, 4972, 4992, 4995, 5021, 5042, 5092, 5100, 5101, 5109, 5113, 5114, 5116, 5123, 5131, 5148, 5169, 5173, 5202, 5218, 5287, 5289, 5298, 5308, 5321, 5329, 5351, 5379, 5380, 5390, 5395, 5396, 5402, 5406, 5417, 5428, 5439, 5451, 5459, 5472, 5473, 5477, 5486, 5499, 5530, 5532, 5597, 5599, 5614, 5635, 5637, 5641, 5653, 5701, 5703, 5725, 5735, 5760, 5768, 5773, 5805, 5807, 5818, 5827, 5830, 5834, 5842, 5892, 5902, 5904, 5909, 5926, 5931, 6007, 6008, 6017, 6036, 6039, 6054, 6077, 6096, 6106, 6112, 6132, 6135, 6137, 6143, 6151, 6159, 6166, 6185, 6194, 6241, 6246, 6259, 6308, 6312, 6323, 6331, 6335, 6362, 6364, 6371, 6379, 6384, 6386, 6400, 6420, 6426, 6434, 6437, 6439, 6440, 6452, 6505, 6506, 6525, 6529, 6535, 6578, 6615, 6619, 6634, 6636, 6641, 6660, 6670, 6676, 6700, 6721, 6741, 6775, 6846, 6861, 6866, 6874, 6887, 6912, 6923, 6926, 6935, 6940, 6961, 6967, 7033, 7049, 7051, 7074, 7097, 7105, 7106, 7129, 7144, 7154, 7156, 7162, 7171, 7175, 7178, 7197, 7212, 7213, 7217, 7243, 7247, 7281, 7291, 7316, 7347, 7360, 7388, 7390, 7403, 7417, 7472, 7475, 7501, 7512, 7513, 7551, 7556, 7578, 7594, 7625, 7626, 7641, 7650, 7670, 7674, 7677, 7709, 7718, 7731, 7732, 7748, 7778, 7779, 7810, 7825, 7826, 7834, 7844, 7867, 7868, 7881, 7919, 7931, 7963, 7970, 8003, 8021, 8028, 8085, 8093, 8136, 8142, 8156, 8176, 8215, 8238, 8266, 8277, 8283, 8305, 8314, 8324, 8326, 8328, 8359, 8369, 8373, 8375, 8383, 8384, 8404, 8425, 8433, 8445, 8468, 8470, 8472, 8482, 8499, 8507, 8508, 8509, 8515, 8522, 8545, 8586, 8618, 8624, 8646, 8648, 8656, 8681, 8686, 8700, 8713, 8729, 8740, 8755, 8762, 8770, 8772, 8799, 8810, 8820, 8825, 8826, 8828, 8860, 8868, 8876, 8877, 8908, 8967, 8968, 8971, 8974, 9003, 9007, 9008, 9024, 9075, 9083, 9092, 9100, 9104, 9115, 9117, 9137, 9154, 9159, 9187, 9207, 9210, 9217, 9235, 9256, 9291, 9293, 9333, 9340, 9344, 9368, 9383, 9393, 9433, 9448, 9476, 9477, 9483, 9490, 9492, 9513, 9552, 9575, 9611, 9612, 9613, 9617, 9621, 9623, 9635, 9651, 9666, 9672, 9705, 9707, 9708, 9722, 9728, 9747, 9778, 9789, 9793, 9799, 9823, 9836, 9846, 9848, 9862, 9878, 9887, 9893, 9901, 9904, 9910, 9911, 9943, 9951, 9952, 9953, 9958, 9965], "external_url": "https://colorpunx.io/colors?i=201&name=#555555", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954391927091363841"}, "#80dbda": {"id": 202, "name": "#80dbda", "description": "#80dbda is one of 222 colors in the cryptopunx color pallette. It is used by 712 unique punks", "hash": "60c98c5ded4eef7c07418ff8b42fcab5", "image": "https://gateway.pinata.cloud/ipfs/QmeVuPCx5e7gyz5MFjLFW8hGUQ6XmSizFXobcwsT6oWT9R?filename=colorpunx202.png", "punks": [3, 14, 22, 52, 68, 72, 92, 98, 101, 180, 188, 192, 195, 223, 224, 234, 336, 348, 363, 376, 382, 406, 445, 446, 456, 476, 481, 484, 499, 501, 504, 522, 541, 593, 674, 690, 703, 723, 734, 735, 745, 754, 803, 824, 838, 842, 843, 864, 883, 899, 902, 909, 931, 940, 954, 982, 1001, 1003, 1032, 1053, 1084, 1097, 1100, 1101, 1103, 1124, 1130, 1134, 1138, 1155, 1161, 1162, 1172, 1182, 1203, 1246, 1251, 1291, 1307, 1353, 1367, 1408, 1424, 1433, 1438, 1459, 1470, 1496, 1509, 1513, 1532, 1592, 1604, 1606, 1609, 1661, 1669, 1685, 1705, 1719, 1722, 1723, 1729, 1749, 1757, 1759, 1760, 1774, 1802, 1803, 1812, 1821, 1833, 1839, 1854, 1865, 1879, 1887, 1896, 1931, 1974, 1981, 2011, 2015, 2021, 2024, 2062, 2073, 2120, 2132, 2142, 2147, 2152, 2166, 2169, 2180, 2186, 2218, 2243, 2244, 2255, 2279, 2315, 2319, 2352, 2363, 2365, 2394, 2397, 2474, 2478, 2537, 2540, 2548, 2549, 2579, 2590, 2613, 2628, 2651, 2705, 2717, 2725, 2741, 2745, 2746, 2750, 2759, 2761, 2768, 2769, 2774, 2780, 2793, 2804, 2810, 2815, 2835, 2836, 2844, 2847, 2857, 2884, 2889, 2893, 2900, 2909, 2910, 2920, 2925, 2926, 2928, 2944, 2981, 2990, 2994, 3001, 3004, 3005, 3015, 3031, 3035, 3040, 3055, 3098, 3101, 3105, 3109, 3127, 3132, 3141, 3176, 3210, 3214, 3226, 3227, 3249, 3258, 3270, 3293, 3301, 3308, 3315, 3354, 3361, 3366, 3372, 3379, 3382, 3392, 3419, 3422, 3434, 3445, 3503, 3505, 3520, 3523, 3525, 3547, 3556, 3559, 3566, 3577, 3581, 3608, 3611, 3640, 3645, 3648, 3650, 3668, 3675, 3690, 3694, 3705, 3720, 3778, 3791, 3805, 3820, 3845, 3857, 3865, 3872, 3924, 3937, 3983, 3996, 4008, 4010, 4015, 4020, 4092, 4110, 4116, 4173, 4177, 4188, 4191, 4213, 4224, 4233, 4250, 4270, 4271, 4279, 4293, 4311, 4314, 4333, 4338, 4347, 4373, 4385, 4387, 4389, 4393, 4443, 4448, 4459, 4468, 4494, 4500, 4522, 4534, 4572, 4589, 4602, 4609, 4612, 4614, 4623, 4627, 4638, 4640, 4673, 4677, 4682, 4707, 4717, 4750, 4766, 4788, 4803, 4812, 4831, 4862, 4882, 4891, 4908, 4918, 4931, 4937, 4965, 4982, 4999, 5002, 5005, 5019, 5023, 5045, 5063, 5068, 5074, 5091, 5110, 5119, 5156, 5162, 5192, 5199, 5232, 5271, 5273, 5280, 5283, 5300, 5302, 5321, 5324, 5327, 5331, 5332, 5370, 5380, 5382, 5389, 5407, 5412, 5418, 5429, 5436, 5437, 5454, 5458, 5472, 5512, 5524, 5538, 5564, 5585, 5605, 5606, 5635, 5642, 5645, 5647, 5654, 5670, 5684, 5689, 5697, 5704, 5719, 5759, 5785, 5797, 5799, 5852, 5875, 5877, 5884, 5954, 6015, 6048, 6053, 6055, 6077, 6088, 6099, 6168, 6172, 6218, 6262, 6278, 6280, 6281, 6282, 6297, 6301, 6344, 6345, 6348, 6350, 6372, 6373, 6380, 6389, 6420, 6445, 6460, 6463, 6486, 6500, 6524, 6526, 6529, 6556, 6559, 6565, 6568, 6580, 6584, 6595, 6602, 6614, 6629, 6630, 6663, 6667, 6715, 6720, 6722, 6727, 6747, 6797, 6817, 6849, 6856, 6871, 6880, 6935, 7009, 7012, 7045, 7046, 7057, 7058, 7066, 7069, 7074, 7079, 7082, 7094, 7100, 7140, 7141, 7165, 7191, 7210, 7222, 7225, 7242, 7255, 7256, 7294, 7322, 7325, 7338, 7344, 7352, 7365, 7368, 7400, 7406, 7457, 7469, 7483, 7494, 7512, 7526, 7545, 7550, 7558, 7559, 7563, 7570, 7597, 7623, 7630, 7637, 7642, 7644, 7651, 7657, 7670, 7673, 7674, 7681, 7684, 7694, 7696, 7697, 7698, 7700, 7762, 7785, 7787, 7817, 7850, 7854, 7855, 7870, 7898, 7899, 7932, 7936, 7937, 7955, 7986, 7999, 8008, 8050, 8064, 8071, 8072, 8094, 8096, 8112, 8130, 8135, 8136, 8137, 8162, 8170, 8217, 8224, 8240, 8251, 8258, 8268, 8270, 8281, 8303, 8323, 8324, 8349, 8350, 8356, 8364, 8376, 8382, 8390, 8412, 8426, 8435, 8449, 8461, 8465, 8479, 8486, 8501, 8503, 8533, 8563, 8567, 8569, 8578, 8585, 8587, 8594, 8616, 8682, 8697, 8724, 8728, 8729, 8733, 8736, 8805, 8824, 8825, 8844, 8884, 8898, 8906, 8910, 8918, 8921, 8950, 8960, 8962, 8975, 8987, 9001, 9004, 9009, 9027, 9064, 9097, 9101, 9121, 9139, 9155, 9159, 9160, 9163, 9166, 9171, 9172, 9178, 9186, 9195, 9201, 9207, 9222, 9245, 9251, 9258, 9274, 9275, 9284, 9289, 9294, 9302, 9310, 9325, 9332, 9354, 9356, 9373, 9375, 9377, 9388, 9413, 9414, 9417, 9424, 9427, 9430, 9445, 9446, 9456, 9457, 9461, 9465, 9477, 9484, 9485, 9505, 9508, 9532, 9536, 9552, 9562, 9563, 9572, 9579, 9582, 9633, 9660, 9661, 9670, 9672, 9676, 9699, 9717, 9742, 9754, 9756, 9782, 9806, 9828, 9832, 9834, 9843, 9844, 9848, 9884, 9904, 9912, 9921, 9937, 9939, 9942, 9965, 9979, 9981, 9989, 9993, 9999], "external_url": "https://colorpunx.io/colors?i=202&name=#80dbda", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954393026602991617"}, "#b69f82": {"id": 203, "name": "#b69f82", "description": "#b69f82 is one of 222 colors in the cryptopunx color pallette. It is used by 727 unique punks", "hash": "6112bd6b16bf3cf1a09790a22c8e4250", "image": "https://gateway.pinata.cloud/ipfs/QmZix656Ka3oJ7qVkvMYfsA4ZtnXFGC4GcrGj9jEcD9jyw?filename=colorpunx203.png", "punks": [18, 36, 45, 70, 95, 102, 124, 150, 165, 192, 205, 213, 215, 217, 226, 228, 270, 289, 291, 296, 304, 321, 335, 361, 362, 366, 433, 435, 436, 438, 456, 476, 477, 510, 518, 551, 559, 565, 589, 593, 599, 605, 621, 629, 630, 632, 636, 643, 665, 667, 668, 669, 673, 681, 685, 706, 726, 734, 738, 740, 763, 766, 775, 777, 795, 806, 812, 820, 841, 865, 917, 970, 980, 981, 1001, 1012, 1022, 1026, 1050, 1068, 1073, 1093, 1103, 1117, 1121, 1122, 1124, 1141, 1144, 1157, 1168, 1179, 1180, 1205, 1249, 1331, 1394, 1405, 1410, 1425, 1450, 1465, 1474, 1475, 1486, 1509, 1515, 1531, 1539, 1562, 1590, 1593, 1620, 1648, 1654, 1672, 1677, 1678, 1706, 1709, 1734, 1737, 1741, 1747, 1758, 1775, 1788, 1793, 1837, 1852, 1859, 1864, 1889, 1897, 1900, 1910, 1963, 1973, 1977, 1979, 2030, 2059, 2071, 2084, 2092, 2098, 2127, 2138, 2146, 2183, 2198, 2212, 2232, 2235, 2284, 2300, 2302, 2317, 2348, 2350, 2366, 2368, 2377, 2385, 2392, 2425, 2461, 2483, 2517, 2521, 2526, 2528, 2529, 2541, 2570, 2580, 2583, 2596, 2601, 2629, 2674, 2683, 2715, 2735, 2746, 2769, 2776, 2781, 2787, 2809, 2842, 2855, 2856, 2860, 2873, 2927, 2930, 2932, 2952, 2963, 2984, 2991, 3004, 3010, 3090, 3115, 3130, 3141, 3146, 3149, 3156, 3161, 3171, 3174, 3191, 3193, 3207, 3208, 3210, 3221, 3224, 3232, 3241, 3242, 3248, 3265, 3276, 3279, 3288, 3297, 3304, 3325, 3340, 3344, 3364, 3406, 3408, 3411, 3418, 3419, 3474, 3488, 3512, 3513, 3538, 3541, 3542, 3564, 3587, 3606, 3618, 3625, 3635, 3637, 3655, 3664, 3684, 3712, 3738, 3785, 3792, 3804, 3847, 3859, 3879, 3886, 3919, 3924, 3928, 3946, 3951, 3957, 3961, 3966, 3969, 3987, 4005, 4006, 4026, 4038, 4042, 4057, 4080, 4097, 4102, 4113, 4120, 4121, 4126, 4139, 4143, 4145, 4147, 4167, 4172, 4174, 4177, 4182, 4205, 4216, 4227, 4243, 4260, 4274, 4331, 4335, 4337, 4355, 4356, 4361, 4366, 4370, 4377, 4410, 4416, 4425, 4482, 4489, 4496, 4504, 4510, 4548, 4628, 4630, 4643, 4658, 4672, 4687, 4689, 4714, 4729, 4734, 4735, 4736, 4758, 4762, 4764, 4777, 4779, 4781, 4786, 4789, 4792, 4813, 4818, 4822, 4832, 4838, 4839, 4842, 4852, 4857, 4864, 4871, 4891, 4918, 4929, 4933, 4948, 4977, 4984, 4994, 4996, 5006, 5038, 5046, 5051, 5073, 5094, 5105, 5106, 5127, 5129, 5133, 5138, 5143, 5173, 5187, 5193, 5200, 5209, 5247, 5248, 5287, 5329, 5330, 5332, 5346, 5358, 5359, 5360, 5365, 5366, 5379, 5393, 5395, 5417, 5426, 5432, 5451, 5481, 5485, 5501, 5517, 5529, 5530, 5536, 5592, 5611, 5641, 5672, 5681, 5692, 5699, 5718, 5731, 5756, 5758, 5773, 5776, 5777, 5779, 5780, 5782, 5784, 5787, 5790, 5828, 5865, 5889, 5898, 5900, 5904, 5906, 5916, 5936, 5942, 5966, 5968, 6007, 6031, 6039, 6054, 6067, 6078, 6082, 6091, 6109, 6112, 6118, 6127, 6132, 6171, 6175, 6182, 6186, 6208, 6244, 6245, 6258, 6272, 6288, 6300, 6328, 6347, 6364, 6372, 6386, 6393, 6405, 6413, 6434, 6439, 6456, 6458, 6460, 6461, 6471, 6475, 6524, 6526, 6534, 6545, 6557, 6570, 6593, 6602, 6636, 6644, 6692, 6700, 6746, 6756, 6764, 6772, 6775, 6821, 6827, 6828, 6830, 6850, 6864, 6885, 6897, 6908, 6916, 6918, 6939, 6942, 6948, 6959, 6961, 6970, 7028, 7035, 7066, 7072, 7076, 7089, 7099, 7116, 7120, 7136, 7138, 7178, 7202, 7224, 7291, 7303, 7312, 7344, 7388, 7390, 7418, 7447, 7448, 7450, 7462, 7470, 7472, 7476, 7500, 7513, 7518, 7534, 7539, 7542, 7551, 7555, 7556, 7602, 7603, 7610, 7611, 7612, 7614, 7623, 7627, 7704, 7727, 7759, 7761, 7769, 7803, 7806, 7807, 7816, 7817, 7858, 7866, 7881, 7904, 7920, 7926, 7928, 7940, 7961, 7993, 8001, 8018, 8021, 8028, 8036, 8041, 8045, 8056, 8070, 8093, 8111, 8116, 8136, 8163, 8167, 8174, 8177, 8190, 8208, 8221, 8222, 8252, 8266, 8289, 8301, 8314, 8324, 8332, 8340, 8356, 8371, 8378, 8383, 8384, 8388, 8408, 8420, 8432, 8442, 8475, 8488, 8494, 8509, 8521, 8541, 8594, 8622, 8635, 8639, 8653, 8660, 8666, 8684, 8695, 8702, 8711, 8715, 8740, 8742, 8743, 8755, 8758, 8793, 8811, 8820, 8826, 8829, 8843, 8897, 8901, 8902, 8913, 8928, 8943, 8945, 8960, 8977, 8990, 9002, 9005, 9007, 9008, 9018, 9024, 9062, 9084, 9094, 9103, 9110, 9115, 9139, 9148, 9169, 9178, 9179, 9216, 9221, 9229, 9284, 9290, 9303, 9309, 9321, 9337, 9339, 9406, 9435, 9462, 9469, 9477, 9498, 9501, 9535, 9545, 9582, 9592, 9605, 9625, 9638, 9655, 9658, 9676, 9693, 9694, 9704, 9708, 9716, 9728, 9732, 9744, 9746, 9747, 9798, 9800, 9815, 9857, 9859, 9868, 9871, 9874, 9890, 9902, 9904, 9912, 9926, 9929, 9958, 9983, 9987], "external_url": "https://colorpunx.io/colors?i=203&name=#b69f82", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954395225626247169"}, "#711010": {"id": 204, "name": "#711010", "description": "#711010 is one of 222 colors in the cryptopunx color pallette. It is used by 746 unique punks", "hash": "c76908ccbef4639850cab97c7620868e", "image": "https://gateway.pinata.cloud/ipfs/QmdbLue73yUfMn6WbWqiZEmwjTwCkpfanH4LnDskMoRp1C?filename=colorpunx204.png", "punks": [2, 53, 61, 91, 93, 96, 106, 168, 187, 193, 195, 199, 241, 249, 251, 264, 268, 276, 277, 282, 287, 298, 306, 319, 341, 342, 348, 353, 375, 376, 382, 390, 394, 404, 413, 469, 473, 475, 479, 481, 490, 498, 499, 521, 522, 528, 563, 586, 598, 614, 641, 647, 654, 659, 664, 677, 683, 717, 724, 729, 732, 744, 756, 782, 789, 790, 813, 815, 838, 839, 845, 855, 868, 870, 893, 894, 916, 921, 922, 934, 937, 948, 949, 951, 954, 963, 992, 996, 997, 1010, 1011, 1032, 1042, 1065, 1081, 1082, 1087, 1092, 1138, 1163, 1173, 1174, 1176, 1187, 1196, 1197, 1209, 1234, 1237, 1243, 1248, 1260, 1261, 1264, 1267, 1268, 1273, 1313, 1315, 1328, 1340, 1371, 1386, 1392, 1411, 1414, 1427, 1428, 1454, 1457, 1479, 1529, 1545, 1569, 1579, 1587, 1588, 1591, 1596, 1603, 1623, 1659, 1671, 1681, 1697, 1705, 1714, 1715, 1730, 1733, 1735, 1744, 1746, 1751, 1765, 1766, 1772, 1783, 1786, 1789, 1801, 1804, 1807, 1826, 1829, 1844, 1865, 1868, 1873, 1892, 1911, 1939, 1962, 1972, 2013, 2015, 2018, 2034, 2046, 2091, 2114, 2115, 2119, 2145, 2159, 2176, 2182, 2190, 2203, 2210, 2213, 2214, 2218, 2237, 2240, 2252, 2253, 2262, 2273, 2293, 2297, 2305, 2316, 2328, 2360, 2384, 2390, 2394, 2396, 2400, 2413, 2418, 2426, 2428, 2476, 2514, 2530, 2532, 2544, 2552, 2554, 2555, 2558, 2588, 2591, 2621, 2622, 2624, 2638, 2654, 2712, 2714, 2730, 2736, 2751, 2759, 2799, 2816, 2826, 2829, 2836, 2839, 2891, 2893, 2900, 2946, 2954, 2958, 2968, 3026, 3029, 3032, 3038, 3043, 3060, 3076, 3079, 3089, 3092, 3111, 3131, 3151, 3179, 3202, 3214, 3222, 3225, 3230, 3246, 3251, 3271, 3277, 3287, 3329, 3332, 3345, 3367, 3412, 3420, 3442, 3450, 3471, 3503, 3525, 3545, 3570, 3582, 3627, 3632, 3639, 3658, 3673, 3688, 3697, 3709, 3721, 3725, 3741, 3755, 3756, 3765, 3772, 3777, 3787, 3803, 3818, 3829, 3842, 3848, 3850, 3874, 3884, 3885, 3913, 3939, 3959, 3962, 3984, 3988, 4004, 4016, 4021, 4067, 4101, 4107, 4133, 4144, 4153, 4183, 4188, 4211, 4222, 4230, 4232, 4263, 4264, 4268, 4279, 4306, 4314, 4318, 4327, 4333, 4339, 4345, 4348, 4349, 4354, 4367, 4380, 4406, 4429, 4430, 4438, 4439, 4515, 4516, 4546, 4560, 4566, 4579, 4580, 4586, 4619, 4626, 4639, 4641, 4696, 4704, 4712, 4738, 4751, 4797, 4817, 4821, 4823, 4846, 4860, 4870, 4872, 4924, 4928, 4936, 4937, 4947, 4950, 4957, 4972, 4980, 5030, 5043, 5045, 5052, 5086, 5099, 5102, 5120, 5121, 5124, 5125, 5132, 5158, 5161, 5171, 5172, 5191, 5250, 5265, 5270, 5282, 5316, 5321, 5323, 5326, 5331, 5347, 5372, 5383, 5429, 5461, 5471, 5474, 5496, 5503, 5515, 5518, 5551, 5553, 5574, 5576, 5594, 5601, 5610, 5639, 5642, 5644, 5645, 5660, 5669, 5675, 5677, 5689, 5712, 5724, 5734, 5739, 5743, 5745, 5775, 5788, 5796, 5798, 5823, 5824, 5832, 5844, 5857, 5879, 5908, 5950, 5951, 5952, 5977, 5988, 5990, 5995, 6004, 6021, 6045, 6049, 6064, 6072, 6075, 6096, 6149, 6155, 6161, 6165, 6183, 6184, 6187, 6190, 6216, 6250, 6253, 6324, 6331, 6338, 6370, 6378, 6381, 6388, 6418, 6432, 6440, 6486, 6487, 6496, 6500, 6506, 6522, 6558, 6574, 6576, 6589, 6613, 6627, 6638, 6664, 6686, 6707, 6716, 6723, 6754, 6768, 6777, 6791, 6797, 6823, 6831, 6845, 6854, 6855, 6858, 6861, 6862, 6890, 6900, 6929, 6944, 6960, 6988, 6991, 7016, 7024, 7027, 7033, 7045, 7059, 7077, 7095, 7102, 7108, 7123, 7128, 7133, 7145, 7165, 7169, 7172, 7196, 7214, 7218, 7244, 7266, 7333, 7362, 7369, 7373, 7412, 7413, 7421, 7437, 7439, 7455, 7482, 7497, 7498, 7499, 7502, 7512, 7515, 7521, 7522, 7535, 7577, 7589, 7594, 7615, 7617, 7648, 7650, 7652, 7670, 7676, 7678, 7698, 7707, 7719, 7733, 7752, 7760, 7767, 7768, 7793, 7810, 7814, 7821, 7825, 7829, 7840, 7841, 7856, 7859, 7875, 7887, 7889, 7907, 7915, 7938, 7941, 7970, 7977, 7985, 8009, 8029, 8043, 8060, 8096, 8110, 8137, 8140, 8141, 8154, 8169, 8196, 8203, 8235, 8243, 8251, 8263, 8267, 8275, 8286, 8290, 8299, 8309, 8316, 8347, 8350, 8405, 8411, 8417, 8419, 8456, 8458, 8496, 8502, 8511, 8523, 8526, 8527, 8576, 8582, 8595, 8605, 8617, 8657, 8693, 8736, 8749, 8757, 8759, 8769, 8779, 8800, 8802, 8814, 8835, 8854, 8874, 8880, 8890, 8904, 8923, 8933, 8961, 8962, 8983, 8986, 9006, 9023, 9028, 9053, 9058, 9063, 9064, 9074, 9078, 9086, 9091, 9095, 9105, 9145, 9193, 9195, 9200, 9201, 9295, 9308, 9310, 9320, 9327, 9332, 9388, 9396, 9401, 9408, 9414, 9431, 9459, 9479, 9484, 9491, 9506, 9514, 9515, 9517, 9523, 9576, 9599, 9613, 9619, 9633, 9648, 9670, 9689, 9712, 9713, 9714, 9745, 9756, 9775, 9784, 9808, 9861, 9869, 9889, 9921, 9932, 9933, 9959, 9967, 9976, 9982, 9995], "external_url": "https://colorpunx.io/colors?i=204&name=#711010", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954396325137874945"}, "#e7cba9": {"id": 205, "name": "#e7cba9", "description": "#e7cba9 is one of 222 colors in the cryptopunx color pallette. It is used by 760 unique punks", "hash": "3f09405ac1a7f5929d7d0d3eab94ae02", "image": "https://gateway.pinata.cloud/ipfs/QmdUiBmRh1Nn8J5t8eaET4NkYMtSyszH5sM1wAy6z4oc5u?filename=colorpunx205.png", "punks": [17, 24, 27, 32, 33, 48, 55, 105, 121, 122, 130, 142, 146, 152, 170, 183, 189, 207, 236, 251, 276, 277, 281, 293, 313, 358, 379, 460, 497, 503, 528, 533, 540, 600, 602, 606, 641, 648, 655, 656, 687, 696, 701, 703, 715, 724, 744, 754, 783, 784, 786, 788, 805, 808, 823, 829, 837, 847, 873, 882, 884, 887, 896, 920, 921, 925, 957, 958, 966, 988, 1007, 1028, 1036, 1044, 1047, 1065, 1077, 1085, 1096, 1100, 1111, 1133, 1137, 1146, 1149, 1173, 1176, 1185, 1202, 1213, 1229, 1236, 1248, 1267, 1282, 1283, 1334, 1340, 1365, 1377, 1384, 1385, 1408, 1423, 1454, 1457, 1479, 1481, 1500, 1508, 1520, 1532, 1546, 1553, 1559, 1569, 1592, 1594, 1599, 1603, 1642, 1655, 1701, 1704, 1705, 1733, 1735, 1768, 1773, 1777, 1783, 1791, 1801, 1811, 1829, 1840, 1845, 1883, 1912, 1915, 1919, 1948, 1968, 2025, 2062, 2073, 2119, 2128, 2144, 2145, 2156, 2165, 2184, 2196, 2209, 2210, 2216, 2219, 2225, 2238, 2265, 2277, 2281, 2328, 2336, 2349, 2365, 2375, 2380, 2388, 2396, 2405, 2414, 2426, 2434, 2474, 2493, 2494, 2500, 2507, 2551, 2584, 2586, 2599, 2600, 2610, 2612, 2617, 2634, 2644, 2658, 2689, 2701, 2712, 2745, 2770, 2773, 2789, 2797, 2819, 2830, 2835, 2839, 2845, 2848, 2861, 2868, 2869, 2880, 2949, 2968, 3019, 3029, 3045, 3051, 3070, 3082, 3084, 3098, 3108, 3126, 3140, 3179, 3195, 3214, 3222, 3255, 3259, 3284, 3287, 3310, 3316, 3329, 3332, 3339, 3349, 3382, 3384, 3398, 3407, 3420, 3436, 3445, 3450, 3462, 3471, 3520, 3522, 3530, 3545, 3552, 3562, 3586, 3591, 3603, 3632, 3639, 3640, 3650, 3658, 3661, 3688, 3695, 3708, 3713, 3717, 3732, 3741, 3746, 3765, 3786, 3787, 3820, 3840, 3845, 3848, 3860, 3869, 3901, 3910, 3912, 3913, 3921, 3931, 3938, 3939, 3947, 3996, 4004, 4017, 4068, 4084, 4090, 4104, 4107, 4171, 4173, 4180, 4199, 4226, 4232, 4242, 4244, 4258, 4272, 4282, 4293, 4295, 4318, 4339, 4342, 4353, 4364, 4378, 4380, 4385, 4395, 4401, 4409, 4445, 4453, 4454, 4458, 4459, 4479, 4488, 4490, 4491, 4499, 4538, 4540, 4542, 4556, 4569, 4580, 4586, 4607, 4623, 4637, 4652, 4660, 4663, 4673, 4692, 4730, 4745, 4768, 4803, 4817, 4821, 4861, 4870, 4872, 4888, 4917, 4919, 4927, 4930, 4947, 4957, 4964, 4968, 4972, 4990, 5019, 5033, 5052, 5086, 5102, 5104, 5113, 5114, 5132, 5134, 5157, 5161, 5167, 5171, 5184, 5197, 5208, 5231, 5239, 5263, 5272, 5302, 5304, 5319, 5321, 5352, 5368, 5369, 5378, 5388, 5390, 5396, 5406, 5428, 5439, 5453, 5459, 5463, 5477, 5506, 5512, 5532, 5585, 5606, 5610, 5624, 5648, 5656, 5663, 5675, 5689, 5694, 5695, 5709, 5727, 5729, 5734, 5736, 5741, 5746, 5805, 5807, 5833, 5842, 5847, 5857, 5867, 5894, 5896, 5910, 5914, 5918, 5921, 5933, 5950, 5957, 5960, 5979, 5988, 6025, 6074, 6081, 6087, 6096, 6100, 6103, 6110, 6130, 6131, 6142, 6148, 6161, 6165, 6185, 6194, 6203, 6225, 6259, 6260, 6294, 6311, 6313, 6318, 6319, 6331, 6337, 6339, 6356, 6379, 6384, 6409, 6414, 6417, 6429, 6440, 6452, 6455, 6469, 6476, 6478, 6485, 6494, 6500, 6506, 6525, 6533, 6558, 6562, 6575, 6591, 6615, 6616, 6641, 6658, 6676, 6696, 6710, 6769, 6785, 6809, 6823, 6835, 6861, 6863, 6876, 6887, 6900, 6921, 6929, 6936, 7010, 7017, 7038, 7039, 7051, 7059, 7073, 7095, 7103, 7105, 7106, 7124, 7134, 7166, 7172, 7173, 7188, 7195, 7230, 7235, 7238, 7240, 7247, 7284, 7290, 7297, 7302, 7340, 7341, 7371, 7383, 7396, 7411, 7414, 7478, 7480, 7549, 7553, 7557, 7560, 7570, 7578, 7596, 7617, 7624, 7625, 7635, 7640, 7650, 7651, 7653, 7667, 7675, 7682, 7717, 7718, 7725, 7741, 7744, 7757, 7768, 7778, 7810, 7825, 7838, 7841, 7848, 7856, 7867, 7876, 7879, 7882, 7889, 7903, 7908, 7912, 7925, 7938, 7944, 7947, 7949, 7965, 7966, 7970, 7979, 7984, 7991, 8062, 8065, 8090, 8110, 8122, 8124, 8132, 8138, 8139, 8141, 8142, 8156, 8160, 8197, 8215, 8216, 8229, 8235, 8242, 8250, 8256, 8260, 8261, 8263, 8283, 8298, 8326, 8330, 8357, 8375, 8398, 8403, 8422, 8425, 8430, 8433, 8468, 8491, 8497, 8508, 8523, 8527, 8544, 8557, 8578, 8584, 8595, 8596, 8609, 8624, 8626, 8640, 8646, 8655, 8657, 8681, 8689, 8690, 8694, 8696, 8707, 8724, 8728, 8731, 8737, 8756, 8762, 8855, 8861, 8876, 8886, 8894, 8908, 8956, 8982, 8983, 8987, 9028, 9072, 9105, 9107, 9112, 9117, 9131, 9134, 9144, 9145, 9155, 9162, 9187, 9200, 9208, 9210, 9236, 9254, 9255, 9256, 9267, 9281, 9305, 9331, 9333, 9336, 9340, 9345, 9349, 9351, 9356, 9357, 9359, 9374, 9388, 9392, 9394, 9396, 9432, 9433, 9439, 9467, 9492, 9509, 9524, 9543, 9588, 9596, 9613, 9622, 9630, 9644, 9651, 9652, 9664, 9666, 9669, 9672, 9699, 9713, 9715, 9745, 9771, 9784, 9787, 9789, 9790, 9805, 9814, 9836, 9853, 9854, 9905, 9911, 9924, 9931, 9933, 9940, 9946, 9968, 9969, 9985], "external_url": "https://colorpunx.io/colors?i=205&name=#e7cba9", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954397424649502721"}, "#c6c6c6": {"id": 206, "name": "#c6c6c6", "description": "#c6c6c6 is one of 222 colors in the cryptopunx color pallette. It is used by 961 unique punks", "hash": "6ee4274f779665cecceab43108b64bfc", "image": "https://gateway.pinata.cloud/ipfs/Qme2f1XZ46WXRCPiGRFm45YAm7dqe4eHyXr4dvUZ1oJcV9?filename=colorpunx206.png", "punks": [35, 42, 70, 76, 99, 110, 122, 126, 129, 144, 157, 165, 201, 206, 221, 224, 229, 235, 243, 287, 315, 318, 354, 370, 377, 382, 393, 404, 416, 432, 446, 449, 450, 474, 478, 499, 512, 570, 581, 588, 592, 603, 605, 625, 631, 657, 714, 736, 751, 755, 758, 797, 815, 820, 832, 834, 840, 843, 862, 867, 874, 882, 897, 901, 912, 917, 921, 941, 996, 1000, 1020, 1062, 1081, 1085, 1092, 1106, 1113, 1131, 1138, 1172, 1181, 1187, 1190, 1210, 1224, 1231, 1235, 1249, 1273, 1281, 1286, 1313, 1342, 1360, 1375, 1377, 1382, 1384, 1394, 1405, 1413, 1424, 1427, 1447, 1457, 1458, 1463, 1465, 1482, 1493, 1505, 1533, 1540, 1553, 1606, 1608, 1613, 1620, 1621, 1633, 1636, 1652, 1665, 1679, 1692, 1704, 1756, 1760, 1771, 1802, 1809, 1816, 1838, 1839, 1840, 1873, 1890, 1891, 1904, 1911, 1944, 1950, 1973, 1984, 1997, 2006, 2012, 2026, 2031, 2036, 2041, 2056, 2070, 2072, 2077, 2091, 2127, 2137, 2141, 2172, 2186, 2191, 2222, 2230, 2246, 2251, 2266, 2277, 2278, 2281, 2282, 2305, 2306, 2320, 2331, 2356, 2359, 2370, 2381, 2389, 2398, 2408, 2413, 2428, 2451, 2455, 2485, 2496, 2498, 2504, 2507, 2525, 2527, 2562, 2567, 2585, 2619, 2624, 2638, 2641, 2667, 2738, 2742, 2754, 2755, 2758, 2770, 2786, 2794, 2830, 2836, 2838, 2857, 2871, 2873, 2886, 2888, 2889, 2901, 2921, 2933, 2957, 2962, 2988, 3009, 3018, 3020, 3033, 3038, 3095, 3112, 3123, 3148, 3155, 3156, 3171, 3187, 3196, 3200, 3203, 3207, 3214, 3223, 3224, 3237, 3245, 3254, 3273, 3284, 3294, 3296, 3315, 3328, 3331, 3340, 3350, 3354, 3361, 3418, 3425, 3429, 3462, 3468, 3476, 3484, 3491, 3496, 3497, 3508, 3512, 3551, 3558, 3563, 3564, 3576, 3579, 3580, 3595, 3612, 3617, 3621, 3638, 3641, 3646, 3659, 3683, 3685, 3687, 3699, 3705, 3713, 3730, 3733, 3735, 3739, 3770, 3790, 3793, 3796, 3807, 3815, 3825, 3843, 3849, 3859, 3860, 3868, 3896, 3902, 3923, 3930, 3952, 3958, 3959, 3961, 3969, 3977, 4001, 4030, 4042, 4065, 4067, 4076, 4098, 4099, 4104, 4107, 4121, 4134, 4135, 4168, 4177, 4208, 4214, 4230, 4239, 4260, 4261, 4268, 4277, 4293, 4313, 4316, 4319, 4323, 4335, 4343, 4387, 4389, 4424, 4439, 4462, 4466, 4472, 4475, 4487, 4508, 4530, 4560, 4561, 4578, 4584, 4637, 4641, 4653, 4657, 4662, 4667, 4684, 4686, 4688, 4689, 4698, 4700, 4701, 4712, 4717, 4721, 4730, 4751, 4753, 4762, 4764, 4776, 4777, 4787, 4790, 4820, 4831, 4839, 4859, 4872, 4874, 4876, 4879, 4903, 4919, 4929, 4935, 4952, 4966, 4971, 4978, 4982, 4984, 4990, 4993, 4998, 5011, 5012, 5032, 5038, 5064, 5074, 5081, 5083, 5104, 5108, 5127, 5139, 5140, 5144, 5150, 5159, 5161, 5175, 5181, 5188, 5211, 5227, 5233, 5244, 5254, 5280, 5299, 5303, 5304, 5306, 5309, 5316, 5331, 5333, 5342, 5352, 5362, 5364, 5371, 5382, 5391, 5415, 5427, 5429, 5438, 5450, 5452, 5470, 5479, 5497, 5509, 5513, 5526, 5543, 5553, 5555, 5576, 5591, 5592, 5602, 5655, 5668, 5677, 5682, 5699, 5719, 5736, 5748, 5759, 5765, 5770, 5790, 5794, 5796, 5808, 5811, 5816, 5836, 5857, 5864, 5867, 5869, 5870, 5884, 5900, 5927, 5928, 5931, 5945, 5959, 5973, 5981, 5983, 5991, 5992, 6009, 6016, 6025, 6035, 6046, 6057, 6062, 6068, 6083, 6110, 6116, 6119, 6125, 6132, 6142, 6145, 6155, 6164, 6179, 6190, 6219, 6221, 6229, 6230, 6233, 6253, 6257, 6273, 6278, 6295, 6297, 6313, 6321, 6333, 6344, 6347, 6353, 6367, 6374, 6385, 6392, 6393, 6395, 6399, 6403, 6408, 6417, 6456, 6469, 6478, 6480, 6498, 6508, 6515, 6516, 6523, 6526, 6530, 6538, 6554, 6564, 6569, 6574, 6581, 6600, 6603, 6609, 6621, 6627, 6634, 6643, 6664, 6670, 6680, 6682, 6690, 6692, 6697, 6704, 6720, 6742, 6784, 6789, 6793, 6799, 6805, 6838, 6840, 6843, 6856, 6863, 6900, 6908, 6909, 6910, 6911, 6914, 6926, 6928, 6933, 6948, 6949, 6957, 6958, 6966, 6975, 7002, 7014, 7027, 7032, 7035, 7042, 7072, 7077, 7078, 7093, 7094, 7095, 7104, 7105, 7114, 7118, 7122, 7123, 7124, 7126, 7128, 7131, 7134, 7141, 7143, 7155, 7174, 7183, 7196, 7201, 7218, 7237, 7240, 7241, 7249, 7277, 7281, 7282, 7291, 7294, 7295, 7300, 7302, 7303, 7306, 7320, 7324, 7333, 7334, 7346, 7353, 7357, 7363, 7366, 7399, 7402, 7416, 7421, 7428, 7436, 7445, 7449, 7450, 7463, 7467, 7495, 7501, 7514, 7515, 7517, 7527, 7546, 7562, 7565, 7586, 7611, 7623, 7627, 7631, 7648, 7650, 7657, 7682, 7697, 7704, 7708, 7717, 7719, 7733, 7739, 7743, 7784, 7785, 7792, 7794, 7799, 7806, 7808, 7810, 7822, 7858, 7859, 7860, 7861, 7864, 7866, 7877, 7878, 7917, 7920, 7924, 7927, 7971, 7974, 8000, 8013, 8031, 8035, 8057, 8060, 8064, 8073, 8074, 8079, 8080, 8086, 8092, 8109, 8116, 8140, 8146, 8147, 8158, 8187, 8200, 8222, 8234, 8236, 8250, 8252, 8256, 8261, 8269, 8280, 8285, 8287, 8289, 8298, 8305, 8313, 8316, 8328, 8343, 8346, 8348, 8353, 8355, 8365, 8367, 8382, 8393, 8405, 8407, 8408, 8420, 8422, 8432, 8438, 8443, 8456, 8465, 8469, 8473, 8476, 8480, 8481, 8487, 8512, 8530, 8547, 8563, 8572, 8576, 8596, 8605, 8610, 8621, 8627, 8653, 8663, 8671, 8680, 8682, 8689, 8695, 8700, 8723, 8727, 8729, 8742, 8749, 8761, 8773, 8774, 8777, 8783, 8794, 8797, 8839, 8844, 8845, 8847, 8848, 8860, 8870, 8875, 8878, 8887, 8896, 8916, 8917, 8920, 8921, 8925, 8935, 8950, 8963, 8974, 8977, 8983, 8994, 8996, 9000, 9003, 9009, 9013, 9014, 9021, 9037, 9044, 9055, 9060, 9065, 9066, 9067, 9069, 9070, 9071, 9081, 9099, 9101, 9106, 9113, 9127, 9132, 9149, 9152, 9162, 9165, 9178, 9179, 9184, 9188, 9193, 9204, 9209, 9221, 9232, 9235, 9237, 9249, 9258, 9289, 9293, 9298, 9302, 9305, 9307, 9310, 9349, 9365, 9373, 9377, 9378, 9382, 9392, 9398, 9406, 9407, 9414, 9423, 9428, 9442, 9446, 9450, 9453, 9454, 9464, 9470, 9476, 9485, 9506, 9514, 9527, 9528, 9545, 9548, 9551, 9558, 9570, 9571, 9573, 9581, 9587, 9606, 9608, 9609, 9614, 9622, 9627, 9675, 9692, 9696, 9705, 9708, 9709, 9721, 9743, 9748, 9760, 9776, 9778, 9789, 9796, 9822, 9824, 9835, 9845, 9863, 9881, 9896, 9901, 9921, 9925, 9928, 9943, 9951, 9953, 9979, 9980, 9989, 9996], "external_url": "https://colorpunx.io/colors?i=206&name=#c6c6c6", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954398524161130497"}, "#dddddd": {"id": 207, "name": "#dddddd", "description": "#dddddd is one of 222 colors in the cryptopunx color pallette. It is used by 961 unique punks", "hash": "e156b9638a2d1d7eed37399dca0139ef", "image": "https://gateway.pinata.cloud/ipfs/QmP2v4uyBnFYRFNeU5wHUZNhKKMRaDCG5WfPnNDzsWQ8ao?filename=colorpunx207.png", "punks": [35, 42, 70, 76, 99, 110, 122, 126, 129, 144, 157, 165, 201, 206, 221, 224, 229, 235, 243, 287, 315, 318, 354, 370, 377, 382, 393, 404, 416, 432, 446, 449, 450, 474, 478, 499, 512, 570, 581, 588, 592, 603, 605, 625, 631, 657, 714, 736, 751, 755, 758, 797, 815, 820, 832, 834, 840, 843, 862, 867, 874, 882, 897, 901, 912, 917, 921, 941, 996, 1000, 1020, 1062, 1081, 1085, 1092, 1106, 1113, 1131, 1138, 1172, 1181, 1187, 1190, 1210, 1224, 1231, 1235, 1249, 1273, 1281, 1286, 1313, 1342, 1360, 1375, 1377, 1382, 1384, 1394, 1405, 1413, 1424, 1427, 1447, 1457, 1458, 1463, 1465, 1482, 1493, 1505, 1533, 1540, 1553, 1606, 1608, 1613, 1620, 1621, 1633, 1636, 1652, 1665, 1679, 1692, 1704, 1756, 1760, 1771, 1802, 1809, 1816, 1838, 1839, 1840, 1873, 1890, 1891, 1904, 1911, 1944, 1950, 1973, 1984, 1997, 2006, 2012, 2026, 2031, 2036, 2041, 2056, 2070, 2072, 2077, 2091, 2127, 2137, 2141, 2172, 2186, 2191, 2222, 2230, 2246, 2251, 2266, 2277, 2278, 2281, 2282, 2305, 2306, 2320, 2331, 2356, 2359, 2370, 2381, 2389, 2398, 2408, 2413, 2428, 2451, 2455, 2485, 2496, 2498, 2504, 2507, 2525, 2527, 2562, 2567, 2585, 2619, 2624, 2638, 2641, 2667, 2738, 2742, 2754, 2755, 2758, 2770, 2786, 2794, 2830, 2836, 2838, 2857, 2871, 2873, 2886, 2888, 2889, 2901, 2921, 2933, 2957, 2962, 2988, 3009, 3018, 3020, 3033, 3038, 3095, 3112, 3123, 3148, 3155, 3156, 3171, 3187, 3196, 3200, 3203, 3207, 3214, 3223, 3224, 3237, 3245, 3254, 3273, 3284, 3294, 3296, 3315, 3328, 3331, 3340, 3350, 3354, 3361, 3418, 3425, 3429, 3462, 3468, 3476, 3484, 3491, 3496, 3497, 3508, 3512, 3551, 3558, 3563, 3564, 3576, 3579, 3580, 3595, 3612, 3617, 3621, 3638, 3641, 3646, 3659, 3683, 3685, 3687, 3699, 3705, 3713, 3730, 3733, 3735, 3739, 3770, 3790, 3793, 3796, 3807, 3815, 3825, 3843, 3849, 3859, 3860, 3868, 3896, 3902, 3923, 3930, 3952, 3958, 3959, 3961, 3969, 3977, 4001, 4030, 4042, 4065, 4067, 4076, 4098, 4099, 4104, 4107, 4121, 4134, 4135, 4168, 4177, 4208, 4214, 4230, 4239, 4260, 4261, 4268, 4277, 4293, 4313, 4316, 4319, 4323, 4335, 4343, 4387, 4389, 4424, 4439, 4462, 4466, 4472, 4475, 4487, 4508, 4530, 4560, 4561, 4578, 4584, 4637, 4641, 4653, 4657, 4662, 4667, 4684, 4686, 4688, 4689, 4698, 4700, 4701, 4712, 4717, 4721, 4730, 4751, 4753, 4762, 4764, 4776, 4777, 4787, 4790, 4820, 4831, 4839, 4859, 4872, 4874, 4876, 4879, 4903, 4919, 4929, 4935, 4952, 4966, 4971, 4978, 4982, 4984, 4990, 4993, 4998, 5011, 5012, 5032, 5038, 5064, 5074, 5081, 5083, 5104, 5108, 5127, 5139, 5140, 5144, 5150, 5159, 5161, 5175, 5181, 5188, 5211, 5227, 5233, 5244, 5254, 5280, 5299, 5303, 5304, 5306, 5309, 5316, 5331, 5333, 5342, 5352, 5362, 5364, 5371, 5382, 5391, 5415, 5427, 5429, 5438, 5450, 5452, 5470, 5479, 5497, 5509, 5513, 5526, 5543, 5553, 5555, 5576, 5591, 5592, 5602, 5655, 5668, 5677, 5682, 5699, 5719, 5736, 5748, 5759, 5765, 5770, 5790, 5794, 5796, 5808, 5811, 5816, 5836, 5857, 5864, 5867, 5869, 5870, 5884, 5900, 5927, 5928, 5931, 5945, 5959, 5973, 5981, 5983, 5991, 5992, 6009, 6016, 6025, 6035, 6046, 6057, 6062, 6068, 6083, 6110, 6116, 6119, 6125, 6132, 6142, 6145, 6155, 6164, 6179, 6190, 6219, 6221, 6229, 6230, 6233, 6253, 6257, 6273, 6278, 6295, 6297, 6313, 6321, 6333, 6344, 6347, 6353, 6367, 6374, 6385, 6392, 6393, 6395, 6399, 6403, 6408, 6417, 6456, 6469, 6478, 6480, 6498, 6508, 6515, 6516, 6523, 6526, 6530, 6538, 6554, 6564, 6569, 6574, 6581, 6600, 6603, 6609, 6621, 6627, 6634, 6643, 6664, 6670, 6680, 6682, 6690, 6692, 6697, 6704, 6720, 6742, 6784, 6789, 6793, 6799, 6805, 6838, 6840, 6843, 6856, 6863, 6900, 6908, 6909, 6910, 6911, 6914, 6926, 6928, 6933, 6948, 6949, 6957, 6958, 6966, 6975, 7002, 7014, 7027, 7032, 7035, 7042, 7072, 7077, 7078, 7093, 7094, 7095, 7104, 7105, 7114, 7118, 7122, 7123, 7124, 7126, 7128, 7131, 7134, 7141, 7143, 7155, 7174, 7183, 7196, 7201, 7218, 7237, 7240, 7241, 7249, 7277, 7281, 7282, 7291, 7294, 7295, 7300, 7302, 7303, 7306, 7320, 7324, 7333, 7334, 7346, 7353, 7357, 7363, 7366, 7399, 7402, 7416, 7421, 7428, 7436, 7445, 7449, 7450, 7463, 7467, 7495, 7501, 7514, 7515, 7517, 7527, 7546, 7562, 7565, 7586, 7611, 7623, 7627, 7631, 7648, 7650, 7657, 7682, 7697, 7704, 7708, 7717, 7719, 7733, 7739, 7743, 7784, 7785, 7792, 7794, 7799, 7806, 7808, 7810, 7822, 7858, 7859, 7860, 7861, 7864, 7866, 7877, 7878, 7917, 7920, 7924, 7927, 7971, 7974, 8000, 8013, 8031, 8035, 8057, 8060, 8064, 8073, 8074, 8079, 8080, 8086, 8092, 8109, 8116, 8140, 8146, 8147, 8158, 8187, 8200, 8222, 8234, 8236, 8250, 8252, 8256, 8261, 8269, 8280, 8285, 8287, 8289, 8298, 8305, 8313, 8316, 8328, 8343, 8346, 8348, 8353, 8355, 8365, 8367, 8382, 8393, 8405, 8407, 8408, 8420, 8422, 8432, 8438, 8443, 8456, 8465, 8469, 8473, 8476, 8480, 8481, 8487, 8512, 8530, 8547, 8563, 8572, 8576, 8596, 8605, 8610, 8621, 8627, 8653, 8663, 8671, 8680, 8682, 8689, 8695, 8700, 8723, 8727, 8729, 8742, 8749, 8761, 8773, 8774, 8777, 8783, 8794, 8797, 8839, 8844, 8845, 8847, 8848, 8860, 8870, 8875, 8878, 8887, 8896, 8916, 8917, 8920, 8921, 8925, 8935, 8950, 8963, 8974, 8977, 8983, 8994, 8996, 9000, 9003, 9009, 9013, 9014, 9021, 9037, 9044, 9055, 9060, 9065, 9066, 9067, 9069, 9070, 9071, 9081, 9099, 9101, 9106, 9113, 9127, 9132, 9149, 9152, 9162, 9165, 9178, 9179, 9184, 9188, 9193, 9204, 9209, 9221, 9232, 9235, 9237, 9249, 9258, 9289, 9293, 9298, 9302, 9305, 9307, 9310, 9349, 9365, 9373, 9377, 9378, 9382, 9392, 9398, 9406, 9407, 9414, 9423, 9428, 9442, 9446, 9450, 9453, 9454, 9464, 9470, 9476, 9485, 9506, 9514, 9527, 9528, 9545, 9548, 9551, 9558, 9570, 9571, 9573, 9581, 9587, 9606, 9608, 9609, 9614, 9622, 9627, 9675, 9692, 9696, 9705, 9708, 9709, 9721, 9743, 9748, 9760, 9776, 9778, 9789, 9796, 9822, 9824, 9835, 9845, 9863, 9881, 9896, 9901, 9921, 9925, 9928, 9943, 9951, 9953, 9979, 9980, 9989, 9996], "external_url": "https://colorpunx.io/colors?i=207&name=#dddddd", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954399623672758273"}, "#e25b26": {"id": 208, "name": "#e25b26", "description": "#e25b26 is one of 222 colors in the cryptopunx color pallette. It is used by 961 unique punks", "hash": "12ce4b848ddef017d6fc542e1c78ae4d", "image": "https://gateway.pinata.cloud/ipfs/QmcPDY92yndTF1YwVtyAMAmFebnytS39b8HGWLveBWtobX?filename=colorpunx208.png", "punks": [35, 42, 70, 76, 99, 110, 122, 126, 129, 144, 157, 165, 201, 206, 221, 224, 229, 235, 243, 287, 315, 318, 354, 370, 377, 382, 393, 404, 416, 432, 446, 449, 450, 474, 478, 499, 512, 570, 581, 588, 592, 603, 605, 625, 631, 657, 714, 736, 751, 755, 758, 797, 815, 820, 832, 834, 840, 843, 862, 867, 874, 882, 897, 901, 912, 917, 921, 941, 996, 1000, 1020, 1062, 1081, 1085, 1092, 1106, 1113, 1131, 1138, 1172, 1181, 1187, 1190, 1210, 1224, 1231, 1235, 1249, 1273, 1281, 1286, 1313, 1342, 1360, 1375, 1377, 1382, 1384, 1394, 1405, 1413, 1424, 1427, 1447, 1457, 1458, 1463, 1465, 1482, 1493, 1505, 1533, 1540, 1553, 1606, 1608, 1613, 1620, 1621, 1633, 1636, 1652, 1665, 1679, 1692, 1704, 1756, 1760, 1771, 1802, 1809, 1816, 1838, 1839, 1840, 1873, 1890, 1891, 1904, 1911, 1944, 1950, 1973, 1984, 1997, 2006, 2012, 2026, 2031, 2036, 2041, 2056, 2070, 2072, 2077, 2091, 2127, 2137, 2141, 2172, 2186, 2191, 2222, 2230, 2246, 2251, 2266, 2277, 2278, 2281, 2282, 2305, 2306, 2320, 2331, 2356, 2359, 2370, 2381, 2389, 2398, 2408, 2413, 2428, 2451, 2455, 2485, 2496, 2498, 2504, 2507, 2525, 2527, 2562, 2567, 2585, 2619, 2624, 2638, 2641, 2667, 2738, 2742, 2754, 2755, 2758, 2770, 2786, 2794, 2830, 2836, 2838, 2857, 2871, 2873, 2886, 2888, 2889, 2901, 2921, 2933, 2957, 2962, 2988, 3009, 3018, 3020, 3033, 3038, 3095, 3112, 3123, 3148, 3155, 3156, 3171, 3187, 3196, 3200, 3203, 3207, 3214, 3223, 3224, 3237, 3245, 3254, 3273, 3284, 3294, 3296, 3315, 3328, 3331, 3340, 3350, 3354, 3361, 3418, 3425, 3429, 3462, 3468, 3476, 3484, 3491, 3496, 3497, 3508, 3512, 3551, 3558, 3563, 3564, 3576, 3579, 3580, 3595, 3612, 3617, 3621, 3638, 3641, 3646, 3659, 3683, 3685, 3687, 3699, 3705, 3713, 3730, 3733, 3735, 3739, 3770, 3790, 3793, 3796, 3807, 3815, 3825, 3843, 3849, 3859, 3860, 3868, 3896, 3902, 3923, 3930, 3952, 3958, 3959, 3961, 3969, 3977, 4001, 4030, 4042, 4065, 4067, 4076, 4098, 4099, 4104, 4107, 4121, 4134, 4135, 4168, 4177, 4208, 4214, 4230, 4239, 4260, 4261, 4268, 4277, 4293, 4313, 4316, 4319, 4323, 4335, 4343, 4387, 4389, 4424, 4439, 4462, 4466, 4472, 4475, 4487, 4508, 4530, 4560, 4561, 4578, 4584, 4637, 4641, 4653, 4657, 4662, 4667, 4684, 4686, 4688, 4689, 4698, 4700, 4701, 4712, 4717, 4721, 4730, 4751, 4753, 4762, 4764, 4776, 4777, 4787, 4790, 4820, 4831, 4839, 4859, 4872, 4874, 4876, 4879, 4903, 4919, 4929, 4935, 4952, 4966, 4971, 4978, 4982, 4984, 4990, 4993, 4998, 5011, 5012, 5032, 5038, 5064, 5074, 5081, 5083, 5104, 5108, 5127, 5139, 5140, 5144, 5150, 5159, 5161, 5175, 5181, 5188, 5211, 5227, 5233, 5244, 5254, 5280, 5299, 5303, 5304, 5306, 5309, 5316, 5331, 5333, 5342, 5352, 5362, 5364, 5371, 5382, 5391, 5415, 5427, 5429, 5438, 5450, 5452, 5470, 5479, 5497, 5509, 5513, 5526, 5543, 5553, 5555, 5576, 5591, 5592, 5602, 5655, 5668, 5677, 5682, 5699, 5719, 5736, 5748, 5759, 5765, 5770, 5790, 5794, 5796, 5808, 5811, 5816, 5836, 5857, 5864, 5867, 5869, 5870, 5884, 5900, 5927, 5928, 5931, 5945, 5959, 5973, 5981, 5983, 5991, 5992, 6009, 6016, 6025, 6035, 6046, 6057, 6062, 6068, 6083, 6110, 6116, 6119, 6125, 6132, 6142, 6145, 6155, 6164, 6179, 6190, 6219, 6221, 6229, 6230, 6233, 6253, 6257, 6273, 6278, 6295, 6297, 6313, 6321, 6333, 6344, 6347, 6353, 6367, 6374, 6385, 6392, 6393, 6395, 6399, 6403, 6408, 6417, 6456, 6469, 6478, 6480, 6498, 6508, 6515, 6516, 6523, 6526, 6530, 6538, 6554, 6564, 6569, 6574, 6581, 6600, 6603, 6609, 6621, 6627, 6634, 6643, 6664, 6670, 6680, 6682, 6690, 6692, 6697, 6704, 6720, 6742, 6784, 6789, 6793, 6799, 6805, 6838, 6840, 6843, 6856, 6863, 6900, 6908, 6909, 6910, 6911, 6914, 6926, 6928, 6933, 6948, 6949, 6957, 6958, 6966, 6975, 7002, 7014, 7027, 7032, 7035, 7042, 7072, 7077, 7078, 7093, 7094, 7095, 7104, 7105, 7114, 7118, 7122, 7123, 7124, 7126, 7128, 7131, 7134, 7141, 7143, 7155, 7174, 7183, 7196, 7201, 7218, 7237, 7240, 7241, 7249, 7277, 7281, 7282, 7291, 7294, 7295, 7300, 7302, 7303, 7306, 7320, 7324, 7333, 7334, 7346, 7353, 7357, 7363, 7366, 7399, 7402, 7416, 7421, 7428, 7436, 7445, 7449, 7450, 7463, 7467, 7495, 7501, 7514, 7515, 7517, 7527, 7546, 7562, 7565, 7586, 7611, 7623, 7627, 7631, 7648, 7650, 7657, 7682, 7697, 7704, 7708, 7717, 7719, 7733, 7739, 7743, 7784, 7785, 7792, 7794, 7799, 7806, 7808, 7810, 7822, 7858, 7859, 7860, 7861, 7864, 7866, 7877, 7878, 7917, 7920, 7924, 7927, 7971, 7974, 8000, 8013, 8031, 8035, 8057, 8060, 8064, 8073, 8074, 8079, 8080, 8086, 8092, 8109, 8116, 8140, 8146, 8147, 8158, 8187, 8200, 8222, 8234, 8236, 8250, 8252, 8256, 8261, 8269, 8280, 8285, 8287, 8289, 8298, 8305, 8313, 8316, 8328, 8343, 8346, 8348, 8353, 8355, 8365, 8367, 8382, 8393, 8405, 8407, 8408, 8420, 8422, 8432, 8438, 8443, 8456, 8465, 8469, 8473, 8476, 8480, 8481, 8487, 8512, 8530, 8547, 8563, 8572, 8576, 8596, 8605, 8610, 8621, 8627, 8653, 8663, 8671, 8680, 8682, 8689, 8695, 8700, 8723, 8727, 8729, 8742, 8749, 8761, 8773, 8774, 8777, 8783, 8794, 8797, 8839, 8844, 8845, 8847, 8848, 8860, 8870, 8875, 8878, 8887, 8896, 8916, 8917, 8920, 8921, 8925, 8935, 8950, 8963, 8974, 8977, 8983, 8994, 8996, 9000, 9003, 9009, 9013, 9014, 9021, 9037, 9044, 9055, 9060, 9065, 9066, 9067, 9069, 9070, 9071, 9081, 9099, 9101, 9106, 9113, 9127, 9132, 9149, 9152, 9162, 9165, 9178, 9179, 9184, 9188, 9193, 9204, 9209, 9221, 9232, 9235, 9237, 9249, 9258, 9289, 9293, 9298, 9302, 9305, 9307, 9310, 9349, 9365, 9373, 9377, 9378, 9382, 9392, 9398, 9406, 9407, 9414, 9423, 9428, 9442, 9446, 9450, 9453, 9454, 9464, 9470, 9476, 9485, 9506, 9514, 9527, 9528, 9545, 9548, 9551, 9558, 9570, 9571, 9573, 9581, 9587, 9606, 9608, 9609, 9614, 9622, 9627, 9675, 9692, 9696, 9705, 9708, 9709, 9721, 9743, 9748, 9760, 9776, 9778, 9789, 9796, 9822, 9824, 9835, 9845, 9863, 9881, 9896, 9901, 9921, 9925, 9928, 9943, 9951, 9953, 9979, 9980, 9989, 9996], "external_url": "https://colorpunx.io/colors?i=208&name=#e25b26", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954400723184386049"}, "#ead9d9": {"id": 209, "name": "#ead9d9", "description": "#ead9d9 is one of 222 colors in the cryptopunx color pallette. It is used by 1018 unique punks", "hash": "36f27030666351bc7ef3a4cec2ff5200", "image": "https://gateway.pinata.cloud/ipfs/QmdZU9GEz5XYcKw1uGLsVtB6nw84G9P6Bn2ccxwhuHtrfj?filename=colorpunx209.png", "punks": [15, 59, 80, 82, 113, 126, 133, 147, 179, 182, 220, 233, 246, 252, 263, 264, 278, 280, 282, 284, 286, 287, 288, 301, 305, 314, 318, 324, 327, 331, 339, 354, 355, 359, 363, 364, 377, 410, 412, 413, 420, 424, 434, 452, 475, 514, 515, 521, 526, 539, 549, 558, 568, 570, 576, 598, 603, 612, 614, 627, 628, 644, 647, 658, 659, 662, 674, 683, 711, 720, 725, 729, 753, 755, 756, 760, 762, 773, 778, 779, 802, 816, 826, 831, 839, 855, 863, 864, 866, 867, 893, 894, 911, 934, 937, 949, 951, 954, 961, 963, 971, 975, 978, 992, 994, 1002, 1011, 1013, 1020, 1041, 1045, 1053, 1055, 1067, 1082, 1087, 1092, 1107, 1112, 1113, 1118, 1174, 1183, 1187, 1192, 1196, 1197, 1203, 1208, 1209, 1218, 1222, 1225, 1241, 1247, 1253, 1260, 1264, 1278, 1287, 1304, 1323, 1358, 1366, 1371, 1383, 1418, 1419, 1426, 1447, 1462, 1483, 1519, 1525, 1529, 1530, 1573, 1579, 1591, 1597, 1612, 1618, 1630, 1631, 1649, 1663, 1665, 1671, 1674, 1680, 1681, 1689, 1697, 1708, 1714, 1716, 1718, 1719, 1746, 1756, 1771, 1776, 1790, 1794, 1817, 1819, 1843, 1854, 1873, 1884, 1892, 1908, 1911, 1920, 1922, 1966, 1993, 2002, 2013, 2029, 2039, 2063, 2064, 2077, 2099, 2116, 2122, 2159, 2162, 2166, 2169, 2176, 2179, 2190, 2192, 2213, 2214, 2227, 2234, 2239, 2240, 2262, 2268, 2304, 2314, 2325, 2327, 2330, 2337, 2357, 2360, 2367, 2390, 2393, 2394, 2459, 2473, 2477, 2495, 2499, 2508, 2513, 2514, 2530, 2545, 2572, 2573, 2576, 2581, 2582, 2588, 2608, 2609, 2615, 2625, 2632, 2638, 2640, 2645, 2651, 2653, 2654, 2667, 2697, 2699, 2700, 2704, 2714, 2727, 2730, 2743, 2759, 2799, 2817, 2824, 2829, 2833, 2851, 2866, 2882, 2891, 2901, 2902, 2903, 2914, 2940, 2954, 2957, 2959, 3018, 3024, 3028, 3038, 3053, 3055, 3056, 3060, 3076, 3089, 3091, 3111, 3128, 3131, 3132, 3145, 3151, 3158, 3163, 3183, 3202, 3217, 3223, 3234, 3237, 3251, 3256, 3273, 3282, 3285, 3307, 3317, 3327, 3337, 3380, 3391, 3395, 3396, 3405, 3412, 3441, 3455, 3457, 3461, 3463, 3469, 3501, 3524, 3528, 3544, 3559, 3574, 3575, 3600, 3607, 3631, 3644, 3687, 3697, 3702, 3743, 3759, 3768, 3770, 3771, 3772, 3777, 3781, 3811, 3814, 3815, 3818, 3826, 3829, 3837, 3839, 3842, 3843, 3877, 3889, 3904, 3923, 3930, 3945, 3948, 3953, 3963, 3977, 3978, 3993, 3998, 4001, 4012, 4021, 4032, 4049, 4055, 4056, 4062, 4077, 4109, 4111, 4114, 4124, 4128, 4130, 4131, 4142, 4159, 4163, 4164, 4184, 4203, 4211, 4212, 4224, 4237, 4240, 4253, 4254, 4257, 4263, 4264, 4268, 4269, 4270, 4298, 4301, 4304, 4313, 4325, 4352, 4376, 4394, 4402, 4405, 4412, 4415, 4417, 4424, 4430, 4462, 4471, 4473, 4495, 4511, 4520, 4524, 4530, 4549, 4564, 4579, 4593, 4594, 4608, 4613, 4619, 4664, 4668, 4679, 4699, 4704, 4705, 4706, 4754, 4794, 4820, 4823, 4825, 4828, 4834, 4836, 4885, 4892, 4909, 4910, 4924, 4928, 4934, 4936, 4937, 4941, 4945, 4958, 4960, 4965, 4966, 4975, 4980, 4986, 4992, 5007, 5016, 5036, 5045, 5056, 5085, 5088, 5091, 5121, 5158, 5182, 5192, 5205, 5214, 5225, 5257, 5288, 5292, 5297, 5310, 5316, 5318, 5323, 5344, 5347, 5375, 5381, 5382, 5391, 5394, 5399, 5402, 5424, 5431, 5434, 5472, 5499, 5514, 5518, 5531, 5538, 5545, 5547, 5576, 5579, 5580, 5581, 5589, 5593, 5594, 5600, 5616, 5629, 5630, 5642, 5651, 5666, 5676, 5677, 5705, 5706, 5708, 5713, 5724, 5732, 5749, 5754, 5766, 5775, 5785, 5798, 5810, 5814, 5823, 5825, 5829, 5850, 5853, 5859, 5879, 5881, 5882, 5908, 5913, 5920, 5925, 5926, 5951, 5963, 5978, 5981, 5982, 5990, 6004, 6017, 6024, 6037, 6042, 6051, 6053, 6055, 6056, 6057, 6084, 6092, 6097, 6104, 6115, 6134, 6139, 6147, 6149, 6151, 6187, 6190, 6202, 6216, 6219, 6220, 6222, 6234, 6264, 6267, 6296, 6307, 6312, 6314, 6326, 6357, 6361, 6363, 6370, 6378, 6383, 6398, 6406, 6415, 6441, 6443, 6444, 6449, 6450, 6481, 6487, 6501, 6502, 6510, 6516, 6522, 6546, 6548, 6553, 6576, 6580, 6585, 6594, 6608, 6632, 6637, 6638, 6659, 6666, 6668, 6673, 6687, 6689, 6713, 6715, 6716, 6723, 6728, 6733, 6736, 6737, 6740, 6751, 6771, 6777, 6781, 6791, 6800, 6801, 6813, 6815, 6840, 6842, 6851, 6854, 6855, 6857, 6865, 6866, 6874, 6894, 6895, 6896, 6928, 6930, 6940, 6958, 6966, 6973, 6980, 6981, 6991, 7004, 7021, 7031, 7033, 7047, 7049, 7057, 7058, 7065, 7068, 7070, 7077, 7086, 7102, 7114, 7123, 7129, 7147, 7149, 7169, 7192, 7214, 7217, 7218, 7233, 7237, 7241, 7250, 7258, 7266, 7273, 7276, 7283, 7287, 7319, 7321, 7348, 7361, 7362, 7367, 7373, 7375, 7381, 7389, 7402, 7403, 7409, 7410, 7421, 7423, 7425, 7440, 7441, 7446, 7451, 7474, 7475, 7491, 7496, 7501, 7512, 7514, 7535, 7558, 7567, 7577, 7581, 7588, 7590, 7594, 7599, 7619, 7622, 7632, 7662, 7664, 7668, 7673, 7676, 7677, 7678, 7679, 7690, 7722, 7724, 7726, 7729, 7731, 7743, 7777, 7786, 7814, 7831, 7840, 7845, 7859, 7863, 7865, 7872, 7875, 7877, 7883, 7884, 7887, 7905, 7907, 7915, 7922, 7937, 7941, 7956, 7962, 7972, 7985, 8000, 8038, 8044, 8069, 8073, 8084, 8099, 8109, 8120, 8121, 8133, 8134, 8137, 8162, 8165, 8169, 8171, 8175, 8183, 8214, 8264, 8267, 8274, 8275, 8293, 8296, 8306, 8315, 8334, 8338, 8344, 8347, 8350, 8355, 8362, 8368, 8390, 8400, 8414, 8417, 8418, 8421, 8429, 8435, 8440, 8441, 8443, 8456, 8471, 8474, 8481, 8482, 8502, 8510, 8513, 8522, 8534, 8549, 8570, 8583, 8593, 8597, 8632, 8633, 8634, 8641, 8648, 8652, 8654, 8658, 8678, 8688, 8691, 8698, 8708, 8713, 8718, 8735, 8739, 8750, 8769, 8777, 8778, 8779, 8800, 8802, 8815, 8818, 8839, 8841, 8854, 8859, 8865, 8878, 8923, 8951, 8958, 8961, 8967, 8979, 8986, 9003, 9004, 9009, 9016, 9029, 9031, 9033, 9047, 9048, 9058, 9074, 9077, 9092, 9098, 9113, 9119, 9135, 9154, 9164, 9165, 9173, 9174, 9185, 9186, 9190, 9194, 9195, 9212, 9215, 9222, 9227, 9230, 9246, 9270, 9278, 9294, 9295, 9298, 9299, 9320, 9323, 9332, 9348, 9350, 9354, 9365, 9398, 9399, 9401, 9416, 9418, 9426, 9431, 9440, 9452, 9453, 9459, 9471, 9480, 9491, 9513, 9514, 9517, 9520, 9537, 9538, 9541, 9549, 9552, 9575, 9587, 9607, 9609, 9627, 9635, 9636, 9649, 9663, 9665, 9670, 9671, 9682, 9685, 9702, 9714, 9718, 9723, 9741, 9748, 9754, 9756, 9759, 9775, 9783, 9786, 9792, 9799, 9807, 9808, 9822, 9827, 9862, 9869, 9873, 9876, 9877, 9889, 9895, 9921, 9922, 9943, 9962, 9963, 9965, 9977, 9978, 9990, 9995], "external_url": "https://colorpunx.io/colors?i=209&name=#ead9d9", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954401822696013825"}, "#ffffff": {"id": 210, "name": "#ffffff", "description": "#ffffff is one of 222 colors in the cryptopunx color pallette. It is used by 1133 unique punks", "hash": "bf9e221557ac1c4e5822a27d9d1979af", "image": "https://gateway.pinata.cloud/ipfs/QmRU4uKnW11sE6FDX1HwmUXxTw7dTCmsSskQUyzpMYZMui?filename=colorpunx210.png", "punks": [7, 9, 25, 57, 65, 81, 82, 92, 94, 101, 107, 108, 113, 123, 126, 128, 134, 141, 147, 167, 169, 179, 182, 185, 190, 202, 220, 224, 227, 243, 261, 264, 272, 280, 284, 287, 300, 301, 314, 315, 322, 325, 326, 340, 343, 354, 355, 373, 377, 394, 410, 415, 418, 429, 431, 453, 459, 475, 485, 502, 505, 515, 526, 529, 537, 539, 546, 549, 558, 568, 573, 585, 595, 598, 612, 614, 631, 642, 644, 654, 658, 684, 710, 719, 764, 781, 794, 813, 819, 821, 845, 846, 863, 875, 899, 910, 916, 928, 934, 940, 942, 959, 961, 962, 964, 971, 992, 999, 1002, 1010, 1016, 1019, 1023, 1041, 1058, 1067, 1070, 1093, 1107, 1115, 1140, 1156, 1163, 1167, 1178, 1195, 1196, 1209, 1215, 1220, 1224, 1247, 1260, 1278, 1279, 1302, 1317, 1330, 1333, 1358, 1359, 1364, 1371, 1379, 1409, 1424, 1435, 1440, 1445, 1456, 1462, 1489, 1492, 1494, 1501, 1503, 1514, 1529, 1533, 1566, 1570, 1573, 1579, 1591, 1606, 1607, 1613, 1627, 1629, 1631, 1656, 1673, 1675, 1680, 1681, 1694, 1697, 1712, 1716, 1718, 1730, 1732, 1776, 1780, 1781, 1790, 1812, 1817, 1819, 1825, 1860, 1868, 1871, 1874, 1884, 1887, 1891, 1898, 1901, 1908, 1920, 1929, 1954, 1962, 2003, 2009, 2013, 2015, 2034, 2040, 2044, 2063, 2070, 2075, 2081, 2083, 2087, 2089, 2099, 2104, 2105, 2107, 2114, 2133, 2155, 2163, 2180, 2190, 2223, 2226, 2227, 2234, 2239, 2244, 2267, 2273, 2291, 2298, 2323, 2330, 2337, 2341, 2357, 2360, 2361, 2363, 2373, 2376, 2381, 2386, 2393, 2401, 2403, 2419, 2420, 2421, 2432, 2449, 2452, 2495, 2501, 2508, 2514, 2519, 2527, 2545, 2552, 2558, 2560, 2572, 2573, 2576, 2585, 2587, 2606, 2607, 2614, 2623, 2624, 2626, 2631, 2632, 2645, 2664, 2671, 2680, 2690, 2703, 2707, 2723, 2742, 2749, 2753, 2757, 2766, 2775, 2805, 2831, 2836, 2849, 2851, 2852, 2854, 2859, 2862, 2863, 2867, 2872, 2882, 2885, 2891, 2897, 2903, 2925, 2928, 2950, 2951, 2957, 2958, 2976, 2978, 2985, 2992, 3055, 3057, 3059, 3066, 3074, 3076, 3091, 3092, 3094, 3096, 3097, 3100, 3102, 3119, 3135, 3136, 3139, 3158, 3163, 3170, 3178, 3183, 3200, 3211, 3240, 3273, 3282, 3293, 3307, 3319, 3327, 3331, 3358, 3367, 3372, 3373, 3380, 3387, 3394, 3405, 3410, 3422, 3423, 3435, 3437, 3455, 3467, 3468, 3469, 3473, 3479, 3482, 3490, 3506, 3511, 3514, 3519, 3523, 3524, 3525, 3531, 3544, 3559, 3564, 3565, 3577, 3592, 3600, 3601, 3603, 3631, 3642, 3644, 3662, 3668, 3673, 3677, 3681, 3685, 3686, 3687, 3694, 3702, 3714, 3718, 3727, 3742, 3743, 3745, 3748, 3761, 3781, 3818, 3822, 3829, 3830, 3838, 3849, 3854, 3865, 3877, 3878, 3889, 3903, 3917, 3932, 3944, 3958, 3977, 3980, 3993, 4009, 4013, 4015, 4020, 4021, 4040, 4048, 4072, 4086, 4088, 4094, 4101, 4103, 4111, 4112, 4122, 4123, 4131, 4142, 4153, 4158, 4159, 4164, 4184, 4203, 4212, 4214, 4221, 4240, 4245, 4247, 4256, 4257, 4263, 4268, 4278, 4281, 4288, 4300, 4301, 4304, 4312, 4313, 4324, 4346, 4347, 4350, 4354, 4358, 4368, 4369, 4372, 4383, 4387, 4388, 4390, 4402, 4405, 4412, 4414, 4415, 4418, 4424, 4484, 4485, 4492, 4498, 4505, 4517, 4524, 4530, 4533, 4535, 4545, 4549, 4550, 4552, 4557, 4566, 4567, 4575, 4578, 4581, 4585, 4590, 4593, 4594, 4602, 4605, 4609, 4639, 4646, 4664, 4685, 4686, 4697, 4698, 4699, 4704, 4705, 4707, 4708, 4740, 4747, 4754, 4769, 4773, 4786, 4812, 4824, 4825, 4836, 4844, 4846, 4856, 4867, 4876, 4880, 4881, 4884, 4895, 4905, 4910, 4924, 4934, 4936, 4942, 4944, 4945, 4960, 4966, 4986, 4987, 4988, 5000, 5003, 5004, 5015, 5027, 5029, 5036, 5045, 5047, 5053, 5059, 5075, 5083, 5085, 5135, 5140, 5147, 5163, 5178, 5182, 5191, 5205, 5213, 5223, 5225, 5232, 5243, 5249, 5257, 5258, 5273, 5274, 5275, 5292, 5298, 5316, 5317, 5323, 5324, 5336, 5339, 5344, 5375, 5382, 5394, 5404, 5415, 5434, 5440, 5456, 5472, 5479, 5487, 5488, 5491, 5499, 5509, 5513, 5533, 5538, 5539, 5549, 5554, 5556, 5559, 5580, 5586, 5590, 5668, 5696, 5698, 5715, 5727, 5730, 5748, 5762, 5766, 5795, 5806, 5812, 5823, 5824, 5838, 5850, 5853, 5866, 5868, 5876, 5881, 5885, 5888, 5890, 5901, 5903, 5915, 5920, 5932, 5934, 5937, 5939, 5955, 5976, 5990, 5995, 6009, 6013, 6014, 6017, 6035, 6037, 6040, 6049, 6053, 6055, 6062, 6063, 6094, 6097, 6108, 6114, 6115, 6128, 6139, 6141, 6168, 6222, 6227, 6228, 6233, 6255, 6264, 6270, 6285, 6292, 6296, 6312, 6314, 6315, 6345, 6349, 6352, 6373, 6382, 6398, 6410, 6423, 6430, 6441, 6443, 6444, 6454, 6466, 6467, 6487, 6488, 6493, 6498, 6501, 6502, 6513, 6536, 6553, 6575, 6580, 6589, 6599, 6601, 6603, 6608, 6622, 6630, 6632, 6656, 6657, 6659, 6669, 6675, 6680, 6682, 6687, 6695, 6698, 6708, 6715, 6727, 6731, 6733, 6740, 6744, 6753, 6779, 6781, 6782, 6796, 6801, 6805, 6807, 6815, 6819, 6832, 6833, 6840, 6842, 6847, 6851, 6862, 6866, 6868, 6869, 6871, 6876, 6886, 6893, 6905, 6928, 6945, 6958, 6963, 6968, 6971, 6975, 6976, 6994, 7001, 7018, 7033, 7049, 7058, 7061, 7062, 7068, 7075, 7078, 7083, 7090, 7092, 7096, 7102, 7110, 7122, 7150, 7159, 7184, 7185, 7199, 7201, 7216, 7227, 7229, 7232, 7236, 7237, 7250, 7258, 7260, 7262, 7264, 7280, 7283, 7285, 7288, 7300, 7308, 7319, 7321, 7323, 7355, 7370, 7372, 7373, 7378, 7397, 7399, 7402, 7406, 7408, 7423, 7427, 7435, 7438, 7439, 7441, 7455, 7463, 7464, 7474, 7475, 7491, 7512, 7535, 7541, 7546, 7547, 7550, 7571, 7572, 7582, 7588, 7590, 7594, 7607, 7637, 7657, 7658, 7663, 7666, 7676, 7678, 7679, 7684, 7691, 7692, 7715, 7716, 7722, 7723, 7728, 7731, 7738, 7739, 7743, 7760, 7767, 7785, 7795, 7805, 7821, 7832, 7840, 7847, 7855, 7859, 7861, 7894, 7899, 7907, 7909, 7922, 7934, 7942, 7943, 7953, 7956, 7969, 7981, 7988, 7990, 8008, 8014, 8030, 8038, 8042, 8049, 8050, 8072, 8084, 8115, 8121, 8127, 8134, 8151, 8157, 8159, 8166, 8169, 8178, 8179, 8192, 8198, 8202, 8212, 8272, 8282, 8286, 8290, 8292, 8311, 8325, 8344, 8347, 8348, 8355, 8361, 8365, 8368, 8376, 8406, 8417, 8435, 8450, 8455, 8466, 8471, 8481, 8482, 8486, 8505, 8510, 8511, 8522, 8525, 8532, 8549, 8552, 8579, 8583, 8588, 8591, 8593, 8637, 8638, 8648, 8654, 8664, 8672, 8688, 8691, 8692, 8708, 8716, 8725, 8733, 8741, 8748, 8753, 8763, 8767, 8769, 8779, 8800, 8804, 8811, 8818, 8831, 8834, 8837, 8849, 8864, 8867, 8872, 8882, 8896, 8899, 8900, 8907, 8909, 8910, 8914, 8917, 8920, 8921, 8924, 8934, 8941, 8961, 8969, 9003, 9010, 9023, 9029, 9039, 9045, 9059, 9064, 9077, 9087, 9088, 9098, 9138, 9149, 9154, 9166, 9167, 9188, 9190, 9193, 9199, 9206, 9223, 9224, 9227, 9246, 9275, 9276, 9291, 9294, 9298, 9311, 9323, 9341, 9348, 9380, 9413, 9414, 9422, 9423, 9426, 9427, 9449, 9452, 9471, 9479, 9481, 9486, 9487, 9511, 9512, 9517, 9539, 9541, 9549, 9552, 9554, 9559, 9561, 9573, 9575, 9576, 9589, 9597, 9609, 9615, 9618, 9619, 9627, 9635, 9643, 9649, 9654, 9665, 9670, 9674, 9678, 9701, 9718, 9748, 9751, 9754, 9764, 9768, 9783, 9796, 9808, 9811, 9819, 9825, 9837, 9855, 9861, 9862, 9869, 9876, 9886, 9895, 9897, 9898, 9906, 9934, 9936, 9938, 9943, 9948, 9959, 9990, 9998], "external_url": "https://colorpunx.io/colors?i=210&name=#ffffff", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954402922207641601"}, "#562600": {"id": 211, "name": "#562600", "description": "#562600 is one of 222 colors in the cryptopunx color pallette. It is used by 1368 unique punks", "hash": "1ed9fd4aa566054f1af5c915d99fc549", "image": "https://gateway.pinata.cloud/ipfs/Qmbmsg1tRtSFgDLYds26rNCwWi4wwR6hexRhVcfqSNL1hB?filename=colorpunx211.png", "punks": [1, 8, 12, 14, 22, 25, 30, 31, 42, 47, 54, 56, 66, 74, 77, 79, 85, 89, 104, 109, 110, 111, 114, 115, 132, 137, 140, 144, 154, 155, 161, 163, 177, 180, 181, 186, 190, 191, 197, 200, 209, 211, 212, 214, 230, 239, 242, 245, 256, 261, 265, 267, 299, 303, 316, 320, 323, 326, 334, 344, 349, 357, 367, 373, 378, 391, 398, 401, 402, 408, 416, 417, 418, 427, 430, 440, 441, 443, 444, 445, 451, 454, 458, 459, 461, 464, 468, 474, 478, 487, 493, 495, 504, 512, 524, 531, 532, 537, 548, 554, 556, 564, 579, 582, 584, 585, 592, 595, 597, 639, 650, 652, 661, 663, 670, 678, 680, 688, 697, 699, 700, 708, 709, 721, 727, 731, 741, 743, 748, 757, 758, 761, 776, 798, 804, 807, 809, 817, 832, 833, 840, 854, 861, 862, 876, 885, 889, 891, 901, 905, 907, 913, 923, 931, 932, 933, 941, 942, 943, 947, 955, 959, 964, 973, 986, 999, 1000, 1004, 1008, 1014, 1015, 1017, 1023, 1027, 1035, 1040, 1052, 1056, 1063, 1071, 1079, 1086, 1090, 1098, 1099, 1104, 1106, 1108, 1116, 1127, 1129, 1140, 1143, 1145, 1158, 1166, 1177, 1184, 1189, 1194, 1200, 1211, 1226, 1227, 1265, 1269, 1275, 1277, 1279, 1281, 1289, 1306, 1317, 1319, 1322, 1327, 1332, 1338, 1343, 1355, 1359, 1364, 1367, 1376, 1378, 1381, 1382, 1388, 1391, 1395, 1401, 1407, 1413, 1429, 1431, 1434, 1436, 1441, 1442, 1446, 1458, 1463, 1473, 1476, 1482, 1506, 1507, 1512, 1524, 1527, 1537, 1542, 1543, 1547, 1548, 1556, 1558, 1560, 1561, 1564, 1577, 1581, 1584, 1600, 1602, 1610, 1613, 1617, 1621, 1625, 1633, 1639, 1643, 1644, 1645, 1647, 1652, 1664, 1668, 1684, 1692, 1695, 1702, 1711, 1731, 1738, 1740, 1750, 1769, 1782, 1792, 1796, 1816, 1818, 1825, 1830, 1838, 1846, 1847, 1855, 1870, 1890, 1898, 1902, 1927, 1929, 1931, 1938, 1943, 1946, 1953, 1961, 1964, 1970, 1983, 1995, 1999, 2008, 2009, 2012, 2017, 2040, 2041, 2043, 2047, 2052, 2055, 2067, 2080, 2103, 2117, 2118, 2124, 2133, 2134, 2149, 2151, 2153, 2167, 2170, 2171, 2172, 2173, 2181, 2188, 2194, 2200, 2204, 2224, 2250, 2251, 2263, 2271, 2282, 2288, 2298, 2307, 2308, 2312, 2324, 2339, 2351, 2381, 2382, 2403, 2406, 2409, 2411, 2416, 2421, 2422, 2427, 2438, 2445, 2450, 2458, 2463, 2471, 2475, 2478, 2480, 2485, 2487, 2489, 2503, 2505, 2511, 2516, 2519, 2522, 2525, 2534, 2536, 2546, 2557, 2561, 2563, 2574, 2577, 2578, 2597, 2602, 2611, 2613, 2635, 2637, 2648, 2656, 2662, 2665, 2672, 2676, 2677, 2678, 2684, 2691, 2694, 2705, 2718, 2733, 2739, 2742, 2747, 2757, 2763, 2765, 2771, 2790, 2791, 2792, 2798, 2800, 2805, 2808, 2812, 2813, 2814, 2818, 2821, 2827, 2834, 2841, 2843, 2850, 2863, 2865, 2877, 2886, 2888, 2889, 2899, 2905, 2907, 2908, 2909, 2912, 2916, 2919, 2933, 2934, 2942, 2950, 2955, 2970, 2985, 2987, 2995, 2996, 3003, 3017, 3036, 3037, 3039, 3059, 3063, 3069, 3083, 3103, 3105, 3106, 3107, 3143, 3144, 3150, 3160, 3164, 3166, 3168, 3169, 3172, 3177, 3189, 3190, 3192, 3199, 3203, 3206, 3213, 3215, 3219, 3235, 3254, 3260, 3261, 3267, 3286, 3289, 3290, 3299, 3309, 3311, 3324, 3326, 3335, 3348, 3353, 3359, 3365, 3368, 3370, 3385, 3400, 3401, 3404, 3409, 3425, 3428, 3432, 3433, 3435, 3446, 3453, 3472, 3480, 3482, 3483, 3485, 3502, 3514, 3515, 3518, 3527, 3529, 3533, 3551, 3554, 3558, 3561, 3568, 3571, 3580, 3583, 3590, 3596, 3599, 3617, 3620, 3621, 3630, 3643, 3647, 3649, 3652, 3659, 3663, 3669, 3682, 3689, 3696, 3705, 3711, 3723, 3728, 3729, 3744, 3753, 3757, 3774, 3779, 3782, 3783, 3788, 3789, 3790, 3793, 3794, 3797, 3798, 3801, 3802, 3810, 3823, 3827, 3828, 3832, 3836, 3852, 3856, 3863, 3868, 3887, 3898, 3914, 3920, 3933, 3935, 3967, 3985, 3992, 4014, 4015, 4022, 4023, 4029, 4037, 4039, 4040, 4050, 4064, 4069, 4071, 4074, 4078, 4081, 4085, 4098, 4103, 4105, 4112, 4127, 4135, 4137, 4146, 4161, 4170, 4192, 4193, 4195, 4196, 4200, 4207, 4214, 4236, 4250, 4252, 4277, 4291, 4292, 4300, 4315, 4317, 4319, 4321, 4322, 4323, 4328, 4329, 4340, 4363, 4391, 4392, 4398, 4403, 4411, 4414, 4422, 4444, 4457, 4463, 4475, 4477, 4478, 4493, 4500, 4502, 4514, 4525, 4526, 4529, 4537, 4541, 4543, 4557, 4558, 4563, 4568, 4583, 4591, 4596, 4612, 4627, 4631, 4632, 4633, 4634, 4644, 4650, 4651, 4657, 4661, 4671, 4676, 4677, 4681, 4684, 4685, 4686, 4688, 4695, 4708, 4709, 4711, 4718, 4725, 4726, 4728, 4739, 4755, 4765, 4771, 4775, 4782, 4785, 4788, 4793, 4798, 4804, 4807, 4840, 4841, 4847, 4859, 4866, 4867, 4875, 4876, 4886, 4902, 4912, 4922, 4926, 4935, 4939, 4953, 4962, 4971, 4973, 4978, 4983, 4998, 5001, 5011, 5015, 5018, 5021, 5022, 5025, 5040, 5047, 5053, 5061, 5068, 5076, 5098, 5100, 5122, 5123, 5130, 5131, 5137, 5142, 5144, 5168, 5169, 5174, 5195, 5196, 5201, 5207, 5222, 5224, 5227, 5235, 5236, 5244, 5255, 5256, 5259, 5262, 5267, 5278, 5289, 5303, 5306, 5308, 5311, 5313, 5322, 5338, 5339, 5340, 5348, 5349, 5362, 5371, 5374, 5387, 5392, 5407, 5416, 5430, 5433, 5445, 5446, 5455, 5456, 5460, 5462, 5466, 5470, 5486, 5491, 5497, 5498, 5509, 5520, 5524, 5525, 5544, 5554, 5559, 5560, 5562, 5584, 5595, 5613, 5614, 5619, 5625, 5638, 5670, 5680, 5682, 5684, 5686, 5688, 5701, 5723, 5726, 5733, 5738, 5751, 5760, 5771, 5789, 5791, 5800, 5802, 5803, 5809, 5811, 5812, 5816, 5817, 5831, 5836, 5838, 5839, 5855, 5861, 5863, 5866, 5868, 5871, 5883, 5886, 5890, 5903, 5911, 5917, 5928, 5930, 5931, 5934, 5945, 5959, 5973, 5984, 5985, 5989, 5991, 5996, 5998, 6001, 6003, 6008, 6016, 6035, 6095, 6099, 6105, 6111, 6114, 6121, 6122, 6128, 6140, 6143, 6146, 6163, 6164, 6170, 6173, 6181, 6192, 6193, 6199, 6211, 6229, 6230, 6233, 6235, 6239, 6257, 6266, 6276, 6279, 6305, 6308, 6322, 6335, 6346, 6348, 6351, 6359, 6362, 6369, 6375, 6376, 6382, 6387, 6395, 6397, 6400, 6404, 6428, 6430, 6447, 6448, 6451, 6462, 6465, 6466, 6474, 6480, 6482, 6483, 6490, 6497, 6503, 6514, 6532, 6551, 6559, 6581, 6599, 6603, 6604, 6620, 6629, 6643, 6646, 6656, 6660, 6663, 6677, 6680, 6683, 6694, 6719, 6724, 6734, 6741, 6742, 6750, 6760, 6767, 6786, 6788, 6794, 6802, 6805, 6841, 6860, 6903, 6904, 6907, 6910, 6926, 6950, 6956, 6963, 6964, 6967, 6972, 6985, 6986, 6989, 6993, 6998, 7002, 7003, 7005, 7006, 7008, 7009, 7011, 7029, 7043, 7064, 7074, 7080, 7093, 7104, 7111, 7115, 7118, 7130, 7155, 7159, 7160, 7179, 7185, 7190, 7199, 7208, 7215, 7220, 7232, 7243, 7253, 7270, 7292, 7299, 7300, 7306, 7310, 7316, 7323, 7331, 7345, 7347, 7349, 7350, 7351, 7354, 7358, 7391, 7392, 7428, 7454, 7460, 7484, 7485, 7486, 7492, 7495, 7506, 7510, 7517, 7525, 7528, 7532, 7533, 7544, 7547, 7564, 7569, 7574, 7582, 7587, 7591, 7604, 7608, 7618, 7647, 7687, 7688, 7692, 7702, 7708, 7709, 7711, 7730, 7735, 7747, 7748, 7749, 7754, 7755, 7758, 7764, 7766, 7771, 7779, 7782, 7783, 7791, 7794, 7805, 7808, 7813, 7835, 7842, 7843, 7869, 7873, 7885, 7890, 7893, 7917, 7919, 7923, 7931, 7935, 7942, 7969, 7974, 7975, 7982, 7989, 7995, 8002, 8004, 8005, 8016, 8030, 8039, 8042, 8049, 8061, 8063, 8068, 8078, 8080, 8083, 8088, 8089, 8092, 8095, 8101, 8117, 8147, 8186, 8199, 8200, 8202, 8209, 8213, 8218, 8231, 8232, 8234, 8237, 8238, 8244, 8262, 8269, 8272, 8276, 8285, 8297, 8310, 8312, 8313, 8319, 8320, 8325, 8328, 8341, 8349, 8351, 8364, 8369, 8373, 8389, 8396, 8409, 8410, 8413, 8427, 8447, 8466, 8467, 8490, 8493, 8499, 8519, 8532, 8536, 8540, 8546, 8562, 8564, 8571, 8577, 8590, 8608, 8621, 8629, 8630, 8637, 8642, 8643, 8656, 8663, 8664, 8667, 8680, 8683, 8686, 8697, 8726, 8727, 8730, 8733, 8751, 8763, 8774, 8785, 8798, 8799, 8801, 8809, 8812, 8817, 8834, 8848, 8851, 8856, 8867, 8882, 8883, 8888, 8891, 8917, 8940, 8946, 8970, 8985, 8996, 9000, 9012, 9013, 9038, 9041, 9057, 9060, 9068, 9070, 9075, 9076, 9081, 9088, 9100, 9108, 9116, 9123, 9127, 9130, 9132, 9140, 9143, 9150, 9151, 9157, 9175, 9184, 9189, 9192, 9209, 9218, 9232, 9240, 9243, 9287, 9291, 9293, 9304, 9322, 9353, 9364, 9369, 9379, 9409, 9420, 9437, 9442, 9450, 9451, 9457, 9461, 9464, 9470, 9482, 9483, 9485, 9499, 9503, 9504, 9507, 9533, 9555, 9561, 9571, 9572, 9604, 9606, 9612, 9616, 9628, 9629, 9631, 9634, 9641, 9643, 9656, 9657, 9659, 9678, 9683, 9690, 9695, 9697, 9703, 9705, 9720, 9729, 9737, 9752, 9753, 9764, 9765, 9767, 9768, 9773, 9779, 9791, 9819, 9821, 9823, 9830, 9832, 9833, 9835, 9863, 9867, 9887, 9893, 9897, 9898, 9903, 9910, 9919, 9928, 9984, 9986, 9989], "external_url": "https://colorpunx.io/colors?i=211&name=#562600", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954404021719269377"}, "#723709": {"id": 212, "name": "#723709", "description": "#723709 is one of 222 colors in the cryptopunx color pallette. It is used by 1368 unique punks", "hash": "061b74f527e8efdd49ef4ae51c135e9d", "image": "https://gateway.pinata.cloud/ipfs/QmYWWH8XGWor6uNxjeFg58gXrQm8iUJp46epVXUbeUL86b?filename=colorpunx212.png", "punks": [1, 8, 12, 14, 22, 25, 30, 31, 42, 47, 54, 56, 66, 74, 77, 79, 85, 89, 104, 109, 110, 111, 114, 115, 132, 137, 140, 144, 154, 155, 161, 163, 177, 180, 181, 186, 190, 191, 197, 200, 209, 211, 212, 214, 230, 239, 242, 245, 256, 261, 265, 267, 299, 303, 316, 320, 323, 326, 334, 344, 349, 357, 367, 373, 378, 391, 398, 401, 402, 408, 416, 417, 418, 427, 430, 440, 441, 443, 444, 445, 451, 454, 458, 459, 461, 464, 468, 474, 478, 487, 493, 495, 504, 512, 524, 531, 532, 537, 548, 554, 556, 564, 579, 582, 584, 585, 592, 595, 597, 639, 650, 652, 661, 663, 670, 678, 680, 688, 697, 699, 700, 708, 709, 721, 727, 731, 741, 743, 748, 757, 758, 761, 776, 798, 804, 807, 809, 817, 832, 833, 840, 854, 861, 862, 876, 885, 889, 891, 901, 905, 907, 913, 923, 931, 932, 933, 941, 942, 943, 947, 955, 959, 964, 973, 986, 999, 1000, 1004, 1008, 1014, 1015, 1017, 1023, 1027, 1035, 1040, 1052, 1056, 1063, 1071, 1079, 1086, 1090, 1098, 1099, 1104, 1106, 1108, 1116, 1127, 1129, 1140, 1143, 1145, 1158, 1166, 1177, 1184, 1189, 1194, 1200, 1211, 1226, 1227, 1265, 1269, 1275, 1277, 1279, 1281, 1289, 1306, 1317, 1319, 1322, 1327, 1332, 1338, 1343, 1355, 1359, 1364, 1367, 1376, 1378, 1381, 1382, 1388, 1391, 1395, 1401, 1407, 1413, 1429, 1431, 1434, 1436, 1441, 1442, 1446, 1458, 1463, 1473, 1476, 1482, 1506, 1507, 1512, 1524, 1527, 1537, 1542, 1543, 1547, 1548, 1556, 1558, 1560, 1561, 1564, 1577, 1581, 1584, 1600, 1602, 1610, 1613, 1617, 1621, 1625, 1633, 1639, 1643, 1644, 1645, 1647, 1652, 1664, 1668, 1684, 1692, 1695, 1702, 1711, 1731, 1738, 1740, 1750, 1769, 1782, 1792, 1796, 1816, 1818, 1825, 1830, 1838, 1846, 1847, 1855, 1870, 1890, 1898, 1902, 1927, 1929, 1931, 1938, 1943, 1946, 1953, 1961, 1964, 1970, 1983, 1995, 1999, 2008, 2009, 2012, 2017, 2040, 2041, 2043, 2047, 2052, 2055, 2067, 2080, 2103, 2117, 2118, 2124, 2133, 2134, 2149, 2151, 2153, 2167, 2170, 2171, 2172, 2173, 2181, 2188, 2194, 2200, 2204, 2224, 2250, 2251, 2263, 2271, 2282, 2288, 2298, 2307, 2308, 2312, 2324, 2339, 2351, 2381, 2382, 2403, 2406, 2409, 2411, 2416, 2421, 2422, 2427, 2438, 2445, 2450, 2458, 2463, 2471, 2475, 2478, 2480, 2485, 2487, 2489, 2503, 2505, 2511, 2516, 2519, 2522, 2525, 2534, 2536, 2546, 2557, 2561, 2563, 2574, 2577, 2578, 2597, 2602, 2611, 2613, 2635, 2637, 2648, 2656, 2662, 2665, 2672, 2676, 2677, 2678, 2684, 2691, 2694, 2705, 2718, 2733, 2739, 2742, 2747, 2757, 2763, 2765, 2771, 2790, 2791, 2792, 2798, 2800, 2805, 2808, 2812, 2813, 2814, 2818, 2821, 2827, 2834, 2841, 2843, 2850, 2863, 2865, 2877, 2886, 2888, 2889, 2899, 2905, 2907, 2908, 2909, 2912, 2916, 2919, 2933, 2934, 2942, 2950, 2955, 2970, 2985, 2987, 2995, 2996, 3003, 3017, 3036, 3037, 3039, 3059, 3063, 3069, 3083, 3103, 3105, 3106, 3107, 3143, 3144, 3150, 3160, 3164, 3166, 3168, 3169, 3172, 3177, 3189, 3190, 3192, 3199, 3203, 3206, 3213, 3215, 3219, 3235, 3254, 3260, 3261, 3267, 3286, 3289, 3290, 3299, 3309, 3311, 3324, 3326, 3335, 3348, 3353, 3359, 3365, 3368, 3370, 3385, 3400, 3401, 3404, 3409, 3425, 3428, 3432, 3433, 3435, 3446, 3453, 3472, 3480, 3482, 3483, 3485, 3502, 3514, 3515, 3518, 3527, 3529, 3533, 3551, 3554, 3558, 3561, 3568, 3571, 3580, 3583, 3590, 3596, 3599, 3617, 3620, 3621, 3630, 3643, 3647, 3649, 3652, 3659, 3663, 3669, 3682, 3689, 3696, 3705, 3711, 3723, 3728, 3729, 3744, 3753, 3757, 3774, 3779, 3782, 3783, 3788, 3789, 3790, 3793, 3794, 3797, 3798, 3801, 3802, 3810, 3823, 3827, 3828, 3832, 3836, 3852, 3856, 3863, 3868, 3887, 3898, 3914, 3920, 3933, 3935, 3967, 3985, 3992, 4014, 4015, 4022, 4023, 4029, 4037, 4039, 4040, 4050, 4064, 4069, 4071, 4074, 4078, 4081, 4085, 4098, 4103, 4105, 4112, 4127, 4135, 4137, 4146, 4161, 4170, 4192, 4193, 4195, 4196, 4200, 4207, 4214, 4236, 4250, 4252, 4277, 4291, 4292, 4300, 4315, 4317, 4319, 4321, 4322, 4323, 4328, 4329, 4340, 4363, 4391, 4392, 4398, 4403, 4411, 4414, 4422, 4444, 4457, 4463, 4475, 4477, 4478, 4493, 4500, 4502, 4514, 4525, 4526, 4529, 4537, 4541, 4543, 4557, 4558, 4563, 4568, 4583, 4591, 4596, 4612, 4627, 4631, 4632, 4633, 4634, 4644, 4650, 4651, 4657, 4661, 4671, 4676, 4677, 4681, 4684, 4685, 4686, 4688, 4695, 4708, 4709, 4711, 4718, 4725, 4726, 4728, 4739, 4755, 4765, 4771, 4775, 4782, 4785, 4788, 4793, 4798, 4804, 4807, 4840, 4841, 4847, 4859, 4866, 4867, 4875, 4876, 4886, 4902, 4912, 4922, 4926, 4935, 4939, 4953, 4962, 4971, 4973, 4978, 4983, 4998, 5001, 5011, 5015, 5018, 5021, 5022, 5025, 5040, 5047, 5053, 5061, 5068, 5076, 5098, 5100, 5122, 5123, 5130, 5131, 5137, 5142, 5144, 5168, 5169, 5174, 5195, 5196, 5201, 5207, 5222, 5224, 5227, 5235, 5236, 5244, 5255, 5256, 5259, 5262, 5267, 5278, 5289, 5303, 5306, 5308, 5311, 5313, 5322, 5338, 5339, 5340, 5348, 5349, 5362, 5371, 5374, 5387, 5392, 5407, 5416, 5430, 5433, 5445, 5446, 5455, 5456, 5460, 5462, 5466, 5470, 5486, 5491, 5497, 5498, 5509, 5520, 5524, 5525, 5544, 5554, 5559, 5560, 5562, 5584, 5595, 5613, 5614, 5619, 5625, 5638, 5670, 5680, 5682, 5684, 5686, 5688, 5701, 5723, 5726, 5733, 5738, 5751, 5760, 5771, 5789, 5791, 5800, 5802, 5803, 5809, 5811, 5812, 5816, 5817, 5831, 5836, 5838, 5839, 5855, 5861, 5863, 5866, 5868, 5871, 5883, 5886, 5890, 5903, 5911, 5917, 5928, 5930, 5931, 5934, 5945, 5959, 5973, 5984, 5985, 5989, 5991, 5996, 5998, 6001, 6003, 6008, 6016, 6035, 6095, 6099, 6105, 6111, 6114, 6121, 6122, 6128, 6140, 6143, 6146, 6163, 6164, 6170, 6173, 6181, 6192, 6193, 6199, 6211, 6229, 6230, 6233, 6235, 6239, 6257, 6266, 6276, 6279, 6305, 6308, 6322, 6335, 6346, 6348, 6351, 6359, 6362, 6369, 6375, 6376, 6382, 6387, 6395, 6397, 6400, 6404, 6428, 6430, 6447, 6448, 6451, 6462, 6465, 6466, 6474, 6480, 6482, 6483, 6490, 6497, 6503, 6514, 6532, 6551, 6559, 6581, 6599, 6603, 6604, 6620, 6629, 6643, 6646, 6656, 6660, 6663, 6677, 6680, 6683, 6694, 6719, 6724, 6734, 6741, 6742, 6750, 6760, 6767, 6786, 6788, 6794, 6802, 6805, 6841, 6860, 6903, 6904, 6907, 6910, 6926, 6950, 6956, 6963, 6964, 6967, 6972, 6985, 6986, 6989, 6993, 6998, 7002, 7003, 7005, 7006, 7008, 7009, 7011, 7029, 7043, 7064, 7074, 7080, 7093, 7104, 7111, 7115, 7118, 7130, 7155, 7159, 7160, 7179, 7185, 7190, 7199, 7208, 7215, 7220, 7232, 7243, 7253, 7270, 7292, 7299, 7300, 7306, 7310, 7316, 7323, 7331, 7345, 7347, 7349, 7350, 7351, 7354, 7358, 7391, 7392, 7428, 7454, 7460, 7484, 7485, 7486, 7492, 7495, 7506, 7510, 7517, 7525, 7528, 7532, 7533, 7544, 7547, 7564, 7569, 7574, 7582, 7587, 7591, 7604, 7608, 7618, 7647, 7687, 7688, 7692, 7702, 7708, 7709, 7711, 7730, 7735, 7747, 7748, 7749, 7754, 7755, 7758, 7764, 7766, 7771, 7779, 7782, 7783, 7791, 7794, 7805, 7808, 7813, 7835, 7842, 7843, 7869, 7873, 7885, 7890, 7893, 7917, 7919, 7923, 7931, 7935, 7942, 7969, 7974, 7975, 7982, 7989, 7995, 8002, 8004, 8005, 8016, 8030, 8039, 8042, 8049, 8061, 8063, 8068, 8078, 8080, 8083, 8088, 8089, 8092, 8095, 8101, 8117, 8147, 8186, 8199, 8200, 8202, 8209, 8213, 8218, 8231, 8232, 8234, 8237, 8238, 8244, 8262, 8269, 8272, 8276, 8285, 8297, 8310, 8312, 8313, 8319, 8320, 8325, 8328, 8341, 8349, 8351, 8364, 8369, 8373, 8389, 8396, 8409, 8410, 8413, 8427, 8447, 8466, 8467, 8490, 8493, 8499, 8519, 8532, 8536, 8540, 8546, 8562, 8564, 8571, 8577, 8590, 8608, 8621, 8629, 8630, 8637, 8642, 8643, 8656, 8663, 8664, 8667, 8680, 8683, 8686, 8697, 8726, 8727, 8730, 8733, 8751, 8763, 8774, 8785, 8798, 8799, 8801, 8809, 8812, 8817, 8834, 8848, 8851, 8856, 8867, 8882, 8883, 8888, 8891, 8917, 8940, 8946, 8970, 8985, 8996, 9000, 9012, 9013, 9038, 9041, 9057, 9060, 9068, 9070, 9075, 9076, 9081, 9088, 9100, 9108, 9116, 9123, 9127, 9130, 9132, 9140, 9143, 9150, 9151, 9157, 9175, 9184, 9189, 9192, 9209, 9218, 9232, 9240, 9243, 9287, 9291, 9293, 9304, 9322, 9353, 9364, 9369, 9379, 9409, 9420, 9437, 9442, 9450, 9451, 9457, 9461, 9464, 9470, 9482, 9483, 9485, 9499, 9503, 9504, 9507, 9533, 9555, 9561, 9571, 9572, 9604, 9606, 9612, 9616, 9628, 9629, 9631, 9634, 9641, 9643, 9656, 9657, 9659, 9678, 9683, 9690, 9695, 9697, 9703, 9705, 9720, 9729, 9737, 9752, 9753, 9764, 9765, 9767, 9768, 9773, 9779, 9791, 9819, 9821, 9823, 9830, 9832, 9833, 9835, 9863, 9867, 9887, 9893, 9897, 9898, 9903, 9910, 9919, 9928, 9984, 9986, 9989], "external_url": "https://colorpunx.io/colors?i=212&name=#723709", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954405121230897153"}, "#a77c47": {"id": 213, "name": "#a77c47", "description": "#a77c47 is one of 222 colors in the cryptopunx color pallette. It is used by 1375 unique punks", "hash": "f2e374675afe058e6f3c81a2125a9436", "image": "https://gateway.pinata.cloud/ipfs/QmWbffRvC2WiQN3nG5SazB99Ch2gFU6JsYG9sNRPbtoFJC?filename=colorpunx213.png", "punks": [6, 9, 18, 26, 36, 43, 45, 46, 50, 51, 58, 64, 65, 69, 73, 78, 90, 95, 97, 99, 100, 102, 107, 119, 123, 124, 131, 134, 139, 148, 150, 153, 157, 165, 167, 171, 178, 198, 210, 213, 215, 216, 217, 225, 226, 227, 231, 258, 271, 272, 289, 290, 291, 295, 296, 297, 304, 307, 315, 317, 321, 329, 335, 337, 345, 346, 350, 360, 361, 362, 366, 368, 371, 385, 386, 387, 392, 396, 397, 405, 419, 421, 429, 432, 435, 436, 438, 439, 449, 453, 463, 466, 477, 480, 486, 488, 500, 501, 505, 507, 508, 510, 511, 517, 523, 525, 529, 530, 535, 543, 544, 547, 550, 551, 559, 560, 562, 565, 566, 569, 577, 578, 581, 596, 599, 604, 611, 619, 621, 625, 626, 630, 637, 642, 643, 649, 667, 669, 679, 681, 682, 686, 692, 704, 706, 707, 716, 718, 719, 736, 738, 739, 740, 746, 752, 763, 769, 774, 775, 777, 785, 787, 793, 794, 797, 806, 820, 834, 836, 841, 849, 851, 872, 878, 880, 883, 892, 908, 915, 917, 918, 929, 930, 938, 950, 952, 953, 968, 970, 980, 981, 983, 984, 989, 990, 1012, 1022, 1025, 1030, 1046, 1048, 1050, 1057, 1062, 1068, 1070, 1078, 1114, 1115, 1139, 1141, 1142, 1144, 1148, 1151, 1156, 1157, 1159, 1165, 1168, 1170, 1178, 1180, 1193, 1204, 1205, 1206, 1214, 1232, 1242, 1244, 1249, 1252, 1262, 1266, 1286, 1288, 1300, 1303, 1305, 1308, 1311, 1314, 1320, 1331, 1333, 1342, 1350, 1362, 1368, 1375, 1394, 1396, 1398, 1399, 1409, 1410, 1425, 1433, 1438, 1440, 1445, 1452, 1456, 1487, 1494, 1496, 1497, 1501, 1533, 1534, 1536, 1540, 1549, 1550, 1554, 1555, 1557, 1566, 1567, 1571, 1583, 1589, 1593, 1607, 1608, 1616, 1624, 1627, 1628, 1632, 1654, 1667, 1669, 1672, 1676, 1677, 1694, 1696, 1699, 1706, 1709, 1713, 1721, 1725, 1759, 1767, 1778, 1793, 1798, 1808, 1809, 1821, 1823, 1834, 1837, 1842, 1851, 1852, 1853, 1863, 1874, 1882, 1888, 1889, 1891, 1894, 1899, 1900, 1903, 1904, 1916, 1918, 1923, 1933, 1941, 1944, 1955, 1958, 1963, 1967, 1979, 1984, 1996, 1997, 2001, 2004, 2016, 2028, 2037, 2058, 2059, 2061, 2081, 2083, 2098, 2105, 2112, 2113, 2120, 2127, 2178, 2193, 2195, 2198, 2201, 2205, 2233, 2235, 2241, 2246, 2259, 2261, 2266, 2269, 2272, 2280, 2283, 2289, 2291, 2300, 2301, 2302, 2309, 2313, 2317, 2320, 2332, 2334, 2347, 2359, 2368, 2370, 2376, 2391, 2408, 2410, 2415, 2419, 2436, 2441, 2457, 2464, 2465, 2466, 2501, 2504, 2509, 2515, 2517, 2521, 2524, 2526, 2528, 2541, 2550, 2553, 2564, 2569, 2580, 2587, 2589, 2593, 2616, 2627, 2629, 2646, 2647, 2652, 2655, 2661, 2674, 2679, 2683, 2692, 2698, 2702, 2709, 2715, 2717, 2719, 2720, 2721, 2724, 2725, 2729, 2731, 2732, 2735, 2748, 2754, 2762, 2764, 2775, 2776, 2779, 2783, 2785, 2809, 2842, 2844, 2846, 2853, 2854, 2855, 2856, 2857, 2864, 2870, 2873, 2875, 2876, 2879, 2884, 2887, 2894, 2911, 2917, 2921, 2927, 2929, 2932, 2960, 2961, 2979, 2981, 2991, 2998, 2999, 3000, 3005, 3006, 3010, 3013, 3015, 3020, 3023, 3033, 3041, 3074, 3095, 3097, 3118, 3120, 3146, 3154, 3155, 3156, 3161, 3174, 3176, 3187, 3191, 3198, 3212, 3216, 3221, 3224, 3241, 3248, 3263, 3266, 3276, 3278, 3280, 3288, 3292, 3294, 3296, 3303, 3304, 3305, 3306, 3319, 3320, 3325, 3338, 3340, 3342, 3344, 3347, 3350, 3363, 3369, 3378, 3388, 3399, 3403, 3408, 3411, 3423, 3456, 3460, 3474, 3475, 3484, 3487, 3492, 3495, 3496, 3497, 3510, 3512, 3517, 3526, 3532, 3534, 3537, 3538, 3541, 3550, 3553, 3556, 3557, 3564, 3565, 3567, 3572, 3576, 3594, 3595, 3597, 3610, 3612, 3614, 3624, 3626, 3634, 3635, 3638, 3641, 3653, 3655, 3656, 3657, 3664, 3670, 3683, 3684, 3686, 3692, 3704, 3714, 3719, 3726, 3731, 3745, 3747, 3751, 3754, 3764, 3769, 3776, 3791, 3796, 3804, 3808, 3817, 3821, 3822, 3841, 3849, 3861, 3867, 3871, 3875, 3880, 3886, 3891, 3894, 3902, 3903, 3905, 3908, 3909, 3946, 3952, 3956, 3961, 3969, 3975, 3987, 4005, 4006, 4010, 4027, 4030, 4038, 4042, 4046, 4047, 4057, 4065, 4082, 4083, 4088, 4095, 4097, 4099, 4102, 4113, 4120, 4121, 4123, 4134, 4143, 4145, 4155, 4174, 4182, 4190, 4194, 4197, 4205, 4208, 4219, 4221, 4249, 4261, 4267, 4278, 4288, 4289, 4299, 4324, 4326, 4335, 4337, 4343, 4351, 4358, 4361, 4365, 4370, 4381, 4386, 4397, 4413, 4419, 4420, 4427, 4431, 4442, 4446, 4447, 4450, 4460, 4466, 4480, 4482, 4489, 4492, 4503, 4505, 4507, 4510, 4528, 4548, 4561, 4567, 4604, 4605, 4624, 4635, 4638, 4647, 4648, 4654, 4655, 4658, 4665, 4667, 4680, 4689, 4693, 4694, 4697, 4698, 4700, 4714, 4719, 4722, 4724, 4734, 4735, 4736, 4758, 4764, 4769, 4770, 4777, 4779, 4781, 4784, 4786, 4792, 4796, 4800, 4806, 4808, 4810, 4813, 4816, 4818, 4826, 4832, 4838, 4842, 4843, 4851, 4858, 4864, 4865, 4871, 4880, 4905, 4920, 4923, 4933, 4948, 4954, 4969, 4974, 4976, 4977, 4988, 4994, 4996, 5012, 5044, 5064, 5065, 5082, 5087, 5128, 5129, 5143, 5147, 5148, 5151, 5160, 5175, 5179, 5189, 5200, 5216, 5219, 5220, 5233, 5243, 5266, 5274, 5277, 5281, 5287, 5309, 5333, 5334, 5335, 5359, 5366, 5379, 5389, 5401, 5417, 5421, 5432, 5438, 5444, 5448, 5451, 5467, 5478, 5479, 5482, 5492, 5494, 5508, 5510, 5513, 5526, 5528, 5529, 5530, 5536, 5543, 5548, 5552, 5557, 5558, 5575, 5583, 5592, 5597, 5599, 5602, 5603, 5604, 5634, 5640, 5641, 5646, 5655, 5657, 5661, 5664, 5668, 5672, 5674, 5716, 5717, 5719, 5731, 5735, 5756, 5770, 5773, 5774, 5778, 5779, 5780, 5792, 5793, 5808, 5845, 5848, 5856, 5869, 5878, 5887, 5889, 5898, 5923, 5936, 5938, 5942, 5956, 5980, 5987, 6005, 6015, 6033, 6069, 6082, 6091, 6093, 6094, 6106, 6112, 6118, 6123, 6156, 6166, 6179, 6188, 6208, 6214, 6231, 6238, 6242, 6244, 6245, 6254, 6255, 6256, 6258, 6270, 6283, 6284, 6286, 6288, 6300, 6328, 6336, 6340, 6354, 6358, 6364, 6386, 6403, 6405, 6413, 6424, 6425, 6434, 6438, 6456, 6461, 6471, 6475, 6477, 6484, 6488, 6493, 6518, 6519, 6534, 6536, 6541, 6543, 6545, 6552, 6557, 6569, 6570, 6571, 6577, 6583, 6590, 6593, 6621, 6622, 6636, 6644, 6645, 6647, 6648, 6652, 6657, 6671, 6682, 6690, 6692, 6700, 6701, 6706, 6720, 6721, 6739, 6745, 6748, 6772, 6775, 6780, 6782, 6790, 6792, 6793, 6803, 6817, 6820, 6821, 6822, 6828, 6830, 6833, 6838, 6847, 6856, 6864, 6870, 6885, 6889, 6891, 6893, 6901, 6908, 6909, 6916, 6918, 6919, 6948, 6959, 6977, 7013, 7018, 7026, 7028, 7035, 7040, 7042, 7067, 7072, 7075, 7076, 7079, 7087, 7089, 7091, 7092, 7099, 7136, 7142, 7144, 7161, 7164, 7180, 7186, 7200, 7201, 7202, 7224, 7246, 7257, 7261, 7289, 7303, 7308, 7309, 7312, 7335, 7352, 7353, 7355, 7356, 7364, 7405, 7427, 7431, 7435, 7438, 7450, 7457, 7461, 7462, 7463, 7467, 7471, 7476, 7500, 7503, 7507, 7519, 7536, 7539, 7555, 7563, 7573, 7579, 7592, 7602, 7607, 7611, 7612, 7616, 7627, 7636, 7641, 7669, 7704, 7705, 7727, 7739, 7740, 7761, 7769, 7784, 7790, 7795, 7800, 7811, 7812, 7818, 7822, 7836, 7847, 7849, 7858, 7860, 7861, 7862, 7880, 7881, 7910, 7911, 7913, 7916, 7926, 7928, 7930, 7948, 7951, 7952, 7954, 7958, 7960, 7961, 7990, 7992, 7993, 7998, 8012, 8013, 8014, 8018, 8021, 8024, 8026, 8031, 8034, 8041, 8045, 8048, 8052, 8077, 8098, 8100, 8106, 8107, 8108, 8114, 8116, 8143, 8144, 8146, 8153, 8155, 8181, 8182, 8204, 8211, 8212, 8226, 8239, 8252, 8253, 8273, 8301, 8314, 8318, 8329, 8332, 8339, 8340, 8353, 8358, 8367, 8371, 8381, 8383, 8384, 8393, 8395, 8397, 8404, 8406, 8408, 8420, 8432, 8437, 8442, 8461, 8475, 8476, 8477, 8480, 8488, 8494, 8542, 8558, 8561, 8566, 8591, 8599, 8606, 8610, 8611, 8627, 8653, 8660, 8662, 8666, 8668, 8673, 8675, 8695, 8702, 8712, 8723, 8734, 8740, 8742, 8789, 8795, 8803, 8805, 8811, 8819, 8820, 8821, 8826, 8829, 8831, 8840, 8843, 8846, 8860, 8864, 8875, 8881, 8884, 8901, 8903, 8906, 8936, 8945, 8966, 8972, 8973, 8975, 8977, 9020, 9051, 9062, 9065, 9084, 9085, 9094, 9103, 9110, 9122, 9148, 9160, 9176, 9179, 9197, 9224, 9234, 9249, 9258, 9259, 9261, 9277, 9279, 9282, 9286, 9288, 9292, 9300, 9313, 9317, 9334, 9337, 9361, 9384, 9395, 9402, 9406, 9412, 9417, 9422, 9423, 9429, 9435, 9436, 9444, 9446, 9449, 9460, 9473, 9498, 9502, 9510, 9511, 9525, 9527, 9530, 9531, 9535, 9545, 9548, 9563, 9567, 9569, 9577, 9581, 9615, 9624, 9625, 9642, 9654, 9675, 9698, 9711, 9726, 9736, 9738, 9744, 9749, 9758, 9774, 9782, 9796, 9797, 9798, 9800, 9802, 9810, 9825, 9826, 9844, 9868, 9871, 9874, 9875, 9879, 9900, 9901, 9902, 9906, 9915, 9917, 9926, 9929, 9935, 9937, 9938, 9944, 9950, 9951, 9966, 9973, 9975, 9988, 9992], "external_url": "https://colorpunx.io/colors?i=213&name=#a77c47", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954406220742524929"}, "#d29d60": {"id": 214, "name": "#d29d60", "description": "#d29d60 is one of 222 colors in the cryptopunx color pallette. It is used by 1400 unique punks", "hash": "1878c64b6cf1cf875260d633ec6e95fc", "image": "https://gateway.pinata.cloud/ipfs/QmeaBU7dKDRFqyPqDhdZXx18crFY4PUmDym1DQ7bCzaBqL?filename=colorpunx214.png", "punks": [2, 17, 20, 23, 24, 27, 33, 34, 40, 44, 55, 57, 60, 61, 75, 76, 87, 88, 91, 93, 96, 98, 105, 106, 108, 118, 121, 122, 128, 130, 135, 145, 146, 159, 183, 185, 187, 189, 202, 206, 207, 229, 235, 236, 241, 243, 249, 254, 255, 257, 259, 268, 276, 277, 281, 283, 285, 292, 293, 298, 300, 306, 311, 312, 313, 319, 341, 343, 351, 356, 365, 369, 379, 380, 381, 382, 389, 390, 394, 395, 404, 407, 409, 414, 437, 442, 448, 469, 482, 483, 490, 494, 497, 498, 499, 502, 503, 513, 519, 528, 533, 540, 571, 574, 575, 587, 594, 600, 602, 609, 613, 640, 641, 648, 651, 655, 656, 666, 672, 687, 694, 701, 702, 712, 715, 728, 730, 732, 742, 767, 772, 786, 789, 799, 805, 808, 811, 813, 815, 825, 828, 829, 830, 837, 838, 843, 847, 860, 868, 870, 873, 877, 882, 884, 887, 896, 897, 906, 910, 916, 919, 926, 936, 944, 957, 958, 962, 966, 969, 977, 988, 1009, 1018, 1033, 1047, 1049, 1051, 1054, 1058, 1060, 1064, 1065, 1069, 1072, 1074, 1077, 1089, 1095, 1096, 1105, 1111, 1120, 1128, 1131, 1133, 1135, 1137, 1146, 1149, 1150, 1152, 1153, 1154, 1162, 1169, 1171, 1175, 1176, 1181, 1191, 1195, 1201, 1202, 1207, 1213, 1215, 1216, 1217, 1219, 1220, 1221, 1223, 1229, 1231, 1233, 1236, 1237, 1248, 1255, 1263, 1268, 1273, 1283, 1290, 1294, 1298, 1301, 1313, 1315, 1316, 1330, 1334, 1335, 1337, 1344, 1347, 1349, 1356, 1360, 1370, 1377, 1384, 1386, 1387, 1400, 1404, 1406, 1416, 1427, 1437, 1454, 1464, 1468, 1470, 1472, 1481, 1484, 1489, 1495, 1499, 1500, 1502, 1511, 1513, 1516, 1521, 1538, 1541, 1551, 1553, 1559, 1565, 1569, 1594, 1609, 1614, 1615, 1629, 1635, 1638, 1641, 1642, 1646, 1650, 1660, 1717, 1726, 1735, 1736, 1752, 1753, 1773, 1777, 1781, 1783, 1785, 1801, 1804, 1806, 1811, 1814, 1820, 1824, 1828, 1840, 1850, 1857, 1862, 1865, 1866, 1871, 1875, 1881, 1883, 1913, 1915, 1919, 1926, 1936, 1939, 1942, 1947, 1950, 1954, 1960, 1972, 1978, 2006, 2007, 2032, 2036, 2038, 2044, 2051, 2057, 2060, 2070, 2079, 2086, 2088, 2096, 2102, 2109, 2111, 2115, 2121, 2123, 2125, 2128, 2131, 2141, 2143, 2144, 2145, 2148, 2154, 2155, 2156, 2157, 2175, 2180, 2191, 2196, 2211, 2215, 2218, 2219, 2228, 2238, 2242, 2245, 2247, 2253, 2258, 2260, 2277, 2278, 2287, 2290, 2292, 2295, 2305, 2311, 2316, 2322, 2328, 2335, 2336, 2340, 2349, 2355, 2361, 2364, 2373, 2375, 2378, 2379, 2380, 2387, 2389, 2396, 2399, 2400, 2402, 2405, 2414, 2420, 2432, 2434, 2440, 2444, 2453, 2455, 2456, 2470, 2479, 2482, 2506, 2507, 2510, 2535, 2539, 2540, 2542, 2543, 2547, 2549, 2551, 2567, 2568, 2584, 2585, 2586, 2599, 2604, 2606, 2612, 2617, 2621, 2624, 2626, 2634, 2636, 2644, 2668, 2669, 2685, 2689, 2693, 2706, 2712, 2713, 2722, 2736, 2740, 2753, 2770, 2773, 2806, 2836, 2838, 2845, 2848, 2861, 2862, 2868, 2874, 2900, 2906, 2931, 2939, 2948, 2949, 2951, 2964, 2968, 2975, 2982, 2986, 2988, 3012, 3019, 3032, 3047, 3049, 3051, 3052, 3062, 3070, 3071, 3073, 3075, 3079, 3080, 3099, 3121, 3126, 3133, 3138, 3140, 3157, 3175, 3182, 3185, 3188, 3195, 3225, 3228, 3230, 3246, 3247, 3255, 3257, 3284, 3298, 3308, 3321, 3331, 3339, 3341, 3345, 3349, 3355, 3367, 3381, 3383, 3389, 3410, 3414, 3415, 3416, 3424, 3439, 3442, 3444, 3449, 3454, 3462, 3471, 3476, 3491, 3503, 3522, 3530, 3536, 3546, 3548, 3549, 3552, 3569, 3570, 3586, 3601, 3619, 3632, 3639, 3648, 3661, 3666, 3678, 3685, 3707, 3708, 3709, 3710, 3717, 3730, 3732, 3735, 3736, 3740, 3742, 3749, 3762, 3766, 3780, 3787, 3803, 3813, 3840, 3844, 3848, 3854, 3869, 3878, 3881, 3882, 3892, 3901, 3910, 3912, 3915, 3916, 3926, 3931, 3938, 3939, 3943, 3947, 3959, 3971, 3972, 3979, 3980, 3990, 4003, 4004, 4017, 4053, 4059, 4068, 4087, 4094, 4104, 4118, 4129, 4144, 4154, 4157, 4158, 4168, 4171, 4175, 4180, 4202, 4226, 4230, 4241, 4248, 4262, 4272, 4284, 4290, 4295, 4297, 4306, 4314, 4333, 4336, 4342, 4349, 4367, 4380, 4382, 4388, 4390, 4393, 4395, 4399, 4401, 4406, 4429, 4454, 4455, 4458, 4474, 4476, 4479, 4486, 4487, 4488, 4498, 4501, 4506, 4509, 4532, 4538, 4542, 4544, 4546, 4547, 4555, 4560, 4577, 4595, 4607, 4610, 4629, 4637, 4639, 4649, 4660, 4691, 4692, 4702, 4712, 4715, 4716, 4720, 4721, 4730, 4745, 4748, 4751, 4757, 4768, 4776, 4787, 4795, 4797, 4802, 4846, 4861, 4869, 4870, 4888, 4896, 4899, 4900, 4904, 4913, 4914, 4915, 4917, 4919, 4930, 4932, 4938, 4942, 4952, 4959, 4964, 4968, 5013, 5037, 5048, 5090, 5095, 5111, 5112, 5113, 5118, 5120, 5125, 5134, 5139, 5140, 5141, 5159, 5163, 5167, 5171, 5184, 5191, 5197, 5228, 5230, 5231, 5239, 5246, 5263, 5270, 5293, 5296, 5317, 5320, 5326, 5331, 5337, 5342, 5351, 5352, 5354, 5368, 5369, 5373, 5378, 5388, 5397, 5406, 5408, 5410, 5414, 5423, 5425, 5427, 5428, 5439, 5440, 5443, 5463, 5473, 5476, 5477, 5483, 5488, 5495, 5502, 5503, 5506, 5511, 5515, 5521, 5527, 5549, 5550, 5551, 5563, 5568, 5574, 5582, 5591, 5624, 5631, 5632, 5639, 5643, 5645, 5648, 5649, 5656, 5660, 5671, 5683, 5687, 5696, 5702, 5712, 5720, 5721, 5725, 5727, 5729, 5730, 5739, 5743, 5745, 5752, 5767, 5768, 5786, 5788, 5796, 5804, 5805, 5819, 5832, 5841, 5847, 5849, 5857, 5862, 5867, 5870, 5876, 5880, 5888, 5910, 5914, 5933, 5935, 5937, 5948, 5952, 5957, 5960, 5961, 5970, 5979, 5995, 6000, 6009, 6010, 6014, 6021, 6025, 6026, 6034, 6050, 6058, 6059, 6060, 6070, 6072, 6073, 6081, 6085, 6086, 6100, 6110, 6124, 6130, 6141, 6148, 6160, 6165, 6167, 6180, 6185, 6191, 6194, 6209, 6212, 6217, 6225, 6248, 6253, 6259, 6260, 6295, 6299, 6318, 6325, 6345, 6349, 6366, 6368, 6379, 6384, 6385, 6410, 6417, 6423, 6427, 6429, 6432, 6433, 6452, 6455, 6472, 6485, 6486, 6494, 6517, 6520, 6531, 6533, 6538, 6539, 6555, 6562, 6574, 6575, 6587, 6589, 6607, 6610, 6615, 6616, 6619, 6628, 6639, 6641, 6653, 6658, 6661, 6664, 6665, 6670, 6676, 6679, 6710, 6717, 6731, 6738, 6743, 6754, 6765, 6769, 6774, 6783, 6785, 6795, 6799, 6819, 6829, 6832, 6837, 6839, 6844, 6853, 6858, 6863, 6876, 6878, 6890, 6913, 6914, 6921, 6929, 6943, 6952, 6953, 6962, 6992, 7010, 7017, 7024, 7034, 7038, 7050, 7051, 7053, 7061, 7073, 7078, 7095, 7096, 7098, 7103, 7105, 7109, 7112, 7113, 7119, 7122, 7124, 7126, 7128, 7134, 7135, 7150, 7166, 7171, 7188, 7195, 7206, 7207, 7227, 7228, 7230, 7235, 7236, 7238, 7239, 7240, 7279, 7284, 7297, 7313, 7318, 7324, 7329, 7338, 7340, 7370, 7371, 7374, 7376, 7377, 7396, 7398, 7401, 7404, 7412, 7416, 7426, 7434, 7437, 7445, 7452, 7455, 7478, 7498, 7505, 7521, 7522, 7524, 7546, 7549, 7554, 7565, 7571, 7578, 7580, 7595, 7615, 7624, 7631, 7640, 7648, 7650, 7653, 7656, 7658, 7659, 7667, 7670, 7675, 7682, 7683, 7698, 7706, 7712, 7716, 7717, 7720, 7721, 7723, 7733, 7744, 7757, 7760, 7768, 7774, 7776, 7780, 7799, 7810, 7833, 7848, 7856, 7868, 7879, 7888, 7889, 7891, 7892, 7898, 7944, 7945, 7947, 7949, 7959, 7970, 7979, 7984, 7988, 7996, 7997, 8010, 8017, 8025, 8029, 8035, 8040, 8046, 8053, 8059, 8062, 8067, 8081, 8087, 8096, 8104, 8105, 8113, 8122, 8124, 8129, 8139, 8141, 8152, 8154, 8156, 8178, 8179, 8195, 8197, 8198, 8206, 8210, 8217, 8220, 8223, 8242, 8250, 8251, 8256, 8260, 8261, 8263, 8283, 8292, 8299, 8330, 8342, 8357, 8366, 8379, 8385, 8392, 8398, 8402, 8419, 8422, 8423, 8426, 8431, 8434, 8439, 8452, 8453, 8458, 8462, 8463, 8464, 8465, 8468, 8491, 8495, 8504, 8511, 8515, 8516, 8517, 8525, 8527, 8528, 8544, 8551, 8554, 8557, 8573, 8584, 8605, 8609, 8615, 8625, 8626, 8655, 8657, 8659, 8671, 8674, 8690, 8699, 8701, 8706, 8716, 8721, 8722, 8731, 8737, 8748, 8749, 8754, 8757, 8762, 8775, 8788, 8816, 8827, 8847, 8850, 8855, 8890, 8894, 8900, 8927, 8933, 8935, 8938, 8941, 8947, 8953, 8955, 8956, 8981, 8983, 8984, 8988, 8995, 8998, 9015, 9022, 9025, 9028, 9045, 9053, 9055, 9056, 9063, 9064, 9069, 9071, 9072, 9079, 9089, 9090, 9091, 9093, 9099, 9105, 9107, 9109, 9112, 9114, 9117, 9120, 9129, 9131, 9134, 9136, 9141, 9145, 9146, 9152, 9162, 9187, 9188, 9199, 9200, 9201, 9206, 9208, 9210, 9214, 9225, 9235, 9242, 9247, 9253, 9254, 9255, 9263, 9268, 9269, 9276, 9305, 9314, 9325, 9329, 9340, 9341, 9345, 9349, 9355, 9357, 9360, 9371, 9372, 9373, 9374, 9389, 9391, 9392, 9421, 9433, 9443, 9447, 9463, 9478, 9496, 9509, 9512, 9518, 9528, 9534, 9542, 9544, 9546, 9551, 9584, 9585, 9597, 9614, 9618, 9619, 9622, 9633, 9644, 9646, 9648, 9651, 9664, 9666, 9688, 9696, 9706, 9712, 9721, 9730, 9731, 9743, 9760, 9761, 9769, 9785, 9787, 9789, 9809, 9812, 9820, 9824, 9836, 9842, 9847, 9854, 9905, 9911, 9913, 9916, 9918, 9924, 9946, 9952, 9976, 9985, 9996], "external_url": "https://colorpunx.io/colors?i=214&name=#d29d60", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954407320254152705"}, "#86581e": {"id": 215, "name": "#86581e", "description": "#86581e is one of 222 colors in the cryptopunx color pallette. It is used by 1608 unique punks", "hash": "b50d660c0686aac42c2541780b683ce5", "image": "https://gateway.pinata.cloud/ipfs/QmcvVETDb5EZZosKeKmZCnWFSZVfqWwRxw36GqXKkCTeeg?filename=colorpunx215.png", "punks": [6, 9, 18, 26, 30, 36, 43, 45, 46, 50, 51, 58, 64, 65, 69, 73, 78, 90, 95, 97, 99, 100, 102, 104, 107, 119, 123, 124, 131, 134, 139, 148, 150, 153, 157, 162, 165, 167, 171, 178, 198, 205, 210, 213, 215, 216, 217, 225, 226, 227, 231, 258, 271, 272, 289, 290, 291, 295, 296, 297, 304, 307, 315, 317, 321, 329, 335, 337, 345, 346, 350, 360, 361, 362, 364, 366, 368, 371, 385, 386, 387, 392, 396, 397, 405, 419, 421, 429, 432, 435, 436, 438, 439, 449, 453, 458, 463, 466, 477, 480, 486, 488, 496, 500, 501, 505, 507, 508, 510, 511, 517, 523, 525, 529, 530, 535, 543, 544, 547, 550, 551, 557, 559, 560, 562, 565, 566, 569, 577, 578, 581, 596, 599, 604, 611, 619, 621, 625, 626, 630, 637, 642, 643, 649, 652, 667, 669, 679, 681, 682, 686, 692, 704, 706, 707, 716, 718, 719, 722, 736, 738, 739, 740, 746, 752, 763, 769, 772, 774, 775, 777, 785, 787, 793, 794, 797, 806, 820, 834, 836, 841, 849, 851, 872, 878, 880, 883, 892, 908, 915, 917, 918, 929, 930, 938, 947, 950, 952, 953, 959, 968, 970, 980, 981, 983, 984, 986, 989, 990, 1012, 1022, 1025, 1030, 1034, 1046, 1048, 1050, 1057, 1058, 1062, 1068, 1070, 1074, 1078, 1114, 1115, 1139, 1141, 1142, 1144, 1148, 1151, 1156, 1157, 1159, 1165, 1168, 1170, 1178, 1180, 1193, 1201, 1204, 1205, 1206, 1214, 1232, 1242, 1244, 1249, 1252, 1262, 1266, 1278, 1286, 1288, 1300, 1303, 1305, 1308, 1311, 1314, 1317, 1320, 1331, 1333, 1342, 1348, 1350, 1362, 1368, 1375, 1394, 1396, 1398, 1399, 1409, 1410, 1425, 1433, 1438, 1440, 1445, 1452, 1456, 1487, 1494, 1496, 1497, 1501, 1533, 1534, 1536, 1540, 1549, 1550, 1554, 1555, 1557, 1558, 1566, 1567, 1571, 1583, 1589, 1590, 1593, 1607, 1608, 1616, 1624, 1627, 1628, 1632, 1636, 1650, 1654, 1667, 1669, 1672, 1676, 1677, 1694, 1696, 1699, 1706, 1709, 1713, 1721, 1722, 1725, 1759, 1767, 1778, 1792, 1793, 1798, 1808, 1809, 1821, 1822, 1823, 1834, 1837, 1842, 1851, 1852, 1853, 1863, 1874, 1882, 1888, 1889, 1891, 1894, 1899, 1900, 1903, 1904, 1916, 1918, 1923, 1933, 1941, 1944, 1955, 1958, 1963, 1966, 1967, 1979, 1983, 1984, 1996, 1997, 2001, 2004, 2016, 2028, 2037, 2057, 2058, 2059, 2061, 2081, 2083, 2098, 2105, 2106, 2112, 2113, 2120, 2127, 2132, 2160, 2173, 2178, 2193, 2195, 2198, 2201, 2205, 2233, 2235, 2241, 2246, 2247, 2259, 2261, 2266, 2269, 2272, 2280, 2283, 2289, 2291, 2300, 2301, 2302, 2309, 2313, 2317, 2320, 2332, 2334, 2341, 2343, 2347, 2357, 2359, 2368, 2369, 2370, 2376, 2391, 2408, 2410, 2415, 2416, 2419, 2436, 2441, 2457, 2464, 2465, 2466, 2477, 2482, 2499, 2501, 2504, 2509, 2515, 2517, 2521, 2524, 2526, 2528, 2541, 2550, 2553, 2564, 2569, 2580, 2587, 2589, 2593, 2616, 2627, 2629, 2637, 2646, 2647, 2652, 2655, 2661, 2674, 2678, 2679, 2683, 2685, 2689, 2692, 2695, 2698, 2702, 2709, 2715, 2717, 2719, 2720, 2721, 2724, 2725, 2729, 2731, 2732, 2735, 2748, 2754, 2762, 2764, 2775, 2776, 2779, 2783, 2784, 2785, 2809, 2818, 2835, 2842, 2844, 2846, 2853, 2854, 2855, 2856, 2857, 2864, 2870, 2873, 2875, 2876, 2879, 2884, 2887, 2894, 2901, 2911, 2917, 2921, 2927, 2929, 2932, 2953, 2960, 2961, 2962, 2979, 2981, 2988, 2991, 2998, 2999, 3000, 3005, 3006, 3010, 3013, 3015, 3016, 3020, 3023, 3033, 3041, 3074, 3085, 3088, 3095, 3097, 3118, 3120, 3141, 3144, 3146, 3154, 3155, 3156, 3161, 3163, 3164, 3174, 3176, 3187, 3191, 3198, 3212, 3216, 3221, 3224, 3241, 3248, 3263, 3266, 3276, 3278, 3280, 3288, 3292, 3294, 3296, 3299, 3303, 3304, 3305, 3306, 3319, 3320, 3325, 3338, 3340, 3342, 3344, 3347, 3350, 3363, 3369, 3372, 3374, 3378, 3388, 3399, 3403, 3408, 3411, 3423, 3456, 3460, 3474, 3475, 3484, 3487, 3492, 3495, 3496, 3497, 3510, 3512, 3517, 3526, 3532, 3534, 3537, 3538, 3541, 3550, 3551, 3553, 3556, 3557, 3564, 3565, 3567, 3572, 3576, 3594, 3595, 3597, 3606, 3610, 3612, 3614, 3624, 3626, 3634, 3635, 3638, 3640, 3641, 3653, 3655, 3656, 3657, 3664, 3670, 3671, 3683, 3684, 3685, 3686, 3692, 3704, 3714, 3719, 3726, 3731, 3742, 3745, 3747, 3751, 3754, 3764, 3769, 3776, 3791, 3796, 3804, 3806, 3808, 3817, 3821, 3822, 3837, 3841, 3849, 3861, 3867, 3871, 3875, 3880, 3886, 3891, 3894, 3902, 3903, 3905, 3908, 3909, 3946, 3952, 3956, 3961, 3969, 3975, 3979, 3987, 4005, 4006, 4010, 4027, 4030, 4038, 4040, 4042, 4046, 4047, 4057, 4065, 4082, 4083, 4088, 4095, 4097, 4099, 4102, 4109, 4113, 4120, 4121, 4123, 4134, 4143, 4145, 4155, 4174, 4182, 4190, 4193, 4194, 4197, 4199, 4205, 4208, 4219, 4221, 4233, 4249, 4261, 4267, 4278, 4288, 4289, 4295, 4299, 4324, 4326, 4335, 4337, 4343, 4351, 4358, 4361, 4363, 4365, 4370, 4381, 4384, 4385, 4386, 4397, 4413, 4414, 4419, 4420, 4427, 4431, 4442, 4444, 4446, 4447, 4450, 4460, 4466, 4480, 4482, 4489, 4492, 4503, 4505, 4507, 4508, 4509, 4510, 4528, 4544, 4548, 4557, 4561, 4567, 4604, 4605, 4624, 4635, 4638, 4647, 4648, 4654, 4655, 4658, 4665, 4667, 4670, 4680, 4689, 4693, 4694, 4697, 4698, 4700, 4713, 4714, 4719, 4722, 4724, 4734, 4735, 4736, 4758, 4764, 4769, 4770, 4777, 4779, 4781, 4784, 4786, 4792, 4796, 4800, 4806, 4808, 4809, 4810, 4813, 4816, 4818, 4822, 4826, 4832, 4838, 4842, 4843, 4851, 4858, 4861, 4864, 4865, 4871, 4880, 4888, 4901, 4904, 4905, 4920, 4923, 4933, 4942, 4945, 4948, 4954, 4969, 4974, 4976, 4977, 4988, 4993, 4994, 4996, 5012, 5013, 5044, 5064, 5065, 5078, 5082, 5087, 5128, 5129, 5140, 5142, 5143, 5147, 5148, 5149, 5151, 5160, 5175, 5179, 5189, 5200, 5206, 5216, 5219, 5220, 5233, 5243, 5259, 5266, 5274, 5277, 5281, 5283, 5287, 5290, 5309, 5317, 5333, 5334, 5335, 5341, 5359, 5366, 5379, 5388, 5389, 5401, 5417, 5421, 5432, 5438, 5444, 5448, 5451, 5467, 5478, 5479, 5482, 5492, 5494, 5508, 5510, 5513, 5526, 5528, 5529, 5530, 5536, 5537, 5543, 5548, 5552, 5557, 5558, 5575, 5583, 5592, 5597, 5599, 5602, 5603, 5604, 5613, 5626, 5634, 5640, 5641, 5646, 5655, 5657, 5661, 5664, 5668, 5672, 5674, 5695, 5716, 5717, 5719, 5725, 5731, 5732, 5735, 5756, 5770, 5773, 5774, 5778, 5779, 5780, 5791, 5792, 5793, 5797, 5808, 5845, 5848, 5856, 5869, 5878, 5885, 5887, 5889, 5898, 5910, 5923, 5924, 5936, 5938, 5942, 5956, 5963, 5980, 5987, 5989, 6005, 6015, 6033, 6069, 6082, 6091, 6093, 6094, 6097, 6106, 6112, 6118, 6123, 6137, 6139, 6156, 6166, 6172, 6179, 6188, 6208, 6214, 6228, 6231, 6238, 6242, 6244, 6245, 6254, 6255, 6256, 6258, 6270, 6274, 6283, 6284, 6286, 6288, 6295, 6300, 6328, 6336, 6340, 6354, 6358, 6364, 6386, 6403, 6405, 6413, 6424, 6425, 6434, 6438, 6444, 6456, 6459, 6461, 6471, 6475, 6476, 6477, 6484, 6488, 6489, 6493, 6518, 6519, 6527, 6534, 6536, 6541, 6543, 6545, 6552, 6555, 6557, 6569, 6570, 6571, 6577, 6583, 6590, 6593, 6621, 6622, 6636, 6642, 6644, 6645, 6647, 6648, 6652, 6657, 6671, 6682, 6690, 6692, 6700, 6701, 6706, 6720, 6721, 6739, 6744, 6745, 6748, 6772, 6775, 6780, 6782, 6790, 6792, 6793, 6803, 6817, 6820, 6821, 6822, 6828, 6830, 6833, 6835, 6838, 6847, 6856, 6864, 6866, 6870, 6885, 6889, 6891, 6893, 6901, 6908, 6909, 6912, 6916, 6918, 6919, 6937, 6948, 6957, 6959, 6967, 6977, 7002, 7006, 7013, 7018, 7019, 7026, 7028, 7035, 7040, 7042, 7065, 7067, 7072, 7075, 7076, 7079, 7087, 7089, 7091, 7092, 7099, 7136, 7140, 7142, 7144, 7159, 7161, 7164, 7180, 7186, 7189, 7192, 7200, 7201, 7202, 7224, 7236, 7246, 7257, 7261, 7289, 7303, 7308, 7309, 7312, 7319, 7329, 7335, 7337, 7352, 7353, 7355, 7356, 7364, 7386, 7405, 7427, 7428, 7431, 7435, 7438, 7450, 7452, 7457, 7461, 7462, 7463, 7467, 7468, 7471, 7476, 7479, 7500, 7503, 7507, 7519, 7536, 7539, 7548, 7555, 7561, 7563, 7570, 7573, 7579, 7585, 7592, 7602, 7607, 7611, 7612, 7616, 7627, 7636, 7641, 7651, 7669, 7697, 7699, 7704, 7705, 7727, 7739, 7740, 7761, 7766, 7769, 7784, 7785, 7790, 7795, 7800, 7811, 7812, 7818, 7820, 7822, 7836, 7847, 7849, 7858, 7860, 7861, 7862, 7871, 7880, 7881, 7905, 7910, 7911, 7912, 7913, 7914, 7916, 7923, 7926, 7928, 7930, 7948, 7951, 7952, 7954, 7958, 7960, 7961, 7984, 7990, 7992, 7993, 7998, 8012, 8013, 8014, 8018, 8021, 8024, 8026, 8031, 8034, 8041, 8045, 8048, 8052, 8068, 8077, 8098, 8100, 8106, 8107, 8108, 8114, 8116, 8143, 8144, 8146, 8153, 8155, 8159, 8163, 8181, 8182, 8191, 8204, 8211, 8212, 8226, 8232, 8239, 8252, 8253, 8273, 8280, 8301, 8314, 8318, 8329, 8332, 8339, 8340, 8344, 8353, 8358, 8367, 8371, 8381, 8383, 8384, 8393, 8395, 8397, 8404, 8406, 8408, 8420, 8423, 8427, 8429, 8432, 8437, 8442, 8461, 8475, 8476, 8477, 8480, 8488, 8494, 8534, 8540, 8542, 8547, 8558, 8561, 8566, 8590, 8591, 8593, 8599, 8603, 8606, 8610, 8611, 8627, 8653, 8660, 8662, 8666, 8668, 8673, 8675, 8692, 8695, 8701, 8702, 8712, 8717, 8723, 8734, 8740, 8742, 8770, 8789, 8795, 8803, 8805, 8808, 8811, 8819, 8820, 8821, 8823, 8826, 8829, 8831, 8840, 8843, 8846, 8852, 8860, 8864, 8875, 8881, 8884, 8901, 8903, 8906, 8929, 8936, 8945, 8966, 8972, 8973, 8975, 8977, 9002, 9020, 9051, 9062, 9065, 9069, 9084, 9085, 9094, 9100, 9103, 9108, 9110, 9117, 9122, 9148, 9156, 9160, 9176, 9179, 9197, 9210, 9224, 9234, 9235, 9249, 9255, 9258, 9259, 9261, 9277, 9279, 9282, 9284, 9285, 9286, 9288, 9292, 9300, 9313, 9317, 9334, 9337, 9361, 9384, 9395, 9402, 9406, 9412, 9417, 9422, 9423, 9429, 9435, 9436, 9444, 9446, 9449, 9460, 9469, 9473, 9498, 9502, 9510, 9511, 9525, 9527, 9530, 9531, 9535, 9545, 9547, 9548, 9556, 9563, 9567, 9569, 9570, 9577, 9581, 9584, 9585, 9615, 9623, 9624, 9625, 9639, 9642, 9654, 9669, 9675, 9692, 9698, 9711, 9726, 9736, 9737, 9738, 9743, 9744, 9749, 9758, 9762, 9774, 9779, 9782, 9796, 9797, 9798, 9800, 9802, 9810, 9825, 9826, 9837, 9842, 9844, 9847, 9868, 9871, 9874, 9875, 9878, 9879, 9900, 9901, 9902, 9906, 9915, 9917, 9926, 9929, 9935, 9937, 9938, 9944, 9950, 9951, 9966, 9973, 9975, 9988, 9992], "external_url": "https://colorpunx.io/colors?i=215&name=#86581e", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954408419765780481"}, "#ffd926": {"id": 216, "name": "#ffd926", "description": "#ffd926 is one of 222 colors in the cryptopunx color pallette. It is used by 2037 unique punks", "hash": "1ad72b93965820fc1e4a8bbac8f8128f", "image": "https://gateway.pinata.cloud/ipfs/QmV6EHfvzp7mb6c8fxDp9hTyuW7Uwff4FqSncnGQf85sWH?filename=colorpunx216.png", "punks": [4, 16, 21, 23, 27, 35, 45, 51, 52, 62, 63, 70, 72, 73, 74, 84, 86, 95, 104, 109, 110, 112, 116, 119, 124, 126, 146, 150, 153, 159, 160, 171, 174, 188, 192, 202, 208, 217, 219, 224, 231, 243, 246, 256, 259, 265, 266, 274, 280, 291, 310, 339, 341, 349, 366, 369, 373, 377, 379, 386, 395, 401, 407, 414, 419, 420, 432, 433, 444, 456, 458, 460, 474, 480, 485, 490, 496, 498, 502, 508, 518, 531, 534, 543, 547, 550, 551, 555, 558, 571, 581, 587, 589, 593, 605, 607, 610, 619, 621, 622, 624, 626, 628, 633, 644, 645, 646, 649, 656, 678, 686, 691, 693, 694, 700, 709, 710, 715, 716, 720, 726, 728, 730, 735, 736, 737, 738, 743, 754, 757, 768, 774, 777, 781, 785, 786, 787, 788, 791, 807, 808, 809, 811, 814, 818, 830, 835, 841, 846, 854, 865, 880, 884, 891, 892, 893, 902, 910, 917, 920, 921, 925, 932, 936, 938, 949, 955, 959, 964, 966, 967, 973, 981, 984, 986, 993, 995, 1007, 1008, 1011, 1025, 1040, 1045, 1046, 1052, 1054, 1059, 1065, 1075, 1095, 1098, 1104, 1124, 1135, 1136, 1137, 1141, 1145, 1148, 1153, 1160, 1183, 1186, 1190, 1196, 1204, 1205, 1215, 1222, 1226, 1227, 1232, 1237, 1245, 1248, 1249, 1252, 1254, 1256, 1257, 1258, 1259, 1260, 1268, 1277, 1279, 1283, 1285, 1295, 1297, 1301, 1304, 1306, 1314, 1322, 1324, 1332, 1343, 1348, 1354, 1358, 1366, 1368, 1370, 1373, 1374, 1376, 1382, 1387, 1396, 1409, 1416, 1430, 1435, 1439, 1440, 1446, 1451, 1452, 1454, 1455, 1458, 1462, 1463, 1473, 1485, 1490, 1491, 1497, 1498, 1507, 1517, 1523, 1524, 1538, 1548, 1551, 1553, 1556, 1561, 1569, 1596, 1599, 1605, 1607, 1613, 1614, 1620, 1622, 1624, 1646, 1649, 1668, 1670, 1675, 1695, 1699, 1701, 1713, 1717, 1719, 1721, 1732, 1735, 1751, 1758, 1762, 1764, 1771, 1775, 1782, 1785, 1788, 1792, 1794, 1798, 1808, 1812, 1817, 1819, 1823, 1830, 1834, 1839, 1840, 1843, 1847, 1852, 1853, 1854, 1855, 1856, 1861, 1863, 1874, 1877, 1879, 1888, 1890, 1898, 1910, 1920, 1921, 1932, 1935, 1938, 1941, 1945, 1948, 1952, 1955, 1960, 1961, 1962, 1965, 1968, 1974, 1983, 1986, 1998, 2000, 2001, 2006, 2008, 2009, 2016, 2028, 2030, 2032, 2038, 2049, 2050, 2059, 2063, 2073, 2079, 2087, 2096, 2105, 2109, 2110, 2111, 2113, 2115, 2118, 2121, 2124, 2127, 2128, 2134, 2138, 2143, 2157, 2158, 2164, 2179, 2183, 2188, 2192, 2194, 2203, 2209, 2216, 2224, 2236, 2247, 2251, 2268, 2271, 2277, 2279, 2281, 2282, 2288, 2291, 2293, 2306, 2309, 2312, 2313, 2323, 2327, 2329, 2335, 2336, 2337, 2342, 2343, 2358, 2359, 2365, 2371, 2374, 2375, 2388, 2397, 2401, 2402, 2405, 2414, 2420, 2422, 2424, 2426, 2436, 2444, 2446, 2447, 2452, 2453, 2457, 2461, 2465, 2469, 2472, 2474, 2483, 2489, 2495, 2499, 2501, 2502, 2503, 2504, 2505, 2511, 2514, 2517, 2521, 2522, 2524, 2530, 2532, 2535, 2537, 2539, 2542, 2547, 2552, 2556, 2559, 2560, 2561, 2563, 2578, 2582, 2587, 2590, 2592, 2595, 2599, 2613, 2615, 2619, 2629, 2632, 2640, 2642, 2643, 2653, 2659, 2661, 2667, 2668, 2670, 2688, 2689, 2694, 2701, 2707, 2708, 2711, 2714, 2715, 2720, 2726, 2728, 2736, 2737, 2739, 2753, 2757, 2760, 2772, 2774, 2775, 2776, 2779, 2780, 2786, 2787, 2798, 2818, 2821, 2827, 2828, 2830, 2835, 2842, 2845, 2847, 2848, 2850, 2851, 2854, 2866, 2882, 2885, 2893, 2898, 2903, 2905, 2915, 2922, 2925, 2928, 2933, 2935, 2939, 2947, 2949, 2952, 2957, 2970, 2983, 2986, 2998, 3004, 3009, 3011, 3023, 3029, 3046, 3047, 3051, 3053, 3056, 3059, 3060, 3062, 3064, 3066, 3067, 3070, 3072, 3080, 3085, 3088, 3089, 3097, 3099, 3107, 3110, 3126, 3127, 3128, 3130, 3143, 3154, 3158, 3160, 3164, 3167, 3183, 3185, 3194, 3196, 3205, 3207, 3209, 3213, 3214, 3217, 3218, 3221, 3225, 3229, 3237, 3238, 3242, 3247, 3249, 3251, 3255, 3257, 3260, 3264, 3266, 3268, 3270, 3271, 3278, 3281, 3282, 3284, 3289, 3290, 3296, 3299, 3306, 3324, 3327, 3329, 3331, 3339, 3340, 3342, 3349, 3350, 3352, 3353, 3357, 3358, 3361, 3367, 3372, 3375, 3376, 3378, 3388, 3392, 3403, 3423, 3425, 3426, 3434, 3438, 3439, 3442, 3443, 3444, 3448, 3457, 3459, 3462, 3469, 3472, 3482, 3484, 3488, 3491, 3499, 3504, 3506, 3515, 3516, 3517, 3522, 3526, 3529, 3535, 3536, 3539, 3541, 3542, 3544, 3546, 3547, 3549, 3554, 3555, 3561, 3566, 3569, 3572, 3575, 3577, 3599, 3603, 3607, 3609, 3612, 3613, 3618, 3620, 3621, 3632, 3636, 3637, 3647, 3649, 3652, 3657, 3668, 3681, 3684, 3685, 3688, 3691, 3693, 3700, 3704, 3708, 3730, 3731, 3736, 3739, 3742, 3744, 3751, 3752, 3754, 3755, 3769, 3771, 3779, 3780, 3782, 3784, 3789, 3794, 3800, 3801, 3802, 3805, 3819, 3820, 3828, 3833, 3839, 3840, 3847, 3850, 3852, 3854, 3855, 3856, 3858, 3872, 3878, 3897, 3900, 3906, 3907, 3913, 3917, 3920, 3926, 3930, 3933, 3934, 3935, 3941, 3947, 3950, 3951, 3956, 3961, 3963, 3966, 3968, 3971, 3974, 3977, 3985, 3996, 4002, 4006, 4007, 4014, 4017, 4033, 4034, 4040, 4049, 4050, 4067, 4068, 4071, 4072, 4077, 4085, 4100, 4108, 4121, 4122, 4147, 4155, 4157, 4161, 4162, 4170, 4182, 4192, 4202, 4204, 4208, 4210, 4212, 4218, 4222, 4230, 4236, 4237, 4240, 4241, 4243, 4249, 4251, 4253, 4256, 4262, 4272, 4283, 4285, 4295, 4298, 4306, 4307, 4308, 4318, 4324, 4325, 4330, 4335, 4336, 4350, 4355, 4361, 4364, 4368, 4376, 4386, 4390, 4397, 4402, 4403, 4412, 4419, 4422, 4425, 4428, 4429, 4431, 4440, 4449, 4450, 4455, 4471, 4476, 4483, 4486, 4489, 4496, 4499, 4505, 4506, 4510, 4513, 4523, 4537, 4541, 4542, 4546, 4547, 4550, 4552, 4559, 4564, 4576, 4580, 4590, 4603, 4605, 4610, 4614, 4618, 4625, 4632, 4635, 4646, 4647, 4649, 4650, 4654, 4655, 4658, 4660, 4669, 4672, 4674, 4678, 4682, 4684, 4688, 4690, 4696, 4703, 4706, 4708, 4712, 4714, 4725, 4728, 4731, 4737, 4755, 4758, 4763, 4764, 4766, 4774, 4777, 4778, 4792, 4793, 4813, 4814, 4815, 4819, 4824, 4835, 4842, 4847, 4852, 4855, 4858, 4863, 4864, 4866, 4871, 4872, 4874, 4875, 4877, 4900, 4902, 4905, 4914, 4931, 4944, 4953, 4959, 4961, 4962, 4968, 4971, 4973, 4974, 4975, 4996, 5002, 5004, 5009, 5016, 5017, 5019, 5021, 5023, 5036, 5037, 5048, 5051, 5056, 5057, 5065, 5066, 5067, 5068, 5075, 5077, 5080, 5085, 5088, 5095, 5100, 5101, 5105, 5110, 5112, 5114, 5118, 5128, 5129, 5131, 5133, 5138, 5140, 5145, 5147, 5170, 5171, 5174, 5175, 5176, 5182, 5186, 5189, 5190, 5192, 5194, 5202, 5204, 5208, 5220, 5225, 5226, 5231, 5234, 5243, 5244, 5248, 5249, 5251, 5259, 5261, 5265, 5281, 5286, 5296, 5299, 5304, 5307, 5310, 5311, 5320, 5322, 5326, 5328, 5330, 5334, 5337, 5342, 5344, 5346, 5356, 5359, 5362, 5368, 5393, 5400, 5409, 5416, 5418, 5427, 5429, 5430, 5437, 5439, 5441, 5445, 5447, 5451, 5453, 5458, 5459, 5460, 5462, 5464, 5467, 5469, 5475, 5477, 5479, 5493, 5494, 5499, 5504, 5508, 5509, 5510, 5512, 5522, 5527, 5529, 5531, 5538, 5539, 5547, 5548, 5549, 5550, 5558, 5560, 5563, 5572, 5576, 5580, 5584, 5596, 5606, 5607, 5608, 5609, 5614, 5616, 5624, 5625, 5628, 5630, 5634, 5637, 5641, 5642, 5646, 5647, 5653, 5654, 5655, 5661, 5679, 5681, 5692, 5695, 5698, 5701, 5707, 5711, 5716, 5721, 5726, 5729, 5737, 5738, 5739, 5746, 5755, 5763, 5777, 5778, 5782, 5790, 5791, 5797, 5799, 5800, 5804, 5811, 5814, 5819, 5821, 5824, 5839, 5841, 5848, 5851, 5852, 5858, 5861, 5862, 5872, 5876, 5885, 5890, 5892, 5894, 5896, 5898, 5912, 5918, 5920, 5923, 5925, 5942, 5954, 5961, 5971, 5973, 5978, 5979, 5985, 5986, 5987, 5996, 6002, 6009, 6012, 6023, 6028, 6039, 6042, 6044, 6050, 6052, 6058, 6059, 6061, 6062, 6064, 6069, 6070, 6073, 6074, 6076, 6088, 6089, 6090, 6092, 6103, 6111, 6112, 6117, 6122, 6126, 6127, 6131, 6142, 6143, 6145, 6153, 6159, 6162, 6163, 6165, 6172, 6175, 6186, 6188, 6193, 6195, 6208, 6217, 6218, 6222, 6229, 6239, 6240, 6245, 6251, 6254, 6256, 6259, 6260, 6262, 6267, 6269, 6274, 6284, 6295, 6300, 6301, 6317, 6318, 6325, 6335, 6342, 6349, 6353, 6354, 6357, 6360, 6364, 6367, 6379, 6380, 6384, 6387, 6388, 6397, 6398, 6402, 6405, 6411, 6412, 6418, 6419, 6433, 6444, 6452, 6454, 6461, 6465, 6472, 6476, 6491, 6493, 6498, 6503, 6511, 6517, 6518, 6531, 6536, 6546, 6548, 6562, 6566, 6570, 6574, 6579, 6587, 6590, 6593, 6599, 6609, 6622, 6633, 6636, 6637, 6640, 6641, 6644, 6647, 6653, 6658, 6660, 6671, 6689, 6691, 6704, 6705, 6707, 6716, 6718, 6724, 6725, 6734, 6739, 6745, 6758, 6760, 6765, 6772, 6783, 6786, 6787, 6788, 6790, 6803, 6814, 6820, 6821, 6823, 6827, 6833, 6837, 6839, 6841, 6844, 6845, 6846, 6848, 6852, 6857, 6859, 6861, 6883, 6886, 6889, 6896, 6910, 6915, 6922, 6924, 6925, 6928, 6932, 6948, 6959, 6966, 6969, 6971, 6973, 6983, 6995, 6999, 7007, 7026, 7028, 7034, 7036, 7037, 7039, 7046, 7061, 7069, 7076, 7084, 7093, 7103, 7105, 7118, 7127, 7132, 7136, 7137, 7139, 7142, 7143, 7150, 7155, 7157, 7164, 7167, 7172, 7174, 7178, 7179, 7182, 7185, 7187, 7189, 7195, 7197, 7203, 7205, 7207, 7215, 7223, 7225, 7233, 7236, 7239, 7244, 7245, 7247, 7252, 7255, 7257, 7261, 7264, 7266, 7271, 7274, 7283, 7284, 7290, 7291, 7292, 7300, 7305, 7308, 7309, 7310, 7316, 7317, 7318, 7321, 7331, 7334, 7336, 7339, 7344, 7345, 7347, 7353, 7355, 7363, 7365, 7371, 7372, 7374, 7379, 7383, 7384, 7390, 7391, 7392, 7393, 7395, 7406, 7419, 7426, 7433, 7459, 7460, 7463, 7464, 7470, 7474, 7478, 7483, 7486, 7489, 7496, 7502, 7505, 7506, 7508, 7523, 7524, 7531, 7538, 7543, 7547, 7550, 7553, 7559, 7566, 7570, 7575, 7576, 7579, 7585, 7591, 7592, 7599, 7609, 7612, 7618, 7623, 7626, 7627, 7629, 7631, 7634, 7649, 7654, 7657, 7658, 7665, 7667, 7670, 7673, 7675, 7682, 7694, 7698, 7700, 7709, 7714, 7716, 7721, 7723, 7725, 7729, 7733, 7739, 7744, 7750, 7765, 7766, 7774, 7775, 7782, 7783, 7785, 7788, 7790, 7794, 7795, 7800, 7803, 7810, 7819, 7821, 7828, 7839, 7847, 7848, 7855, 7857, 7861, 7866, 7869, 7882, 7883, 7885, 7888, 7889, 7891, 7894, 7896, 7904, 7905, 7912, 7923, 7926, 7933, 7934, 7935, 7938, 7940, 7944, 7945, 7953, 7962, 7968, 7981, 7986, 7988, 7993, 7996, 7998, 7999, 8007, 8014, 8017, 8019, 8023, 8027, 8029, 8040, 8045, 8047, 8050, 8060, 8065, 8072, 8080, 8098, 8101, 8105, 8106, 8107, 8108, 8122, 8135, 8138, 8139, 8143, 8152, 8157, 8163, 8169, 8171, 8172, 8173, 8181, 8195, 8197, 8212, 8222, 8226, 8228, 8229, 8234, 8235, 8236, 8240, 8242, 8243, 8244, 8247, 8256, 8258, 8260, 8262, 8263, 8264, 8265, 8269, 8276, 8284, 8291, 8301, 8302, 8310, 8314, 8315, 8319, 8325, 8326, 8331, 8332, 8339, 8341, 8344, 8347, 8348, 8351, 8352, 8357, 8368, 8374, 8375, 8376, 8380, 8406, 8410, 8422, 8423, 8425, 8427, 8428, 8432, 8443, 8446, 8451, 8459, 8463, 8468, 8470, 8476, 8484, 8494, 8495, 8508, 8510, 8523, 8543, 8544, 8551, 8554, 8558, 8562, 8563, 8567, 8571, 8574, 8576, 8580, 8584, 8587, 8589, 8596, 8609, 8611, 8613, 8614, 8626, 8627, 8637, 8654, 8655, 8660, 8666, 8671, 8673, 8684, 8693, 8694, 8695, 8699, 8702, 8706, 8707, 8709, 8712, 8717, 8718, 8730, 8731, 8740, 8741, 8753, 8754, 8757, 8758, 8759, 8778, 8784, 8785, 8786, 8792, 8800, 8812, 8814, 8816, 8817, 8818, 8821, 8825, 8827, 8834, 8844, 8850, 8858, 8861, 8866, 8870, 8871, 8872, 8876, 8882, 8886, 8901, 8903, 8915, 8916, 8918, 8929, 8930, 8944, 8945, 8947, 8949, 8959, 8965, 8969, 8971, 8972, 8977, 8983, 8984, 8988, 8989, 8992, 8996, 8999, 9010, 9011, 9012, 9015, 9018, 9024, 9025, 9026, 9032, 9034, 9035, 9036, 9041, 9046, 9051, 9057, 9058, 9061, 9077, 9081, 9084, 9088, 9090, 9093, 9094, 9097, 9099, 9101, 9108, 9109, 9110, 9114, 9117, 9121, 9127, 9128, 9131, 9132, 9139, 9142, 9143, 9157, 9163, 9164, 9178, 9180, 9182, 9187, 9189, 9190, 9210, 9217, 9233, 9241, 9245, 9250, 9267, 9269, 9270, 9271, 9287, 9304, 9316, 9326, 9328, 9329, 9333, 9335, 9337, 9340, 9342, 9343, 9351, 9355, 9359, 9370, 9374, 9375, 9378, 9383, 9384, 9388, 9390, 9402, 9404, 9412, 9414, 9416, 9421, 9432, 9435, 9438, 9440, 9445, 9460, 9463, 9469, 9477, 9478, 9484, 9487, 9496, 9498, 9499, 9502, 9515, 9517, 9520, 9525, 9531, 9532, 9536, 9537, 9538, 9540, 9542, 9546, 9552, 9562, 9564, 9567, 9573, 9575, 9583, 9585, 9586, 9589, 9605, 9607, 9609, 9610, 9615, 9618, 9624, 9627, 9628, 9634, 9645, 9646, 9656, 9660, 9665, 9673, 9674, 9686, 9689, 9692, 9697, 9704, 9712, 9717, 9719, 9720, 9724, 9726, 9728, 9730, 9732, 9738, 9744, 9745, 9751, 9753, 9758, 9763, 9765, 9772, 9779, 9780, 9782, 9785, 9787, 9793, 9798, 9801, 9810, 9821, 9830, 9831, 9833, 9835, 9836, 9838, 9839, 9842, 9855, 9857, 9860, 9862, 9868, 9870, 9871, 9879, 9887, 9890, 9895, 9896, 9907, 9913, 9915, 9919, 9923, 9925, 9929, 9931, 9939, 9941, 9943, 9947, 9958, 9964, 9975, 9978, 9979, 9981, 9991, 9996], "external_url": "https://colorpunx.io/colors?i=216&name=#ffd926", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954409519277408257"}, "#713f1d": {"id": 217, "name": "#713f1d", "description": "#713f1d is one of 222 colors in the cryptopunx color pallette. It is used by 2824 unique punks", "hash": "7a10891ba992d6a6a9f1b4ae49712e1c", "image": "https://gateway.pinata.cloud/ipfs/QmPwr2zcNcVLjwsxdkZuQhz3BayMxPqhkVyxSzKZeJmie5?filename=colorpunx217.png", "punks": [1, 3, 8, 10, 12, 14, 19, 22, 25, 28, 30, 31, 35, 37, 41, 42, 47, 49, 52, 54, 56, 62, 63, 66, 67, 68, 72, 74, 77, 79, 85, 86, 89, 94, 103, 104, 109, 110, 111, 114, 115, 116, 132, 136, 137, 140, 141, 144, 154, 155, 156, 161, 163, 166, 173, 174, 176, 177, 180, 181, 184, 186, 188, 190, 191, 197, 200, 209, 211, 212, 214, 219, 221, 230, 232, 237, 239, 242, 245, 247, 248, 253, 256, 260, 261, 262, 265, 266, 267, 269, 294, 299, 303, 310, 316, 320, 323, 325, 326, 332, 334, 344, 349, 357, 367, 370, 373, 374, 378, 391, 398, 399, 401, 402, 403, 406, 408, 416, 417, 418, 423, 425, 426, 427, 428, 430, 431, 440, 441, 443, 444, 445, 451, 454, 455, 458, 459, 461, 462, 464, 468, 470, 471, 472, 474, 478, 484, 487, 489, 493, 495, 504, 509, 512, 524, 531, 532, 534, 536, 537, 545, 548, 553, 554, 555, 556, 557, 564, 567, 572, 579, 580, 582, 584, 585, 588, 590, 592, 595, 597, 601, 617, 618, 622, 624, 639, 646, 650, 652, 660, 661, 663, 670, 671, 675, 676, 678, 680, 688, 689, 693, 697, 699, 700, 708, 709, 713, 721, 722, 727, 731, 737, 741, 743, 748, 749, 750, 757, 758, 759, 761, 770, 776, 780, 791, 798, 803, 804, 807, 809, 817, 822, 824, 832, 833, 835, 840, 844, 853, 854, 859, 861, 862, 869, 874, 876, 885, 889, 891, 898, 899, 901, 902, 905, 907, 912, 913, 914, 923, 927, 931, 932, 933, 935, 941, 942, 943, 946, 947, 955, 956, 959, 964, 973, 974, 982, 986, 998, 999, 1000, 1004, 1006, 1008, 1014, 1015, 1017, 1019, 1023, 1024, 1027, 1029, 1035, 1039, 1040, 1052, 1056, 1063, 1066, 1071, 1075, 1079, 1086, 1088, 1090, 1091, 1098, 1099, 1104, 1106, 1108, 1109, 1116, 1125, 1127, 1129, 1130, 1132, 1140, 1143, 1145, 1155, 1158, 1160, 1166, 1172, 1177, 1182, 1184, 1189, 1194, 1200, 1211, 1212, 1226, 1227, 1230, 1235, 1240, 1246, 1254, 1257, 1265, 1269, 1275, 1276, 1277, 1279, 1280, 1281, 1289, 1295, 1296, 1297, 1299, 1302, 1306, 1310, 1317, 1318, 1319, 1322, 1325, 1326, 1327, 1332, 1338, 1339, 1341, 1343, 1345, 1346, 1352, 1353, 1355, 1359, 1361, 1364, 1367, 1372, 1376, 1378, 1381, 1382, 1388, 1391, 1393, 1395, 1397, 1401, 1403, 1407, 1413, 1415, 1417, 1429, 1430, 1431, 1434, 1436, 1441, 1442, 1446, 1449, 1458, 1459, 1461, 1463, 1469, 1471, 1473, 1476, 1482, 1485, 1493, 1498, 1503, 1505, 1506, 1507, 1512, 1514, 1518, 1524, 1527, 1528, 1535, 1537, 1542, 1543, 1544, 1547, 1548, 1556, 1558, 1560, 1561, 1564, 1568, 1570, 1572, 1577, 1580, 1581, 1584, 1595, 1598, 1600, 1602, 1605, 1610, 1611, 1613, 1617, 1621, 1622, 1625, 1633, 1634, 1636, 1639, 1643, 1644, 1645, 1647, 1652, 1664, 1666, 1668, 1670, 1683, 1684, 1686, 1687, 1692, 1693, 1695, 1702, 1703, 1707, 1711, 1724, 1728, 1729, 1731, 1732, 1738, 1739, 1740, 1742, 1749, 1750, 1754, 1757, 1761, 1763, 1769, 1770, 1782, 1792, 1796, 1797, 1803, 1813, 1815, 1816, 1818, 1822, 1825, 1827, 1830, 1832, 1833, 1835, 1838, 1839, 1841, 1846, 1847, 1848, 1855, 1856, 1860, 1869, 1870, 1877, 1880, 1885, 1887, 1890, 1898, 1901, 1902, 1905, 1906, 1907, 1924, 1925, 1927, 1928, 1929, 1930, 1931, 1938, 1940, 1943, 1946, 1949, 1953, 1956, 1957, 1961, 1964, 1965, 1970, 1974, 1980, 1981, 1982, 1983, 1988, 1991, 1992, 1995, 1998, 1999, 2000, 2008, 2009, 2012, 2014, 2017, 2019, 2020, 2022, 2024, 2026, 2035, 2040, 2041, 2043, 2047, 2052, 2053, 2054, 2055, 2067, 2068, 2076, 2080, 2085, 2087, 2089, 2090, 2094, 2095, 2097, 2100, 2103, 2106, 2107, 2117, 2118, 2124, 2129, 2133, 2134, 2135, 2139, 2142, 2149, 2150, 2151, 2153, 2160, 2167, 2168, 2170, 2171, 2172, 2173, 2177, 2181, 2185, 2188, 2194, 2197, 2199, 2200, 2202, 2204, 2208, 2220, 2222, 2224, 2226, 2236, 2244, 2250, 2251, 2254, 2257, 2263, 2271, 2275, 2279, 2282, 2285, 2288, 2294, 2298, 2299, 2307, 2308, 2312, 2321, 2324, 2326, 2339, 2341, 2343, 2346, 2351, 2354, 2362, 2369, 2381, 2382, 2383, 2395, 2397, 2398, 2403, 2404, 2406, 2409, 2411, 2416, 2421, 2422, 2423, 2427, 2431, 2435, 2437, 2438, 2443, 2445, 2448, 2449, 2450, 2451, 2458, 2462, 2463, 2468, 2471, 2475, 2478, 2480, 2485, 2486, 2487, 2489, 2490, 2498, 2503, 2505, 2511, 2516, 2518, 2519, 2522, 2525, 2527, 2531, 2534, 2536, 2538, 2546, 2556, 2557, 2561, 2563, 2565, 2574, 2577, 2578, 2590, 2594, 2595, 2597, 2602, 2611, 2613, 2614, 2618, 2623, 2631, 2633, 2635, 2637, 2641, 2642, 2648, 2649, 2650, 2656, 2660, 2662, 2663, 2665, 2666, 2672, 2676, 2677, 2678, 2684, 2688, 2690, 2691, 2694, 2696, 2705, 2710, 2716, 2718, 2723, 2733, 2734, 2738, 2739, 2741, 2742, 2744, 2747, 2750, 2756, 2757, 2758, 2760, 2761, 2763, 2765, 2768, 2771, 2777, 2778, 2782, 2784, 2790, 2791, 2792, 2796, 2798, 2800, 2801, 2802, 2803, 2805, 2807, 2808, 2812, 2813, 2814, 2818, 2820, 2821, 2823, 2827, 2828, 2831, 2832, 2834, 2837, 2841, 2843, 2850, 2858, 2863, 2865, 2871, 2877, 2878, 2881, 2883, 2886, 2888, 2889, 2896, 2897, 2898, 2899, 2904, 2905, 2907, 2908, 2909, 2912, 2915, 2916, 2918, 2919, 2920, 2925, 2933, 2934, 2935, 2936, 2937, 2942, 2945, 2947, 2950, 2955, 2956, 2966, 2970, 2971, 2973, 2974, 2976, 2983, 2985, 2987, 2989, 2990, 2994, 2995, 2996, 2997, 3001, 3002, 3003, 3008, 3009, 3011, 3014, 3017, 3025, 3034, 3036, 3037, 3039, 3042, 3057, 3058, 3059, 3063, 3067, 3069, 3083, 3087, 3088, 3093, 3103, 3104, 3105, 3106, 3107, 3110, 3113, 3114, 3119, 3122, 3123, 3129, 3136, 3139, 3143, 3144, 3148, 3150, 3152, 3153, 3160, 3164, 3165, 3166, 3168, 3169, 3170, 3172, 3173, 3177, 3180, 3181, 3186, 3189, 3190, 3192, 3196, 3199, 3203, 3204, 3205, 3206, 3209, 3213, 3215, 3218, 3219, 3220, 3231, 3235, 3238, 3243, 3244, 3245, 3254, 3260, 3261, 3267, 3269, 3272, 3281, 3286, 3289, 3290, 3295, 3299, 3309, 3311, 3315, 3323, 3324, 3326, 3330, 3333, 3335, 3348, 3351, 3352, 3353, 3354, 3356, 3359, 3360, 3365, 3366, 3368, 3370, 3371, 3376, 3385, 3386, 3387, 3392, 3400, 3401, 3404, 3409, 3417, 3421, 3422, 3425, 3428, 3430, 3431, 3432, 3433, 3435, 3437, 3446, 3448, 3452, 3453, 3458, 3470, 3472, 3473, 3478, 3479, 3480, 3482, 3483, 3485, 3494, 3498, 3499, 3502, 3505, 3506, 3507, 3509, 3514, 3515, 3516, 3518, 3519, 3527, 3529, 3533, 3539, 3551, 3554, 3558, 3561, 3563, 3568, 3571, 3573, 3580, 3583, 3588, 3590, 3592, 3593, 3596, 3599, 3608, 3616, 3617, 3620, 3621, 3628, 3629, 3630, 3643, 3646, 3647, 3649, 3652, 3654, 3659, 3662, 3663, 3669, 3671, 3674, 3676, 3677, 3680, 3682, 3689, 3696, 3700, 3705, 3711, 3716, 3718, 3723, 3728, 3729, 3734, 3739, 3744, 3752, 3753, 3757, 3763, 3767, 3774, 3775, 3778, 3779, 3782, 3783, 3784, 3788, 3789, 3790, 3793, 3794, 3795, 3797, 3798, 3800, 3801, 3802, 3805, 3807, 3810, 3823, 3827, 3828, 3832, 3835, 3836, 3852, 3853, 3856, 3858, 3862, 3863, 3864, 3865, 3868, 3870, 3876, 3883, 3887, 3890, 3895, 3898, 3899, 3911, 3914, 3918, 3920, 3922, 3925, 3929, 3932, 3933, 3934, 3935, 3940, 3944, 3950, 3960, 3964, 3965, 3967, 3974, 3976, 3981, 3982, 3985, 3986, 3992, 3995, 3997, 3999, 4009, 4011, 4013, 4014, 4015, 4020, 4022, 4023, 4025, 4029, 4037, 4039, 4040, 4048, 4050, 4058, 4064, 4069, 4070, 4071, 4072, 4074, 4075, 4078, 4079, 4081, 4085, 4089, 4091, 4096, 4098, 4100, 4103, 4105, 4108, 4110, 4112, 4127, 4135, 4136, 4137, 4138, 4146, 4148, 4149, 4152, 4161, 4170, 4179, 4186, 4187, 4189, 4191, 4192, 4193, 4195, 4196, 4198, 4200, 4201, 4207, 4209, 4210, 4214, 4220, 4229, 4231, 4234, 4236, 4238, 4245, 4250, 4251, 4252, 4255, 4256, 4265, 4273, 4275, 4276, 4277, 4280, 4291, 4292, 4294, 4300, 4308, 4311, 4315, 4317, 4319, 4321, 4322, 4323, 4328, 4329, 4332, 4334, 4338, 4340, 4341, 4350, 4360, 4363, 4373, 4374, 4383, 4384, 4387, 4391, 4392, 4396, 4398, 4400, 4403, 4407, 4411, 4414, 4422, 4432, 4443, 4444, 4448, 4449, 4452, 4457, 4461, 4463, 4467, 4475, 4477, 4478, 4484, 4493, 4494, 4500, 4502, 4514, 4519, 4521, 4522, 4525, 4526, 4529, 4531, 4533, 4535, 4537, 4541, 4543, 4545, 4552, 4554, 4557, 4558, 4563, 4568, 4571, 4573, 4574, 4575, 4582, 4583, 4584, 4585, 4587, 4590, 4591, 4592, 4596, 4597, 4601, 4603, 4606, 4611, 4612, 4615, 4625, 4627, 4631, 4632, 4633, 4634, 4644, 4646, 4650, 4651, 4653, 4657, 4661, 4671, 4676, 4677, 4681, 4682, 4684, 4685, 4686, 4688, 4695, 4707, 4708, 4709, 4711, 4718, 4725, 4726, 4728, 4733, 4737, 4739, 4741, 4742, 4744, 4752, 4755, 4761, 4765, 4766, 4767, 4771, 4772, 4775, 4780, 4782, 4785, 4788, 4791, 4793, 4798, 4801, 4804, 4807, 4809, 4811, 4814, 4815, 4819, 4829, 4831, 4837, 4840, 4841, 4844, 4847, 4848, 4853, 4856, 4859, 4862, 4866, 4867, 4875, 4876, 4877, 4879, 4881, 4882, 4886, 4887, 4893, 4902, 4908, 4911, 4912, 4922, 4926, 4931, 4935, 4939, 4943, 4944, 4946, 4951, 4953, 4961, 4962, 4967, 4970, 4971, 4973, 4978, 4979, 4983, 4985, 4987, 4989, 4993, 4998, 5001, 5002, 5005, 5009, 5011, 5015, 5017, 5018, 5020, 5021, 5022, 5023, 5025, 5027, 5028, 5040, 5041, 5042, 5047, 5053, 5054, 5057, 5060, 5061, 5063, 5067, 5068, 5074, 5076, 5083, 5098, 5100, 5101, 5103, 5115, 5117, 5119, 5122, 5123, 5126, 5130, 5131, 5136, 5137, 5142, 5144, 5145, 5152, 5153, 5165, 5166, 5168, 5169, 5174, 5176, 5180, 5181, 5183, 5190, 5195, 5196, 5198, 5201, 5202, 5206, 5207, 5210, 5215, 5218, 5222, 5224, 5227, 5229, 5235, 5236, 5237, 5238, 5240, 5244, 5252, 5254, 5255, 5256, 5258, 5259, 5262, 5264, 5267, 5271, 5275, 5278, 5279, 5289, 5290, 5294, 5298, 5303, 5306, 5307, 5308, 5311, 5313, 5322, 5325, 5338, 5339, 5340, 5341, 5348, 5349, 5353, 5355, 5362, 5371, 5374, 5376, 5380, 5385, 5386, 5387, 5392, 5407, 5411, 5416, 5418, 5420, 5430, 5433, 5441, 5445, 5446, 5452, 5455, 5456, 5457, 5458, 5460, 5462, 5464, 5466, 5470, 5475, 5486, 5490, 5491, 5493, 5497, 5498, 5507, 5509, 5516, 5519, 5520, 5523, 5524, 5525, 5533, 5534, 5542, 5544, 5554, 5559, 5560, 5562, 5566, 5572, 5578, 5584, 5587, 5590, 5595, 5608, 5613, 5614, 5615, 5619, 5622, 5623, 5625, 5626, 5627, 5633, 5635, 5637, 5638, 5653, 5670, 5680, 5682, 5684, 5686, 5688, 5697, 5698, 5701, 5703, 5704, 5710, 5711, 5723, 5726, 5733, 5737, 5738, 5748, 5751, 5757, 5759, 5760, 5771, 5772, 5781, 5783, 5789, 5791, 5799, 5800, 5802, 5803, 5806, 5809, 5811, 5812, 5813, 5816, 5817, 5830, 5831, 5834, 5835, 5836, 5838, 5839, 5840, 5852, 5855, 5861, 5863, 5866, 5868, 5871, 5873, 5875, 5883, 5884, 5886, 5890, 5892, 5897, 5899, 5901, 5903, 5909, 5911, 5912, 5917, 5919, 5922, 5928, 5929, 5930, 5931, 5932, 5934, 5939, 5941, 5943, 5945, 5949, 5955, 5959, 5962, 5965, 5972, 5973, 5984, 5985, 5986, 5989, 5991, 5994, 5996, 5997, 5998, 5999, 6001, 6003, 6006, 6008, 6016, 6022, 6028, 6035, 6038, 6043, 6048, 6071, 6076, 6077, 6080, 6083, 6088, 6095, 6099, 6101, 6102, 6105, 6107, 6111, 6113, 6114, 6117, 6121, 6122, 6125, 6126, 6128, 6140, 6143, 6144, 6146, 6152, 6154, 6157, 6159, 6163, 6164, 6168, 6170, 6172, 6173, 6181, 6192, 6193, 6197, 6198, 6199, 6200, 6205, 6206, 6211, 6221, 6224, 6229, 6230, 6233, 6235, 6239, 6246, 6251, 6257, 6261, 6262, 6266, 6268, 6269, 6273, 6274, 6276, 6279, 6282, 6287, 6289, 6291, 6298, 6305, 6306, 6308, 6309, 6322, 6323, 6327, 6332, 6334, 6335, 6341, 6346, 6348, 6351, 6352, 6359, 6362, 6365, 6367, 6369, 6371, 6373, 6374, 6375, 6376, 6382, 6387, 6390, 6391, 6395, 6397, 6399, 6400, 6404, 6411, 6412, 6421, 6426, 6428, 6430, 6435, 6446, 6447, 6448, 6451, 6454, 6459, 6462, 6465, 6466, 6467, 6468, 6470, 6474, 6480, 6482, 6483, 6490, 6492, 6497, 6499, 6503, 6507, 6509, 6511, 6513, 6514, 6532, 6535, 6544, 6549, 6551, 6554, 6559, 6560, 6561, 6564, 6581, 6582, 6588, 6595, 6599, 6601, 6603, 6604, 6605, 6609, 6612, 6614, 6617, 6620, 6623, 6624, 6625, 6626, 6629, 6633, 6642, 6643, 6646, 6651, 6655, 6656, 6660, 6663, 6669, 6674, 6677, 6680, 6681, 6683, 6685, 6688, 6693, 6694, 6695, 6718, 6719, 6722, 6724, 6725, 6726, 6727, 6730, 6734, 6741, 6742, 6744, 6749, 6750, 6752, 6755, 6757, 6758, 6760, 6762, 6763, 6767, 6773, 6778, 6786, 6788, 6794, 6796, 6798, 6802, 6804, 6805, 6806, 6808, 6811, 6812, 6818, 6834, 6836, 6841, 6843, 6846, 6849, 6859, 6860, 6867, 6871, 6872, 6875, 6877, 6879, 6880, 6881, 6882, 6884, 6888, 6898, 6899, 6903, 6904, 6906, 6907, 6910, 6926, 6931, 6932, 6937, 6950, 6951, 6955, 6956, 6957, 6963, 6964, 6967, 6972, 6974, 6985, 6986, 6989, 6993, 6997, 6998, 6999, 7000, 7002, 7003, 7005, 7006, 7007, 7008, 7009, 7011, 7015, 7019, 7029, 7030, 7043, 7044, 7046, 7054, 7056, 7064, 7074, 7080, 7081, 7082, 7083, 7085, 7093, 7094, 7100, 7101, 7104, 7111, 7115, 7118, 7130, 7131, 7143, 7146, 7154, 7155, 7159, 7160, 7162, 7167, 7175, 7179, 7184, 7185, 7189, 7190, 7197, 7198, 7199, 7204, 7205, 7208, 7212, 7213, 7215, 7216, 7220, 7221, 7232, 7234, 7243, 7249, 7251, 7253, 7259, 7260, 7262, 7263, 7264, 7270, 7274, 7281, 7282, 7286, 7288, 7292, 7295, 7299, 7300, 7304, 7306, 7310, 7316, 7320, 7323, 7325, 7326, 7327, 7331, 7336, 7339, 7342, 7345, 7347, 7349, 7350, 7351, 7354, 7357, 7358, 7379, 7382, 7385, 7391, 7392, 7393, 7397, 7399, 7406, 7408, 7415, 7417, 7419, 7428, 7429, 7443, 7444, 7453, 7454, 7456, 7460, 7479, 7483, 7484, 7485, 7486, 7492, 7494, 7495, 7506, 7509, 7510, 7517, 7525, 7526, 7527, 7528, 7529, 7532, 7533, 7544, 7545, 7547, 7550, 7552, 7564, 7569, 7574, 7575, 7582, 7583, 7587, 7591, 7593, 7597, 7601, 7604, 7608, 7618, 7626, 7628, 7633, 7646, 7647, 7655, 7657, 7663, 7671, 7680, 7681, 7684, 7686, 7687, 7688, 7692, 7693, 7702, 7703, 7708, 7709, 7711, 7713, 7730, 7734, 7735, 7736, 7737, 7747, 7748, 7749, 7750, 7754, 7755, 7758, 7763, 7764, 7766, 7771, 7779, 7782, 7783, 7787, 7789, 7791, 7794, 7797, 7801, 7805, 7808, 7809, 7813, 7820, 7824, 7826, 7830, 7832, 7834, 7835, 7837, 7839, 7842, 7843, 7850, 7857, 7869, 7870, 7873, 7874, 7885, 7890, 7893, 7894, 7897, 7902, 7909, 7917, 7918, 7919, 7923, 7931, 7935, 7936, 7942, 7955, 7963, 7967, 7969, 7973, 7974, 7975, 7978, 7982, 7987, 7989, 7994, 7995, 8002, 8004, 8005, 8007, 8008, 8015, 8016, 8027, 8030, 8039, 8042, 8047, 8049, 8061, 8063, 8066, 8068, 8071, 8078, 8080, 8083, 8085, 8086, 8088, 8089, 8092, 8094, 8095, 8101, 8115, 8117, 8118, 8126, 8145, 8147, 8150, 8157, 8159, 8164, 8168, 8170, 8176, 8180, 8184, 8185, 8186, 8191, 8192, 8199, 8200, 8201, 8202, 8207, 8209, 8213, 8218, 8231, 8232, 8234, 8237, 8238, 8240, 8241, 8244, 8246, 8247, 8262, 8269, 8272, 8276, 8277, 8279, 8284, 8285, 8287, 8288, 8291, 8294, 8297, 8300, 8308, 8310, 8312, 8313, 8319, 8320, 8325, 8328, 8331, 8341, 8346, 8349, 8351, 8352, 8354, 8360, 8361, 8364, 8365, 8369, 8370, 8372, 8373, 8377, 8380, 8389, 8394, 8396, 8409, 8410, 8413, 8427, 8428, 8436, 8438, 8444, 8447, 8449, 8454, 8455, 8466, 8467, 8470, 8473, 8478, 8479, 8483, 8487, 8489, 8490, 8493, 8499, 8500, 8501, 8505, 8507, 8512, 8518, 8519, 8524, 8532, 8536, 8537, 8539, 8540, 8545, 8546, 8559, 8560, 8562, 8564, 8565, 8568, 8571, 8572, 8575, 8577, 8580, 8586, 8589, 8590, 8592, 8600, 8603, 8607, 8608, 8613, 8621, 8629, 8630, 8637, 8642, 8643, 8644, 8645, 8647, 8650, 8656, 8661, 8663, 8664, 8665, 8667, 8672, 8676, 8680, 8683, 8686, 8687, 8697, 8705, 8710, 8725, 8726, 8727, 8729, 8730, 8732, 8733, 8738, 8746, 8751, 8752, 8760, 8763, 8764, 8766, 8768, 8773, 8774, 8776, 8783, 8785, 8791, 8797, 8798, 8799, 8801, 8804, 8806, 8807, 8809, 8810, 8812, 8813, 8817, 8822, 8825, 8830, 8834, 8842, 8848, 8851, 8852, 8856, 8858, 8863, 8867, 8869, 8873, 8882, 8883, 8887, 8888, 8889, 8891, 8898, 8911, 8916, 8917, 8919, 8920, 8922, 8926, 8932, 8940, 8944, 8946, 8948, 8949, 8959, 8970, 8971, 8974, 8985, 8991, 8992, 8994, 8996, 8997, 9000, 9001, 9011, 9012, 9013, 9014, 9017, 9021, 9030, 9035, 9038, 9041, 9042, 9050, 9054, 9057, 9060, 9061, 9066, 9067, 9068, 9070, 9075, 9076, 9081, 9087, 9088, 9100, 9108, 9116, 9123, 9124, 9127, 9130, 9132, 9133, 9137, 9138, 9140, 9142, 9143, 9147, 9150, 9151, 9157, 9167, 9168, 9172, 9175, 9183, 9184, 9189, 9192, 9198, 9202, 9207, 9209, 9211, 9213, 9217, 9218, 9219, 9223, 9226, 9228, 9232, 9240, 9241, 9243, 9244, 9257, 9260, 9266, 9272, 9274, 9283, 9287, 9291, 9293, 9296, 9297, 9301, 9304, 9306, 9311, 9316, 9318, 9322, 9324, 9326, 9328, 9330, 9335, 9338, 9343, 9352, 9353, 9358, 9362, 9364, 9369, 9375, 9376, 9377, 9379, 9380, 9383, 9385, 9386, 9403, 9404, 9409, 9411, 9415, 9419, 9420, 9424, 9427, 9430, 9437, 9438, 9441, 9442, 9448, 9450, 9451, 9455, 9457, 9461, 9464, 9465, 9468, 9470, 9481, 9482, 9483, 9485, 9486, 9488, 9490, 9495, 9497, 9499, 9503, 9504, 9507, 9516, 9519, 9521, 9529, 9532, 9533, 9555, 9561, 9564, 9568, 9571, 9572, 9578, 9580, 9594, 9598, 9603, 9604, 9606, 9608, 9612, 9616, 9617, 9621, 9628, 9629, 9631, 9632, 9634, 9637, 9639, 9640, 9641, 9643, 9656, 9657, 9659, 9662, 9667, 9677, 9678, 9680, 9683, 9690, 9691, 9695, 9697, 9700, 9703, 9705, 9710, 9717, 9719, 9720, 9724, 9727, 9729, 9734, 9735, 9737, 9739, 9740, 9750, 9752, 9753, 9755, 9762, 9764, 9765, 9767, 9768, 9773, 9776, 9778, 9779, 9780, 9781, 9791, 9793, 9801, 9806, 9813, 9818, 9819, 9821, 9823, 9828, 9830, 9831, 9832, 9833, 9835, 9840, 9841, 9846, 9848, 9849, 9855, 9858, 9863, 9865, 9866, 9867, 9870, 9872, 9878, 9886, 9887, 9888, 9891, 9893, 9897, 9898, 9903, 9907, 9910, 9919, 9928, 9930, 9941, 9942, 9948, 9953, 9954, 9970, 9981, 9984, 9986, 9989, 9993, 9994, 9999], "external_url": "https://colorpunx.io/colors?i=217&name=#713f1d", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954410618789036033"}, "#dbb180": {"id": 218, "name": "#dbb180", "description": "#dbb180 is one of 222 colors in the cryptopunx color pallette. It is used by 3006 unique punks", "hash": "a2d2f31ba36967fb75ed7e82d326d73b", "image": "https://gateway.pinata.cloud/ipfs/QmW8nNB2wLKR8iRxKmCMa6SaJnzAFGpULZv72kDKQzv1mZ?filename=colorpunx218.png", "punks": [2, 13, 17, 20, 21, 23, 24, 27, 32, 33, 34, 38, 39, 40, 44, 48, 53, 55, 57, 60, 61, 71, 75, 76, 81, 83, 84, 87, 88, 91, 92, 93, 96, 98, 105, 106, 108, 118, 121, 122, 125, 128, 129, 130, 135, 138, 142, 143, 145, 146, 149, 152, 158, 159, 168, 170, 183, 185, 187, 189, 193, 194, 195, 196, 199, 202, 203, 206, 207, 218, 222, 223, 224, 229, 234, 235, 236, 241, 243, 244, 249, 251, 254, 255, 257, 259, 268, 273, 274, 276, 277, 281, 283, 285, 292, 293, 298, 300, 306, 308, 311, 312, 313, 319, 328, 333, 338, 341, 342, 343, 348, 351, 353, 356, 358, 365, 369, 375, 376, 379, 380, 381, 382, 389, 390, 393, 394, 395, 404, 407, 409, 411, 414, 415, 422, 437, 442, 448, 457, 460, 465, 467, 469, 473, 479, 481, 482, 483, 490, 491, 492, 494, 497, 498, 499, 502, 503, 513, 519, 520, 522, 527, 528, 533, 540, 541, 563, 571, 574, 575, 583, 586, 587, 591, 594, 600, 602, 606, 608, 609, 613, 616, 634, 640, 641, 645, 648, 651, 654, 655, 656, 664, 666, 672, 677, 687, 690, 694, 696, 698, 701, 702, 703, 712, 715, 717, 724, 728, 730, 732, 733, 742, 744, 754, 767, 768, 772, 781, 782, 783, 784, 786, 788, 789, 790, 792, 796, 799, 800, 801, 805, 808, 810, 811, 813, 815, 819, 823, 825, 827, 828, 829, 830, 837, 838, 843, 845, 846, 847, 848, 850, 852, 856, 857, 860, 868, 870, 873, 877, 881, 882, 884, 887, 895, 896, 897, 900, 903, 906, 910, 916, 919, 920, 921, 922, 924, 925, 926, 936, 944, 945, 948, 957, 958, 962, 965, 966, 967, 969, 977, 979, 988, 993, 996, 997, 1003, 1005, 1007, 1009, 1010, 1018, 1028, 1032, 1033, 1036, 1038, 1042, 1044, 1047, 1049, 1051, 1054, 1058, 1060, 1061, 1064, 1065, 1069, 1072, 1074, 1077, 1080, 1081, 1085, 1089, 1094, 1095, 1096, 1097, 1100, 1101, 1102, 1105, 1111, 1120, 1128, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1146, 1149, 1150, 1152, 1153, 1154, 1162, 1163, 1167, 1169, 1171, 1173, 1175, 1176, 1181, 1185, 1191, 1195, 1198, 1201, 1202, 1207, 1210, 1213, 1215, 1216, 1217, 1219, 1220, 1221, 1223, 1229, 1231, 1233, 1234, 1236, 1237, 1238, 1243, 1248, 1251, 1255, 1256, 1261, 1263, 1267, 1268, 1270, 1271, 1273, 1282, 1283, 1284, 1285, 1290, 1294, 1298, 1301, 1307, 1309, 1312, 1313, 1315, 1316, 1321, 1328, 1330, 1334, 1335, 1336, 1337, 1340, 1344, 1347, 1348, 1349, 1356, 1360, 1363, 1365, 1370, 1373, 1377, 1379, 1384, 1385, 1386, 1387, 1389, 1392, 1400, 1402, 1404, 1406, 1408, 1411, 1412, 1414, 1416, 1421, 1422, 1423, 1427, 1428, 1432, 1437, 1448, 1451, 1454, 1457, 1460, 1464, 1468, 1470, 1472, 1479, 1480, 1481, 1484, 1488, 1489, 1492, 1495, 1499, 1500, 1502, 1508, 1510, 1511, 1513, 1516, 1520, 1521, 1522, 1532, 1538, 1541, 1545, 1546, 1551, 1553, 1559, 1565, 1569, 1574, 1585, 1586, 1587, 1588, 1592, 1594, 1596, 1599, 1603, 1606, 1609, 1614, 1615, 1623, 1629, 1635, 1637, 1638, 1641, 1642, 1646, 1650, 1655, 1656, 1659, 1660, 1661, 1662, 1673, 1675, 1679, 1682, 1685, 1690, 1691, 1701, 1704, 1705, 1712, 1715, 1717, 1722, 1723, 1726, 1730, 1733, 1735, 1736, 1743, 1744, 1751, 1752, 1753, 1764, 1765, 1766, 1768, 1772, 1773, 1777, 1779, 1781, 1783, 1784, 1785, 1786, 1787, 1789, 1791, 1799, 1801, 1802, 1804, 1806, 1807, 1811, 1814, 1820, 1824, 1826, 1828, 1829, 1836, 1840, 1844, 1845, 1850, 1857, 1858, 1862, 1865, 1866, 1867, 1868, 1871, 1875, 1878, 1881, 1883, 1895, 1912, 1913, 1915, 1919, 1921, 1926, 1936, 1939, 1942, 1947, 1948, 1950, 1952, 1954, 1960, 1962, 1968, 1971, 1972, 1978, 2003, 2005, 2006, 2007, 2011, 2015, 2018, 2025, 2027, 2032, 2033, 2034, 2036, 2038, 2044, 2046, 2049, 2050, 2051, 2056, 2057, 2060, 2062, 2070, 2073, 2079, 2086, 2088, 2091, 2096, 2101, 2102, 2109, 2111, 2114, 2115, 2119, 2121, 2123, 2125, 2126, 2128, 2131, 2141, 2143, 2144, 2145, 2147, 2148, 2154, 2155, 2156, 2157, 2158, 2163, 2165, 2175, 2180, 2182, 2184, 2187, 2191, 2196, 2203, 2209, 2210, 2211, 2215, 2216, 2218, 2219, 2221, 2225, 2228, 2229, 2237, 2238, 2242, 2245, 2247, 2252, 2253, 2255, 2256, 2258, 2260, 2264, 2265, 2267, 2270, 2273, 2274, 2277, 2278, 2281, 2287, 2290, 2292, 2293, 2295, 2296, 2297, 2305, 2311, 2315, 2316, 2318, 2322, 2328, 2331, 2333, 2335, 2336, 2340, 2342, 2349, 2355, 2358, 2361, 2364, 2365, 2373, 2374, 2375, 2378, 2379, 2380, 2384, 2387, 2388, 2389, 2396, 2399, 2400, 2402, 2405, 2413, 2414, 2417, 2418, 2420, 2426, 2428, 2432, 2434, 2439, 2440, 2444, 2446, 2447, 2452, 2453, 2454, 2455, 2456, 2470, 2474, 2476, 2479, 2482, 2493, 2494, 2500, 2506, 2507, 2510, 2520, 2523, 2532, 2535, 2537, 2539, 2540, 2542, 2543, 2544, 2547, 2549, 2551, 2552, 2554, 2555, 2558, 2567, 2568, 2579, 2584, 2585, 2586, 2591, 2592, 2599, 2600, 2604, 2606, 2610, 2612, 2617, 2619, 2620, 2621, 2622, 2624, 2626, 2628, 2634, 2636, 2644, 2657, 2658, 2664, 2668, 2669, 2670, 2673, 2675, 2680, 2685, 2687, 2689, 2693, 2701, 2706, 2712, 2713, 2722, 2726, 2728, 2736, 2740, 2745, 2751, 2752, 2753, 2766, 2770, 2772, 2773, 2774, 2789, 2794, 2797, 2806, 2810, 2815, 2816, 2819, 2825, 2826, 2830, 2835, 2836, 2838, 2839, 2845, 2847, 2848, 2852, 2861, 2862, 2868, 2869, 2872, 2874, 2880, 2893, 2900, 2906, 2922, 2923, 2928, 2931, 2939, 2943, 2944, 2946, 2948, 2949, 2951, 2958, 2964, 2968, 2975, 2977, 2980, 2982, 2986, 2988, 2992, 2993, 3012, 3016, 3019, 3022, 3026, 3027, 3029, 3032, 3043, 3045, 3046, 3047, 3048, 3049, 3051, 3052, 3062, 3064, 3065, 3070, 3071, 3073, 3075, 3077, 3078, 3079, 3080, 3081, 3082, 3084, 3092, 3094, 3098, 3099, 3101, 3108, 3116, 3117, 3121, 3125, 3126, 3127, 3133, 3135, 3138, 3140, 3142, 3147, 3157, 3167, 3175, 3178, 3179, 3182, 3184, 3185, 3188, 3195, 3201, 3214, 3222, 3225, 3228, 3229, 3230, 3246, 3247, 3249, 3250, 3255, 3257, 3259, 3268, 3271, 3274, 3277, 3283, 3284, 3287, 3291, 3298, 3302, 3308, 3310, 3312, 3316, 3321, 3329, 3331, 3332, 3339, 3341, 3345, 3349, 3355, 3362, 3367, 3373, 3381, 3382, 3383, 3384, 3389, 3390, 3394, 3398, 3402, 3407, 3410, 3414, 3415, 3416, 3420, 3424, 3434, 3436, 3438, 3439, 3440, 3442, 3444, 3445, 3449, 3450, 3454, 3462, 3464, 3466, 3467, 3468, 3471, 3476, 3477, 3491, 3500, 3503, 3508, 3511, 3520, 3522, 3525, 3530, 3535, 3536, 3543, 3545, 3546, 3548, 3549, 3552, 3562, 3566, 3569, 3570, 3579, 3582, 3586, 3589, 3591, 3601, 3603, 3605, 3611, 3613, 3619, 3623, 3627, 3632, 3633, 3639, 3640, 3642, 3645, 3648, 3650, 3658, 3661, 3666, 3667, 3668, 3673, 3675, 3678, 3679, 3681, 3685, 3688, 3690, 3691, 3693, 3694, 3695, 3699, 3703, 3707, 3708, 3709, 3710, 3713, 3717, 3721, 3722, 3724, 3725, 3730, 3732, 3735, 3736, 3740, 3741, 3742, 3746, 3748, 3749, 3750, 3755, 3756, 3761, 3762, 3765, 3766, 3780, 3786, 3787, 3803, 3809, 3812, 3813, 3819, 3820, 3825, 3833, 3840, 3844, 3845, 3846, 3848, 3850, 3851, 3854, 3855, 3857, 3860, 3869, 3873, 3874, 3878, 3881, 3882, 3884, 3885, 3892, 3896, 3900, 3901, 3906, 3907, 3910, 3912, 3913, 3915, 3916, 3921, 3926, 3927, 3931, 3936, 3937, 3938, 3939, 3941, 3942, 3943, 3947, 3949, 3954, 3959, 3962, 3971, 3972, 3979, 3980, 3984, 3988, 3989, 3990, 3994, 3996, 4002, 4003, 4004, 4007, 4008, 4016, 4017, 4019, 4024, 4028, 4033, 4034, 4043, 4053, 4054, 4059, 4063, 4067, 4068, 4076, 4084, 4087, 4090, 4092, 4093, 4094, 4101, 4104, 4107, 4115, 4116, 4118, 4119, 4129, 4133, 4140, 4144, 4153, 4154, 4157, 4158, 4160, 4162, 4166, 4168, 4169, 4171, 4173, 4175, 4180, 4181, 4183, 4185, 4188, 4199, 4202, 4222, 4226, 4230, 4232, 4233, 4235, 4241, 4242, 4244, 4246, 4248, 4258, 4259, 4262, 4266, 4271, 4272, 4279, 4282, 4283, 4284, 4285, 4287, 4290, 4293, 4295, 4296, 4297, 4302, 4306, 4310, 4314, 4316, 4318, 4327, 4330, 4333, 4336, 4339, 4342, 4345, 4348, 4349, 4353, 4354, 4364, 4367, 4369, 4371, 4372, 4378, 4380, 4382, 4385, 4388, 4390, 4393, 4395, 4399, 4401, 4406, 4408, 4409, 4426, 4429, 4437, 4438, 4439, 4441, 4445, 4453, 4454, 4455, 4458, 4459, 4469, 4474, 4476, 4479, 4486, 4487, 4488, 4490, 4491, 4497, 4498, 4499, 4501, 4506, 4509, 4515, 4516, 4518, 4527, 4532, 4534, 4538, 4539, 4540, 4542, 4544, 4546, 4547, 4550, 4555, 4556, 4560, 4562, 4565, 4566, 4569, 4577, 4580, 4586, 4589, 4595, 4600, 4607, 4610, 4617, 4618, 4620, 4622, 4623, 4626, 4629, 4636, 4637, 4639, 4641, 4649, 4652, 4659, 4660, 4663, 4666, 4670, 4673, 4674, 4678, 4691, 4692, 4696, 4702, 4712, 4713, 4715, 4716, 4717, 4720, 4721, 4730, 4732, 4738, 4743, 4745, 4748, 4750, 4751, 4757, 4763, 4768, 4773, 4776, 4787, 4790, 4795, 4797, 4802, 4803, 4805, 4812, 4817, 4821, 4827, 4846, 4854, 4860, 4861, 4868, 4869, 4870, 4872, 4873, 4888, 4889, 4896, 4897, 4899, 4900, 4903, 4904, 4913, 4914, 4915, 4916, 4917, 4919, 4927, 4930, 4932, 4938, 4942, 4947, 4949, 4950, 4952, 4955, 4956, 4957, 4959, 4964, 4968, 4972, 4982, 4990, 4995, 4999, 5000, 5004, 5010, 5013, 5019, 5029, 5030, 5031, 5033, 5034, 5037, 5043, 5048, 5049, 5050, 5052, 5058, 5059, 5070, 5071, 5072, 5080, 5081, 5084, 5086, 5090, 5092, 5093, 5095, 5099, 5102, 5104, 5107, 5110, 5111, 5112, 5113, 5114, 5118, 5120, 5124, 5125, 5132, 5134, 5139, 5140, 5141, 5150, 5156, 5157, 5159, 5161, 5163, 5167, 5170, 5171, 5172, 5178, 5184, 5185, 5191, 5194, 5197, 5204, 5208, 5211, 5213, 5226, 5228, 5230, 5231, 5239, 5241, 5242, 5246, 5249, 5250, 5251, 5261, 5263, 5265, 5270, 5272, 5273, 5276, 5280, 5282, 5283, 5284, 5285, 5291, 5293, 5296, 5302, 5304, 5305, 5315, 5317, 5319, 5320, 5321, 5324, 5326, 5327, 5328, 5331, 5337, 5342, 5351, 5352, 5354, 5357, 5363, 5364, 5367, 5368, 5369, 5370, 5372, 5373, 5378, 5383, 5384, 5388, 5390, 5396, 5397, 5398, 5404, 5406, 5408, 5409, 5410, 5414, 5422, 5423, 5425, 5427, 5428, 5429, 5436, 5439, 5440, 5443, 5453, 5454, 5459, 5461, 5463, 5465, 5468, 5469, 5471, 5473, 5474, 5476, 5477, 5483, 5484, 5488, 5495, 5496, 5502, 5503, 5504, 5506, 5511, 5512, 5515, 5521, 5527, 5532, 5535, 5541, 5549, 5550, 5551, 5553, 5555, 5556, 5563, 5565, 5568, 5574, 5582, 5585, 5588, 5591, 5596, 5601, 5606, 5609, 5610, 5624, 5628, 5631, 5632, 5639, 5643, 5644, 5645, 5648, 5649, 5656, 5659, 5660, 5663, 5665, 5669, 5671, 5675, 5679, 5683, 5687, 5689, 5694, 5695, 5696, 5700, 5702, 5709, 5712, 5714, 5720, 5721, 5725, 5727, 5729, 5730, 5734, 5736, 5739, 5740, 5741, 5743, 5745, 5746, 5747, 5752, 5763, 5765, 5767, 5768, 5769, 5786, 5788, 5796, 5797, 5804, 5805, 5807, 5819, 5824, 5827, 5832, 5833, 5837, 5841, 5842, 5844, 5847, 5849, 5851, 5854, 5857, 5858, 5862, 5867, 5870, 5874, 5876, 5880, 5885, 5888, 5891, 5894, 5896, 5907, 5910, 5914, 5918, 5921, 5933, 5935, 5937, 5940, 5948, 5950, 5952, 5957, 5958, 5960, 5961, 5967, 5969, 5970, 5971, 5974, 5976, 5977, 5979, 5988, 5992, 5993, 5995, 6000, 6002, 6009, 6010, 6011, 6012, 6014, 6019, 6021, 6025, 6026, 6027, 6034, 6040, 6045, 6047, 6049, 6050, 6052, 6058, 6059, 6060, 6061, 6063, 6064, 6065, 6066, 6070, 6072, 6073, 6074, 6075, 6079, 6081, 6085, 6086, 6087, 6090, 6096, 6100, 6103, 6110, 6119, 6124, 6130, 6131, 6136, 6138, 6141, 6142, 6148, 6155, 6160, 6161, 6162, 6165, 6167, 6177, 6180, 6183, 6184, 6185, 6189, 6191, 6194, 6196, 6203, 6204, 6207, 6209, 6212, 6213, 6215, 6217, 6218, 6223, 6225, 6236, 6237, 6240, 6243, 6247, 6248, 6249, 6250, 6253, 6259, 6260, 6280, 6290, 6293, 6294, 6295, 6299, 6303, 6310, 6311, 6313, 6315, 6316, 6318, 6319, 6321, 6324, 6325, 6329, 6331, 6333, 6337, 6338, 6339, 6345, 6349, 6355, 6356, 6366, 6368, 6379, 6381, 6384, 6385, 6388, 6389, 6392, 6396, 6408, 6409, 6410, 6414, 6417, 6418, 6419, 6420, 6423, 6427, 6429, 6431, 6432, 6433, 6440, 6442, 6445, 6452, 6455, 6463, 6464, 6469, 6472, 6473, 6476, 6478, 6485, 6486, 6494, 6496, 6500, 6504, 6505, 6506, 6508, 6517, 6520, 6521, 6523, 6525, 6528, 6529, 6531, 6533, 6538, 6539, 6540, 6555, 6556, 6558, 6562, 6565, 6573, 6574, 6575, 6587, 6589, 6591, 6592, 6597, 6598, 6606, 6607, 6610, 6613, 6615, 6616, 6618, 6619, 6627, 6628, 6630, 6631, 6634, 6635, 6639, 6641, 6650, 6653, 6658, 6661, 6664, 6665, 6670, 6672, 6675, 6676, 6678, 6679, 6686, 6696, 6699, 6702, 6707, 6709, 6710, 6717, 6731, 6732, 6738, 6743, 6753, 6754, 6765, 6768, 6769, 6770, 6774, 6779, 6783, 6785, 6789, 6795, 6797, 6799, 6809, 6819, 6823, 6824, 6829, 6831, 6832, 6835, 6837, 6839, 6844, 6845, 6848, 6852, 6853, 6858, 6861, 6862, 6863, 6868, 6873, 6876, 6878, 6887, 6890, 6900, 6902, 6905, 6912, 6913, 6914, 6921, 6922, 6923, 6929, 6936, 6938, 6943, 6944, 6945, 6947, 6949, 6952, 6953, 6960, 6962, 6971, 6982, 6984, 6988, 6992, 6995, 6996, 7010, 7012, 7016, 7017, 7020, 7023, 7024, 7027, 7034, 7038, 7039, 7041, 7045, 7048, 7050, 7051, 7053, 7059, 7060, 7061, 7062, 7071, 7073, 7078, 7088, 7095, 7096, 7098, 7103, 7105, 7106, 7107, 7108, 7109, 7110, 7112, 7113, 7117, 7119, 7122, 7124, 7125, 7126, 7128, 7133, 7134, 7135, 7137, 7140, 7145, 7148, 7150, 7151, 7152, 7153, 7165, 7166, 7170, 7171, 7172, 7173, 7188, 7195, 7196, 7206, 7207, 7209, 7223, 7225, 7227, 7228, 7230, 7231, 7235, 7236, 7238, 7239, 7240, 7242, 7244, 7245, 7247, 7248, 7255, 7268, 7269, 7271, 7272, 7279, 7280, 7284, 7290, 7293, 7296, 7297, 7302, 7307, 7313, 7314, 7315, 7317, 7318, 7324, 7328, 7329, 7330, 7333, 7334, 7338, 7340, 7341, 7346, 7369, 7370, 7371, 7374, 7376, 7377, 7378, 7380, 7383, 7386, 7387, 7394, 7396, 7398, 7401, 7404, 7407, 7411, 7412, 7413, 7414, 7416, 7420, 7424, 7426, 7433, 7434, 7436, 7437, 7439, 7445, 7452, 7455, 7464, 7468, 7477, 7478, 7480, 7481, 7482, 7487, 7488, 7489, 7497, 7498, 7499, 7502, 7504, 7505, 7515, 7516, 7520, 7521, 7522, 7524, 7531, 7537, 7538, 7540, 7546, 7549, 7553, 7554, 7557, 7560, 7565, 7570, 7571, 7572, 7576, 7578, 7580, 7585, 7589, 7595, 7596, 7600, 7606, 7613, 7615, 7617, 7620, 7624, 7625, 7630, 7631, 7635, 7637, 7638, 7639, 7640, 7643, 7645, 7648, 7650, 7651, 7652, 7653, 7656, 7658, 7659, 7661, 7665, 7666, 7667, 7670, 7672, 7674, 7675, 7682, 7683, 7691, 7696, 7697, 7698, 7706, 7707, 7710, 7712, 7714, 7716, 7717, 7718, 7719, 7720, 7721, 7723, 7725, 7732, 7733, 7741, 7744, 7745, 7746, 7751, 7752, 7757, 7760, 7767, 7768, 7770, 7772, 7773, 7774, 7776, 7778, 7780, 7788, 7793, 7796, 7799, 7810, 7815, 7819, 7821, 7825, 7827, 7828, 7829, 7833, 7838, 7841, 7844, 7846, 7848, 7853, 7854, 7856, 7864, 7867, 7868, 7871, 7876, 7879, 7882, 7886, 7888, 7889, 7891, 7892, 7896, 7898, 7900, 7903, 7908, 7912, 7925, 7927, 7929, 7938, 7939, 7944, 7945, 7946, 7947, 7949, 7957, 7959, 7965, 7966, 7968, 7970, 7976, 7977, 7979, 7980, 7983, 7984, 7986, 7988, 7991, 7996, 7997, 7999, 8009, 8010, 8017, 8019, 8022, 8025, 8029, 8035, 8040, 8043, 8046, 8050, 8051, 8053, 8055, 8057, 8058, 8059, 8060, 8062, 8064, 8065, 8067, 8074, 8079, 8081, 8082, 8087, 8090, 8096, 8102, 8103, 8104, 8105, 8110, 8113, 8122, 8124, 8129, 8130, 8132, 8138, 8139, 8140, 8141, 8142, 8152, 8154, 8156, 8158, 8160, 8166, 8172, 8173, 8178, 8179, 8194, 8195, 8196, 8197, 8198, 8203, 8206, 8210, 8215, 8216, 8217, 8220, 8223, 8227, 8229, 8235, 8236, 8242, 8243, 8245, 8250, 8251, 8256, 8257, 8260, 8261, 8263, 8268, 8270, 8280, 8281, 8283, 8286, 8290, 8292, 8295, 8298, 8299, 8302, 8303, 8304, 8309, 8316, 8317, 8322, 8323, 8326, 8330, 8336, 8337, 8342, 8343, 8357, 8363, 8366, 8374, 8375, 8376, 8379, 8382, 8385, 8387, 8392, 8398, 8401, 8402, 8403, 8405, 8407, 8411, 8412, 8415, 8416, 8419, 8422, 8423, 8425, 8426, 8430, 8431, 8433, 8434, 8439, 8448, 8450, 8451, 8452, 8453, 8457, 8458, 8459, 8460, 8462, 8463, 8464, 8465, 8468, 8469, 8484, 8486, 8491, 8495, 8496, 8497, 8504, 8508, 8511, 8515, 8516, 8517, 8520, 8523, 8525, 8526, 8527, 8528, 8529, 8530, 8533, 8535, 8538, 8544, 8547, 8550, 8551, 8554, 8555, 8557, 8573, 8574, 8576, 8578, 8579, 8582, 8584, 8588, 8595, 8596, 8598, 8601, 8604, 8605, 8609, 8612, 8615, 8617, 8618, 8620, 8623, 8624, 8625, 8626, 8631, 8640, 8646, 8649, 8651, 8655, 8657, 8659, 8669, 8671, 8674, 8677, 8679, 8681, 8685, 8689, 8690, 8692, 8693, 8694, 8696, 8699, 8700, 8701, 8703, 8704, 8706, 8707, 8714, 8716, 8717, 8720, 8721, 8722, 8724, 8728, 8731, 8736, 8737, 8748, 8749, 8754, 8756, 8757, 8759, 8761, 8762, 8767, 8771, 8772, 8775, 8781, 8786, 8788, 8790, 8796, 8808, 8814, 8816, 8824, 8827, 8832, 8833, 8835, 8844, 8847, 8849, 8850, 8853, 8855, 8861, 8868, 8870, 8871, 8872, 8874, 8876, 8879, 8880, 8886, 8890, 8892, 8894, 8900, 8904, 8908, 8910, 8912, 8914, 8915, 8918, 8924, 8927, 8930, 8933, 8934, 8935, 8937, 8938, 8939, 8941, 8947, 8950, 8953, 8955, 8956, 8962, 8968, 8978, 8980, 8981, 8982, 8983, 8984, 8987, 8988, 8993, 8995, 8998, 8999, 9006, 9015, 9019, 9022, 9023, 9025, 9028, 9037, 9044, 9045, 9046, 9049, 9053, 9055, 9056, 9059, 9063, 9064, 9069, 9071, 9072, 9073, 9078, 9079, 9083, 9086, 9089, 9090, 9091, 9093, 9095, 9096, 9097, 9099, 9102, 9104, 9105, 9107, 9109, 9112, 9114, 9117, 9120, 9121, 9129, 9131, 9134, 9136, 9141, 9144, 9145, 9146, 9152, 9155, 9156, 9158, 9161, 9162, 9187, 9188, 9191, 9193, 9196, 9199, 9200, 9201, 9204, 9206, 9208, 9210, 9214, 9225, 9231, 9233, 9235, 9236, 9242, 9247, 9248, 9252, 9253, 9254, 9255, 9256, 9262, 9263, 9267, 9268, 9269, 9273, 9276, 9281, 9285, 9289, 9305, 9308, 9310, 9312, 9314, 9325, 9327, 9329, 9331, 9333, 9336, 9340, 9341, 9342, 9344, 9345, 9346, 9349, 9351, 9355, 9356, 9357, 9359, 9360, 9363, 9371, 9372, 9373, 9374, 9381, 9388, 9389, 9391, 9392, 9394, 9396, 9397, 9400, 9408, 9410, 9414, 9421, 9432, 9433, 9439, 9443, 9447, 9454, 9463, 9466, 9467, 9475, 9478, 9479, 9484, 9487, 9492, 9494, 9496, 9506, 9508, 9509, 9512, 9515, 9518, 9522, 9523, 9524, 9528, 9534, 9539, 9540, 9542, 9543, 9544, 9546, 9547, 9551, 9556, 9562, 9565, 9566, 9576, 9584, 9585, 9588, 9591, 9596, 9597, 9599, 9601, 9602, 9611, 9613, 9614, 9618, 9619, 9622, 9623, 9630, 9633, 9644, 9645, 9646, 9648, 9651, 9652, 9664, 9666, 9668, 9669, 9672, 9673, 9684, 9686, 9688, 9689, 9692, 9696, 9699, 9706, 9707, 9709, 9712, 9713, 9715, 9721, 9730, 9731, 9743, 9745, 9751, 9760, 9761, 9766, 9769, 9771, 9784, 9785, 9787, 9788, 9789, 9790, 9794, 9795, 9805, 9809, 9812, 9814, 9816, 9820, 9824, 9829, 9836, 9837, 9842, 9843, 9847, 9850, 9853, 9854, 9856, 9860, 9861, 9880, 9882, 9884, 9894, 9896, 9899, 9905, 9911, 9913, 9916, 9918, 9920, 9923, 9924, 9925, 9931, 9932, 9933, 9934, 9939, 9940, 9946, 9947, 9952, 9959, 9961, 9967, 9968, 9969, 9972, 9976, 9979, 9982, 9985, 9991, 9996], "external_url": "https://colorpunx.io/colors?i=218&name=#dbb180", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954411718300663809"}, "#ae8b61": {"id": 219, "name": "#ae8b61", "description": "#ae8b61 is one of 222 colors in the cryptopunx color pallette. It is used by 3031 unique punks", "hash": "0dbd88feb6861177fb1083edda73113d", "image": "https://gateway.pinata.cloud/ipfs/QmTWcy6x6LEpvNmqx1Ys3huWXFUGAqfWG9PuBvRCPeHFCh?filename=colorpunx219.png", "punks": [0, 4, 5, 6, 7, 9, 11, 16, 18, 26, 29, 36, 43, 45, 46, 50, 51, 58, 64, 65, 69, 70, 73, 78, 90, 95, 97, 99, 100, 101, 102, 107, 112, 119, 120, 123, 124, 127, 131, 134, 139, 148, 150, 151, 153, 157, 160, 162, 164, 165, 167, 169, 171, 172, 175, 178, 192, 198, 201, 204, 205, 208, 210, 213, 215, 216, 217, 225, 226, 227, 228, 231, 238, 240, 250, 258, 270, 271, 272, 275, 279, 289, 290, 291, 295, 296, 297, 302, 304, 307, 309, 315, 317, 321, 322, 329, 330, 335, 336, 337, 340, 345, 346, 347, 350, 352, 360, 361, 362, 366, 368, 371, 383, 384, 385, 386, 387, 388, 392, 396, 397, 400, 405, 419, 421, 429, 432, 433, 435, 436, 438, 439, 446, 447, 449, 450, 453, 456, 463, 466, 476, 477, 480, 485, 486, 488, 496, 500, 501, 505, 506, 507, 508, 510, 511, 516, 517, 518, 523, 525, 529, 530, 535, 538, 542, 543, 544, 546, 547, 550, 551, 552, 559, 560, 561, 562, 565, 566, 569, 573, 577, 578, 581, 589, 593, 596, 599, 604, 605, 607, 610, 611, 615, 619, 620, 621, 623, 625, 626, 629, 630, 631, 632, 633, 636, 637, 638, 642, 643, 649, 653, 657, 665, 667, 668, 669, 673, 679, 681, 682, 684, 685, 686, 691, 692, 695, 704, 705, 706, 707, 710, 714, 716, 718, 719, 723, 726, 734, 735, 736, 738, 739, 740, 745, 746, 747, 751, 752, 763, 764, 765, 766, 769, 771, 774, 775, 777, 785, 787, 793, 794, 795, 797, 806, 812, 814, 818, 820, 821, 834, 836, 841, 842, 849, 851, 858, 865, 871, 872, 875, 878, 879, 880, 883, 886, 888, 890, 892, 904, 908, 909, 915, 917, 918, 928, 929, 930, 938, 939, 940, 950, 952, 953, 960, 968, 970, 972, 976, 980, 981, 983, 984, 985, 989, 990, 991, 995, 1001, 1012, 1016, 1022, 1025, 1026, 1030, 1031, 1034, 1037, 1043, 1046, 1048, 1050, 1057, 1059, 1062, 1068, 1070, 1073, 1076, 1078, 1083, 1084, 1093, 1103, 1110, 1114, 1115, 1117, 1121, 1122, 1123, 1124, 1126, 1139, 1141, 1142, 1144, 1147, 1148, 1151, 1156, 1157, 1159, 1161, 1164, 1165, 1168, 1170, 1178, 1179, 1180, 1186, 1188, 1193, 1199, 1204, 1205, 1206, 1214, 1224, 1228, 1232, 1239, 1242, 1244, 1245, 1249, 1250, 1252, 1258, 1259, 1262, 1266, 1272, 1274, 1286, 1288, 1291, 1292, 1293, 1300, 1303, 1305, 1308, 1311, 1314, 1320, 1324, 1329, 1331, 1333, 1342, 1350, 1351, 1354, 1357, 1362, 1368, 1369, 1375, 1380, 1390, 1394, 1396, 1398, 1399, 1405, 1409, 1410, 1420, 1424, 1425, 1433, 1435, 1438, 1439, 1440, 1443, 1444, 1445, 1450, 1452, 1453, 1455, 1456, 1465, 1466, 1467, 1474, 1475, 1477, 1486, 1487, 1490, 1491, 1494, 1496, 1497, 1501, 1504, 1509, 1515, 1517, 1523, 1531, 1533, 1534, 1536, 1539, 1540, 1549, 1550, 1552, 1554, 1555, 1557, 1562, 1563, 1566, 1567, 1571, 1575, 1576, 1578, 1582, 1583, 1589, 1590, 1593, 1601, 1604, 1607, 1608, 1616, 1619, 1620, 1624, 1626, 1627, 1628, 1632, 1640, 1648, 1651, 1653, 1654, 1657, 1667, 1669, 1672, 1676, 1677, 1678, 1688, 1694, 1696, 1698, 1699, 1700, 1706, 1709, 1710, 1713, 1720, 1721, 1725, 1727, 1734, 1737, 1741, 1745, 1747, 1755, 1758, 1759, 1760, 1762, 1767, 1774, 1775, 1778, 1780, 1788, 1793, 1795, 1798, 1800, 1805, 1808, 1809, 1810, 1812, 1821, 1823, 1831, 1834, 1837, 1842, 1849, 1851, 1852, 1853, 1859, 1861, 1863, 1864, 1872, 1874, 1876, 1879, 1882, 1888, 1889, 1891, 1893, 1894, 1896, 1897, 1899, 1900, 1903, 1904, 1909, 1910, 1914, 1916, 1917, 1918, 1923, 1932, 1933, 1934, 1937, 1941, 1944, 1945, 1951, 1955, 1958, 1959, 1963, 1967, 1969, 1973, 1975, 1976, 1977, 1979, 1984, 1985, 1986, 1987, 1989, 1990, 1994, 1996, 1997, 2001, 2004, 2010, 2016, 2021, 2023, 2028, 2030, 2031, 2037, 2042, 2045, 2048, 2058, 2059, 2061, 2065, 2069, 2071, 2072, 2074, 2075, 2078, 2081, 2082, 2083, 2084, 2092, 2093, 2098, 2104, 2105, 2108, 2110, 2112, 2113, 2120, 2127, 2130, 2136, 2137, 2138, 2146, 2152, 2161, 2164, 2174, 2178, 2183, 2186, 2189, 2193, 2195, 2198, 2201, 2205, 2206, 2207, 2212, 2217, 2223, 2230, 2231, 2232, 2233, 2235, 2241, 2246, 2248, 2259, 2261, 2266, 2269, 2272, 2276, 2280, 2283, 2284, 2286, 2289, 2291, 2300, 2301, 2302, 2303, 2309, 2310, 2313, 2317, 2319, 2320, 2323, 2332, 2334, 2344, 2345, 2347, 2348, 2350, 2352, 2353, 2356, 2359, 2363, 2366, 2368, 2370, 2371, 2372, 2376, 2377, 2385, 2391, 2392, 2401, 2407, 2408, 2410, 2412, 2415, 2419, 2425, 2429, 2430, 2433, 2436, 2441, 2442, 2457, 2461, 2464, 2465, 2466, 2467, 2469, 2472, 2481, 2483, 2488, 2492, 2496, 2497, 2501, 2502, 2504, 2509, 2512, 2515, 2517, 2521, 2524, 2526, 2528, 2529, 2533, 2541, 2548, 2550, 2553, 2559, 2562, 2564, 2569, 2570, 2571, 2575, 2580, 2583, 2587, 2589, 2593, 2596, 2598, 2601, 2603, 2605, 2607, 2616, 2627, 2629, 2630, 2639, 2643, 2646, 2647, 2652, 2655, 2659, 2661, 2671, 2674, 2679, 2682, 2683, 2686, 2692, 2695, 2698, 2702, 2703, 2707, 2709, 2715, 2717, 2719, 2720, 2721, 2724, 2725, 2729, 2731, 2732, 2735, 2737, 2746, 2748, 2749, 2754, 2755, 2762, 2764, 2767, 2769, 2775, 2776, 2779, 2780, 2781, 2783, 2785, 2786, 2787, 2788, 2793, 2795, 2804, 2809, 2811, 2822, 2840, 2842, 2844, 2846, 2849, 2853, 2854, 2855, 2856, 2857, 2859, 2860, 2864, 2867, 2870, 2873, 2875, 2876, 2879, 2884, 2885, 2887, 2892, 2894, 2895, 2910, 2911, 2913, 2917, 2921, 2926, 2927, 2929, 2930, 2932, 2941, 2952, 2953, 2960, 2961, 2962, 2963, 2965, 2969, 2972, 2978, 2979, 2981, 2984, 2991, 2998, 2999, 3000, 3004, 3005, 3006, 3007, 3010, 3013, 3015, 3020, 3021, 3023, 3030, 3031, 3033, 3035, 3040, 3041, 3044, 3050, 3054, 3061, 3066, 3068, 3072, 3074, 3085, 3086, 3090, 3095, 3096, 3097, 3102, 3109, 3112, 3115, 3118, 3120, 3124, 3130, 3134, 3137, 3141, 3146, 3149, 3154, 3155, 3156, 3159, 3161, 3162, 3171, 3174, 3176, 3187, 3191, 3193, 3194, 3197, 3198, 3200, 3207, 3208, 3210, 3212, 3216, 3221, 3224, 3226, 3227, 3232, 3233, 3236, 3239, 3240, 3241, 3242, 3248, 3252, 3253, 3258, 3262, 3263, 3264, 3265, 3266, 3270, 3275, 3276, 3278, 3279, 3280, 3288, 3292, 3293, 3294, 3296, 3297, 3300, 3301, 3303, 3304, 3305, 3306, 3313, 3314, 3318, 3319, 3320, 3322, 3325, 3334, 3336, 3338, 3340, 3342, 3343, 3344, 3346, 3347, 3350, 3357, 3358, 3361, 3363, 3364, 3369, 3372, 3374, 3375, 3377, 3378, 3379, 3388, 3397, 3399, 3403, 3406, 3408, 3411, 3413, 3418, 3419, 3423, 3426, 3427, 3429, 3447, 3451, 3456, 3459, 3460, 3465, 3474, 3475, 3481, 3484, 3486, 3487, 3488, 3490, 3492, 3495, 3496, 3497, 3504, 3510, 3512, 3513, 3517, 3521, 3523, 3526, 3531, 3532, 3534, 3537, 3538, 3540, 3541, 3542, 3547, 3550, 3553, 3555, 3556, 3557, 3560, 3564, 3565, 3567, 3572, 3576, 3577, 3578, 3581, 3584, 3585, 3587, 3594, 3595, 3597, 3598, 3602, 3604, 3606, 3610, 3612, 3614, 3615, 3618, 3622, 3624, 3625, 3626, 3634, 3635, 3637, 3638, 3641, 3651, 3653, 3655, 3656, 3657, 3660, 3664, 3665, 3670, 3672, 3683, 3684, 3686, 3692, 3698, 3701, 3704, 3706, 3712, 3714, 3715, 3719, 3720, 3726, 3727, 3731, 3733, 3737, 3738, 3745, 3747, 3751, 3754, 3758, 3760, 3764, 3769, 3773, 3776, 3785, 3791, 3792, 3796, 3799, 3804, 3806, 3808, 3816, 3817, 3821, 3822, 3824, 3830, 3834, 3838, 3841, 3847, 3849, 3859, 3861, 3866, 3867, 3871, 3872, 3875, 3879, 3880, 3886, 3888, 3891, 3893, 3894, 3897, 3902, 3903, 3905, 3908, 3909, 3917, 3919, 3924, 3928, 3946, 3951, 3952, 3955, 3956, 3957, 3958, 3961, 3966, 3968, 3969, 3970, 3973, 3975, 3983, 3987, 3991, 4000, 4005, 4006, 4010, 4018, 4026, 4027, 4030, 4031, 4035, 4036, 4038, 4041, 4042, 4044, 4045, 4046, 4047, 4051, 4052, 4057, 4060, 4061, 4065, 4066, 4073, 4080, 4082, 4083, 4086, 4088, 4095, 4097, 4099, 4102, 4106, 4113, 4117, 4120, 4121, 4122, 4123, 4125, 4126, 4132, 4134, 4139, 4141, 4143, 4145, 4147, 4150, 4151, 4155, 4165, 4167, 4172, 4174, 4176, 4177, 4182, 4190, 4194, 4197, 4204, 4205, 4206, 4208, 4213, 4215, 4216, 4217, 4218, 4219, 4221, 4223, 4225, 4227, 4228, 4239, 4243, 4247, 4249, 4260, 4261, 4267, 4274, 4278, 4281, 4286, 4288, 4289, 4299, 4303, 4305, 4307, 4309, 4312, 4320, 4324, 4326, 4331, 4335, 4337, 4343, 4344, 4346, 4347, 4351, 4355, 4356, 4357, 4358, 4359, 4361, 4362, 4365, 4366, 4368, 4370, 4375, 4377, 4379, 4381, 4386, 4389, 4397, 4404, 4410, 4413, 4416, 4418, 4419, 4420, 4421, 4423, 4425, 4427, 4428, 4431, 4433, 4434, 4435, 4436, 4440, 4442, 4446, 4447, 4450, 4451, 4456, 4460, 4465, 4466, 4468, 4470, 4480, 4481, 4482, 4483, 4485, 4489, 4492, 4496, 4503, 4504, 4505, 4507, 4508, 4510, 4512, 4517, 4523, 4528, 4536, 4548, 4551, 4553, 4561, 4567, 4570, 4572, 4576, 4578, 4581, 4588, 4598, 4599, 4602, 4604, 4605, 4609, 4614, 4616, 4621, 4624, 4628, 4630, 4635, 4638, 4640, 4642, 4643, 4645, 4647, 4648, 4654, 4655, 4656, 4658, 4662, 4665, 4667, 4669, 4672, 4675, 4680, 4683, 4687, 4689, 4690, 4693, 4694, 4697, 4698, 4700, 4701, 4703, 4710, 4714, 4719, 4722, 4723, 4724, 4727, 4729, 4731, 4734, 4735, 4736, 4740, 4746, 4749, 4753, 4756, 4758, 4759, 4760, 4762, 4764, 4769, 4770, 4774, 4777, 4778, 4779, 4781, 4783, 4784, 4786, 4789, 4792, 4796, 4799, 4800, 4806, 4808, 4810, 4813, 4816, 4818, 4822, 4824, 4826, 4832, 4833, 4835, 4838, 4839, 4842, 4843, 4845, 4849, 4851, 4852, 4855, 4857, 4858, 4863, 4864, 4865, 4871, 4878, 4880, 4883, 4884, 4890, 4891, 4894, 4895, 4898, 4901, 4905, 4906, 4907, 4918, 4920, 4921, 4923, 4925, 4929, 4933, 4940, 4948, 4954, 4963, 4969, 4974, 4976, 4977, 4981, 4984, 4988, 4991, 4994, 4996, 4997, 5003, 5006, 5008, 5012, 5014, 5024, 5026, 5032, 5035, 5038, 5039, 5044, 5046, 5051, 5055, 5062, 5064, 5065, 5069, 5073, 5075, 5077, 5078, 5079, 5082, 5087, 5089, 5094, 5096, 5097, 5105, 5106, 5108, 5109, 5116, 5127, 5128, 5129, 5133, 5135, 5138, 5143, 5146, 5147, 5148, 5149, 5151, 5154, 5155, 5160, 5162, 5164, 5173, 5175, 5177, 5179, 5186, 5187, 5188, 5189, 5193, 5199, 5200, 5203, 5209, 5212, 5216, 5219, 5220, 5221, 5223, 5232, 5233, 5243, 5245, 5247, 5248, 5260, 5266, 5268, 5269, 5274, 5277, 5281, 5286, 5287, 5295, 5300, 5301, 5309, 5329, 5330, 5332, 5333, 5334, 5335, 5343, 5345, 5346, 5350, 5356, 5358, 5359, 5360, 5361, 5365, 5366, 5377, 5379, 5389, 5393, 5395, 5400, 5401, 5403, 5405, 5413, 5415, 5417, 5419, 5421, 5426, 5432, 5435, 5437, 5438, 5442, 5444, 5447, 5448, 5449, 5450, 5451, 5467, 5478, 5479, 5480, 5481, 5482, 5485, 5487, 5492, 5494, 5500, 5501, 5505, 5508, 5510, 5513, 5517, 5522, 5526, 5528, 5529, 5530, 5536, 5537, 5539, 5540, 5543, 5546, 5548, 5552, 5557, 5558, 5561, 5564, 5567, 5569, 5570, 5571, 5575, 5583, 5586, 5592, 5597, 5598, 5599, 5602, 5603, 5604, 5605, 5607, 5611, 5612, 5617, 5618, 5620, 5621, 5634, 5636, 5640, 5641, 5646, 5647, 5650, 5652, 5654, 5655, 5657, 5658, 5661, 5662, 5664, 5667, 5668, 5672, 5673, 5674, 5678, 5681, 5685, 5690, 5691, 5692, 5693, 5699, 5707, 5715, 5716, 5717, 5718, 5719, 5722, 5728, 5731, 5735, 5744, 5750, 5753, 5755, 5756, 5758, 5762, 5764, 5770, 5773, 5774, 5776, 5777, 5778, 5779, 5780, 5782, 5784, 5787, 5790, 5792, 5793, 5794, 5801, 5808, 5815, 5818, 5820, 5821, 5826, 5828, 5843, 5845, 5846, 5848, 5856, 5860, 5864, 5865, 5869, 5872, 5877, 5878, 5887, 5889, 5893, 5895, 5898, 5900, 5902, 5904, 5906, 5915, 5916, 5923, 5924, 5927, 5936, 5938, 5942, 5946, 5947, 5953, 5954, 5956, 5964, 5966, 5968, 5975, 5980, 5983, 5987, 6005, 6007, 6013, 6015, 6018, 6020, 6023, 6029, 6030, 6031, 6032, 6033, 6036, 6039, 6041, 6044, 6046, 6054, 6062, 6067, 6068, 6069, 6078, 6082, 6091, 6093, 6094, 6098, 6106, 6108, 6109, 6112, 6116, 6118, 6120, 6123, 6127, 6129, 6132, 6133, 6135, 6137, 6150, 6153, 6156, 6158, 6166, 6169, 6171, 6174, 6175, 6176, 6178, 6179, 6182, 6186, 6188, 6195, 6201, 6208, 6210, 6214, 6226, 6227, 6228, 6231, 6232, 6238, 6241, 6242, 6244, 6245, 6252, 6254, 6255, 6256, 6258, 6263, 6265, 6270, 6271, 6272, 6277, 6278, 6281, 6283, 6284, 6285, 6286, 6288, 6292, 6300, 6301, 6302, 6317, 6320, 6328, 6330, 6336, 6340, 6342, 6343, 6344, 6347, 6350, 6353, 6354, 6358, 6360, 6364, 6372, 6377, 6380, 6386, 6393, 6394, 6401, 6402, 6403, 6405, 6407, 6413, 6416, 6422, 6424, 6425, 6434, 6436, 6437, 6438, 6439, 6453, 6456, 6457, 6458, 6460, 6461, 6471, 6475, 6477, 6479, 6484, 6488, 6489, 6493, 6495, 6498, 6512, 6518, 6519, 6524, 6526, 6527, 6530, 6534, 6536, 6537, 6541, 6542, 6543, 6545, 6547, 6550, 6552, 6557, 6563, 6566, 6567, 6568, 6569, 6570, 6571, 6572, 6577, 6578, 6579, 6583, 6584, 6590, 6593, 6596, 6600, 6602, 6611, 6621, 6622, 6636, 6640, 6644, 6645, 6647, 6648, 6652, 6654, 6657, 6662, 6667, 6671, 6682, 6684, 6690, 6691, 6692, 6697, 6698, 6700, 6701, 6703, 6705, 6706, 6708, 6711, 6712, 6714, 6720, 6721, 6729, 6735, 6739, 6745, 6746, 6747, 6748, 6756, 6759, 6761, 6764, 6766, 6772, 6775, 6776, 6780, 6782, 6787, 6790, 6792, 6793, 6803, 6807, 6810, 6814, 6816, 6817, 6820, 6821, 6822, 6825, 6826, 6827, 6828, 6830, 6833, 6838, 6847, 6850, 6856, 6864, 6869, 6870, 6883, 6885, 6886, 6889, 6891, 6892, 6893, 6897, 6901, 6908, 6909, 6911, 6916, 6917, 6918, 6919, 6920, 6924, 6925, 6927, 6933, 6934, 6935, 6939, 6941, 6942, 6946, 6948, 6954, 6959, 6961, 6968, 6969, 6970, 6975, 6976, 6977, 6978, 6979, 6983, 6987, 6990, 6994, 7001, 7013, 7018, 7022, 7025, 7026, 7028, 7032, 7035, 7036, 7037, 7040, 7042, 7052, 7055, 7063, 7066, 7067, 7069, 7072, 7075, 7076, 7079, 7084, 7087, 7089, 7090, 7091, 7092, 7097, 7099, 7116, 7120, 7132, 7136, 7138, 7139, 7141, 7142, 7144, 7156, 7157, 7158, 7161, 7163, 7164, 7168, 7174, 7176, 7177, 7178, 7180, 7181, 7182, 7183, 7186, 7187, 7193, 7194, 7200, 7201, 7202, 7203, 7210, 7211, 7219, 7222, 7224, 7226, 7229, 7246, 7254, 7256, 7257, 7261, 7265, 7267, 7275, 7277, 7278, 7285, 7289, 7291, 7294, 7298, 7301, 7303, 7305, 7308, 7309, 7311, 7312, 7322, 7332, 7335, 7343, 7344, 7352, 7353, 7355, 7356, 7359, 7360, 7363, 7364, 7365, 7366, 7368, 7372, 7384, 7388, 7390, 7395, 7400, 7405, 7418, 7422, 7427, 7430, 7431, 7432, 7435, 7438, 7442, 7447, 7448, 7449, 7450, 7457, 7459, 7461, 7462, 7463, 7465, 7466, 7467, 7469, 7470, 7471, 7472, 7473, 7476, 7490, 7493, 7500, 7503, 7507, 7508, 7511, 7513, 7518, 7519, 7530, 7534, 7536, 7539, 7541, 7542, 7543, 7548, 7551, 7555, 7556, 7559, 7561, 7562, 7563, 7566, 7568, 7573, 7579, 7584, 7586, 7592, 7598, 7602, 7603, 7605, 7607, 7609, 7610, 7611, 7612, 7614, 7616, 7621, 7623, 7627, 7629, 7634, 7636, 7641, 7642, 7644, 7649, 7654, 7669, 7685, 7689, 7694, 7695, 7699, 7700, 7701, 7704, 7705, 7715, 7727, 7728, 7738, 7739, 7740, 7742, 7753, 7759, 7761, 7762, 7765, 7769, 7775, 7781, 7784, 7785, 7790, 7792, 7795, 7798, 7800, 7802, 7803, 7806, 7807, 7811, 7812, 7816, 7817, 7818, 7822, 7823, 7836, 7847, 7849, 7851, 7852, 7855, 7858, 7860, 7861, 7862, 7866, 7878, 7880, 7881, 7895, 7899, 7901, 7904, 7906, 7910, 7911, 7913, 7916, 7920, 7921, 7924, 7926, 7928, 7930, 7932, 7933, 7934, 7940, 7943, 7948, 7950, 7951, 7952, 7953, 7954, 7958, 7960, 7961, 7964, 7971, 7981, 7990, 7992, 7993, 7998, 8001, 8003, 8006, 8011, 8012, 8013, 8014, 8018, 8020, 8021, 8023, 8024, 8026, 8028, 8031, 8032, 8033, 8034, 8036, 8037, 8041, 8045, 8048, 8052, 8054, 8056, 8070, 8072, 8075, 8076, 8077, 8091, 8093, 8097, 8098, 8100, 8106, 8107, 8108, 8111, 8112, 8114, 8116, 8119, 8123, 8125, 8128, 8131, 8135, 8136, 8143, 8144, 8146, 8148, 8149, 8151, 8153, 8155, 8161, 8163, 8167, 8174, 8177, 8181, 8182, 8187, 8188, 8189, 8190, 8193, 8204, 8205, 8208, 8211, 8212, 8221, 8222, 8224, 8225, 8226, 8228, 8230, 8233, 8239, 8248, 8249, 8252, 8253, 8254, 8255, 8258, 8259, 8265, 8266, 8271, 8273, 8278, 8282, 8289, 8301, 8305, 8311, 8314, 8318, 8321, 8324, 8327, 8329, 8332, 8333, 8335, 8339, 8340, 8345, 8348, 8353, 8356, 8358, 8359, 8367, 8371, 8378, 8381, 8383, 8384, 8388, 8391, 8393, 8395, 8397, 8399, 8404, 8406, 8408, 8420, 8424, 8432, 8437, 8442, 8445, 8446, 8461, 8475, 8476, 8477, 8480, 8485, 8488, 8492, 8494, 8503, 8506, 8509, 8514, 8521, 8541, 8542, 8543, 8548, 8552, 8556, 8558, 8561, 8563, 8566, 8567, 8569, 8581, 8585, 8587, 8591, 8594, 8599, 8602, 8606, 8610, 8611, 8614, 8616, 8619, 8622, 8627, 8628, 8635, 8636, 8638, 8639, 8653, 8660, 8662, 8666, 8668, 8670, 8673, 8675, 8682, 8684, 8695, 8702, 8709, 8711, 8712, 8715, 8719, 8723, 8734, 8740, 8741, 8742, 8743, 8744, 8745, 8747, 8753, 8755, 8758, 8765, 8770, 8782, 8784, 8787, 8789, 8792, 8793, 8794, 8795, 8803, 8805, 8811, 8819, 8820, 8821, 8823, 8826, 8828, 8829, 8831, 8836, 8837, 8838, 8840, 8843, 8845, 8846, 8860, 8862, 8864, 8866, 8875, 8877, 8881, 8884, 8885, 8893, 8895, 8896, 8897, 8899, 8901, 8902, 8903, 8905, 8906, 8907, 8913, 8921, 8925, 8928, 8929, 8931, 8936, 8942, 8943, 8945, 8952, 8954, 8960, 8963, 8964, 8965, 8966, 8969, 8972, 8973, 8975, 8976, 8977, 8989, 8990, 9002, 9005, 9007, 9008, 9010, 9018, 9020, 9024, 9026, 9027, 9032, 9034, 9036, 9039, 9040, 9043, 9051, 9052, 9062, 9065, 9080, 9082, 9084, 9085, 9094, 9101, 9103, 9106, 9110, 9111, 9115, 9118, 9122, 9125, 9126, 9128, 9139, 9148, 9149, 9153, 9159, 9160, 9163, 9166, 9169, 9170, 9171, 9176, 9177, 9178, 9179, 9180, 9181, 9182, 9197, 9205, 9216, 9220, 9221, 9224, 9229, 9234, 9237, 9238, 9239, 9245, 9249, 9250, 9251, 9258, 9259, 9261, 9264, 9271, 9275, 9277, 9279, 9282, 9284, 9286, 9288, 9290, 9292, 9300, 9302, 9303, 9307, 9309, 9313, 9315, 9317, 9319, 9321, 9334, 9337, 9339, 9347, 9361, 9366, 9367, 9370, 9378, 9382, 9384, 9387, 9390, 9393, 9395, 9402, 9405, 9406, 9407, 9412, 9413, 9417, 9422, 9423, 9425, 9428, 9429, 9434, 9435, 9436, 9444, 9445, 9446, 9449, 9456, 9458, 9460, 9462, 9469, 9472, 9473, 9476, 9477, 9489, 9493, 9498, 9500, 9501, 9502, 9505, 9510, 9511, 9525, 9526, 9527, 9530, 9531, 9535, 9536, 9545, 9548, 9550, 9553, 9554, 9557, 9558, 9559, 9560, 9563, 9567, 9569, 9570, 9573, 9574, 9577, 9579, 9581, 9582, 9583, 9586, 9589, 9590, 9592, 9593, 9595, 9600, 9605, 9610, 9615, 9620, 9624, 9625, 9626, 9638, 9642, 9647, 9650, 9653, 9654, 9655, 9658, 9660, 9661, 9674, 9675, 9676, 9679, 9681, 9687, 9693, 9694, 9698, 9701, 9704, 9708, 9711, 9716, 9722, 9725, 9726, 9728, 9732, 9733, 9736, 9738, 9742, 9744, 9746, 9747, 9749, 9757, 9758, 9763, 9770, 9772, 9774, 9777, 9782, 9796, 9797, 9798, 9800, 9802, 9803, 9810, 9811, 9815, 9817, 9825, 9826, 9834, 9839, 9844, 9845, 9851, 9852, 9857, 9859, 9864, 9868, 9871, 9874, 9875, 9879, 9881, 9883, 9885, 9890, 9892, 9900, 9901, 9902, 9904, 9906, 9908, 9912, 9914, 9915, 9917, 9926, 9927, 9929, 9935, 9936, 9937, 9938, 9944, 9945, 9949, 9950, 9951, 9956, 9957, 9958, 9960, 9964, 9966, 9971, 9973, 9974, 9975, 9980, 9983, 9987, 9988, 9992, 9998], "external_url": "https://colorpunx.io/colors?i=219&name=#ae8b61", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954412817812291585"}, "#a66e2c": {"id": 220, "name": "#a66e2c", "description": "#a66e2c is one of 222 colors in the cryptopunx color pallette. It is used by 3238 unique punks", "hash": "e96852f7656b6b4383177ff2149abf93", "image": "https://gateway.pinata.cloud/ipfs/QmeE6mCokuFKPWKuZ4Q9wdyJ7BpVvA7zodtgZnM4hzX3Hr?filename=colorpunx220.png", "punks": [1, 2, 4, 9, 10, 17, 18, 20, 23, 24, 27, 33, 34, 35, 40, 41, 44, 48, 51, 55, 57, 59, 60, 61, 72, 75, 76, 77, 78, 79, 87, 88, 91, 93, 95, 96, 98, 105, 106, 108, 109, 111, 112, 113, 118, 121, 122, 128, 130, 133, 135, 141, 142, 145, 146, 158, 159, 181, 183, 185, 187, 189, 191, 202, 203, 206, 207, 211, 214, 215, 217, 218, 221, 223, 229, 235, 236, 237, 239, 241, 243, 249, 254, 255, 257, 258, 259, 263, 268, 274, 276, 277, 281, 283, 285, 286, 287, 292, 293, 297, 298, 299, 300, 306, 307, 311, 312, 313, 317, 319, 334, 336, 340, 341, 343, 351, 356, 358, 365, 366, 369, 377, 379, 380, 381, 382, 389, 390, 394, 395, 401, 404, 407, 409, 414, 421, 424, 433, 435, 437, 442, 448, 454, 457, 467, 469, 476, 480, 482, 483, 485, 490, 494, 497, 498, 499, 502, 503, 505, 513, 515, 516, 517, 518, 519, 520, 524, 528, 533, 536, 540, 542, 552, 555, 564, 570, 571, 574, 575, 587, 589, 591, 594, 600, 602, 609, 613, 617, 619, 621, 622, 623, 630, 636, 638, 640, 641, 643, 645, 648, 650, 651, 655, 656, 658, 661, 662, 666, 672, 679, 685, 686, 687, 694, 701, 702, 711, 712, 715, 725, 728, 730, 732, 734, 740, 742, 743, 750, 763, 765, 767, 768, 772, 777, 783, 786, 789, 799, 805, 806, 807, 808, 810, 811, 813, 815, 817, 823, 825, 828, 829, 830, 837, 838, 841, 843, 847, 852, 859, 860, 868, 870, 873, 877, 878, 879, 882, 884, 887, 895, 896, 897, 900, 906, 910, 916, 917, 919, 920, 925, 926, 928, 934, 936, 940, 944, 946, 957, 958, 962, 966, 969, 970, 973, 975, 977, 981, 988, 995, 998, 999, 1009, 1016, 1017, 1018, 1019, 1027, 1030, 1033, 1041, 1044, 1047, 1049, 1051, 1053, 1054, 1056, 1058, 1060, 1064, 1065, 1067, 1068, 1069, 1072, 1074, 1075, 1077, 1089, 1094, 1095, 1096, 1101, 1105, 1111, 1114, 1120, 1124, 1126, 1127, 1128, 1129, 1131, 1133, 1134, 1135, 1136, 1137, 1141, 1144, 1146, 1149, 1150, 1152, 1153, 1154, 1155, 1162, 1166, 1168, 1169, 1170, 1171, 1173, 1175, 1176, 1177, 1180, 1181, 1182, 1183, 1185, 1188, 1190, 1191, 1192, 1194, 1195, 1201, 1202, 1203, 1207, 1213, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1223, 1228, 1229, 1231, 1233, 1235, 1236, 1237, 1241, 1248, 1255, 1262, 1263, 1268, 1269, 1273, 1275, 1283, 1290, 1292, 1294, 1298, 1300, 1301, 1303, 1304, 1309, 1313, 1315, 1316, 1327, 1330, 1331, 1334, 1335, 1336, 1337, 1344, 1347, 1349, 1356, 1358, 1360, 1361, 1363, 1365, 1370, 1377, 1378, 1381, 1384, 1385, 1386, 1387, 1393, 1395, 1400, 1401, 1404, 1405, 1406, 1407, 1408, 1410, 1412, 1416, 1424, 1425, 1427, 1430, 1431, 1435, 1436, 1437, 1439, 1454, 1462, 1464, 1468, 1469, 1470, 1472, 1473, 1475, 1480, 1481, 1482, 1484, 1486, 1489, 1492, 1495, 1499, 1500, 1502, 1509, 1511, 1513, 1516, 1521, 1522, 1525, 1534, 1536, 1538, 1541, 1546, 1551, 1553, 1557, 1559, 1565, 1567, 1569, 1570, 1572, 1575, 1577, 1581, 1584, 1589, 1594, 1597, 1600, 1602, 1607, 1609, 1614, 1615, 1624, 1629, 1632, 1635, 1638, 1639, 1641, 1642, 1644, 1646, 1650, 1651, 1653, 1654, 1660, 1668, 1680, 1682, 1695, 1701, 1702, 1703, 1705, 1709, 1717, 1720, 1724, 1726, 1735, 1736, 1737, 1747, 1748, 1752, 1753, 1754, 1756, 1758, 1763, 1773, 1777, 1778, 1781, 1782, 1783, 1785, 1788, 1797, 1801, 1802, 1804, 1806, 1808, 1811, 1812, 1814, 1815, 1819, 1820, 1823, 1824, 1825, 1828, 1831, 1833, 1840, 1847, 1850, 1851, 1857, 1862, 1865, 1866, 1867, 1871, 1874, 1875, 1879, 1881, 1882, 1883, 1884, 1897, 1909, 1913, 1915, 1919, 1920, 1923, 1926, 1927, 1932, 1934, 1936, 1938, 1939, 1942, 1947, 1950, 1954, 1955, 1960, 1964, 1965, 1968, 1970, 1972, 1977, 1978, 1991, 1995, 1999, 2004, 2006, 2007, 2009, 2011, 2024, 2032, 2036, 2038, 2044, 2045, 2049, 2051, 2053, 2057, 2058, 2060, 2061, 2070, 2079, 2086, 2088, 2092, 2096, 2099, 2100, 2102, 2103, 2109, 2111, 2113, 2115, 2121, 2122, 2123, 2125, 2128, 2130, 2131, 2135, 2136, 2139, 2141, 2143, 2144, 2145, 2148, 2150, 2151, 2154, 2155, 2156, 2157, 2161, 2167, 2175, 2180, 2184, 2191, 2196, 2200, 2211, 2212, 2215, 2216, 2218, 2219, 2224, 2225, 2228, 2233, 2235, 2238, 2239, 2242, 2245, 2247, 2250, 2253, 2255, 2257, 2258, 2260, 2267, 2271, 2277, 2278, 2280, 2281, 2285, 2287, 2289, 2290, 2292, 2295, 2296, 2302, 2303, 2304, 2305, 2309, 2310, 2311, 2316, 2317, 2322, 2328, 2330, 2332, 2335, 2336, 2337, 2340, 2348, 2349, 2355, 2361, 2363, 2364, 2366, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2383, 2387, 2389, 2394, 2396, 2398, 2399, 2400, 2402, 2404, 2405, 2412, 2414, 2417, 2419, 2420, 2425, 2432, 2433, 2434, 2440, 2444, 2453, 2455, 2456, 2459, 2463, 2468, 2470, 2479, 2482, 2492, 2493, 2497, 2500, 2501, 2503, 2505, 2506, 2507, 2510, 2511, 2518, 2520, 2529, 2535, 2538, 2539, 2540, 2542, 2543, 2545, 2547, 2549, 2550, 2551, 2557, 2560, 2563, 2564, 2566, 2567, 2568, 2572, 2574, 2581, 2582, 2584, 2585, 2586, 2590, 2593, 2597, 2599, 2604, 2606, 2607, 2609, 2611, 2612, 2617, 2620, 2621, 2624, 2625, 2626, 2629, 2634, 2636, 2642, 2644, 2647, 2653, 2655, 2656, 2668, 2669, 2672, 2673, 2679, 2684, 2685, 2688, 2689, 2693, 2696, 2699, 2706, 2712, 2713, 2719, 2722, 2724, 2728, 2733, 2736, 2739, 2740, 2744, 2745, 2753, 2763, 2764, 2765, 2770, 2773, 2776, 2777, 2778, 2779, 2785, 2788, 2790, 2791, 2797, 2803, 2805, 2806, 2809, 2819, 2825, 2833, 2834, 2836, 2838, 2839, 2842, 2845, 2848, 2853, 2854, 2855, 2859, 2860, 2861, 2862, 2865, 2866, 2868, 2870, 2874, 2875, 2879, 2881, 2892, 2894, 2900, 2906, 2907, 2913, 2916, 2927, 2931, 2932, 2934, 2935, 2936, 2939, 2948, 2949, 2951, 2955, 2957, 2959, 2961, 2963, 2964, 2965, 2967, 2968, 2975, 2982, 2986, 2988, 2991, 2992, 2996, 3000, 3002, 3003, 3004, 3006, 3009, 3011, 3012, 3013, 3017, 3018, 3019, 3021, 3032, 3035, 3042, 3047, 3049, 3051, 3052, 3053, 3062, 3063, 3067, 3070, 3071, 3073, 3075, 3079, 3080, 3083, 3090, 3091, 3094, 3097, 3099, 3107, 3115, 3121, 3123, 3126, 3127, 3129, 3130, 3133, 3137, 3138, 3140, 3142, 3143, 3147, 3149, 3150, 3154, 3156, 3157, 3159, 3161, 3163, 3168, 3175, 3179, 3181, 3182, 3185, 3188, 3189, 3194, 3195, 3196, 3205, 3211, 3217, 3219, 3221, 3224, 3225, 3226, 3228, 3229, 3230, 3234, 3235, 3237, 3241, 3242, 3244, 3246, 3247, 3249, 3255, 3257, 3258, 3261, 3262, 3268, 3272, 3273, 3279, 3284, 3286, 3291, 3296, 3297, 3298, 3300, 3303, 3305, 3306, 3308, 3309, 3310, 3317, 3321, 3324, 3325, 3326, 3331, 3339, 3341, 3342, 3345, 3349, 3353, 3355, 3359, 3364, 3367, 3375, 3378, 3379, 3381, 3383, 3389, 3390, 3391, 3398, 3410, 3414, 3415, 3416, 3418, 3423, 3424, 3428, 3434, 3439, 3440, 3442, 3444, 3446, 3449, 3454, 3455, 3458, 3462, 3471, 3475, 3476, 3482, 3484, 3485, 3491, 3495, 3503, 3504, 3507, 3508, 3509, 3513, 3514, 3522, 3523, 3524, 3530, 3536, 3537, 3539, 3540, 3546, 3548, 3549, 3552, 3553, 3555, 3561, 3562, 3565, 3569, 3570, 3571, 3576, 3583, 3586, 3591, 3593, 3599, 3601, 3606, 3619, 3620, 3621, 3624, 3625, 3632, 3633, 3634, 3635, 3639, 3643, 3644, 3648, 3650, 3652, 3655, 3658, 3661, 3664, 3666, 3667, 3677, 3678, 3683, 3685, 3687, 3688, 3690, 3696, 3698, 3707, 3708, 3709, 3710, 3716, 3717, 3720, 3722, 3730, 3732, 3735, 3736, 3740, 3742, 3745, 3749, 3750, 3751, 3753, 3759, 3760, 3761, 3762, 3764, 3766, 3771, 3778, 3780, 3781, 3782, 3784, 3785, 3786, 3787, 3789, 3794, 3797, 3801, 3802, 3803, 3804, 3808, 3813, 3817, 3820, 3826, 3832, 3834, 3836, 3838, 3840, 3844, 3845, 3848, 3852, 3854, 3860, 3869, 3877, 3878, 3880, 3881, 3882, 3887, 3888, 3890, 3892, 3893, 3901, 3904, 3907, 3910, 3912, 3915, 3916, 3926, 3930, 3931, 3934, 3938, 3939, 3942, 3943, 3944, 3945, 3947, 3952, 3953, 3959, 3971, 3972, 3973, 3974, 3979, 3980, 3985, 3990, 3996, 4003, 4004, 4007, 4010, 4013, 4014, 4017, 4020, 4022, 4023, 4025, 4029, 4035, 4042, 4050, 4051, 4052, 4053, 4054, 4059, 4064, 4068, 4071, 4081, 4087, 4094, 4098, 4102, 4104, 4111, 4114, 4118, 4121, 4123, 4126, 4127, 4129, 4138, 4144, 4154, 4155, 4157, 4158, 4162, 4164, 4168, 4171, 4172, 4174, 4175, 4179, 4180, 4181, 4184, 4191, 4192, 4197, 4202, 4203, 4204, 4206, 4207, 4216, 4217, 4223, 4226, 4228, 4230, 4240, 4241, 4244, 4248, 4252, 4258, 4260, 4262, 4263, 4272, 4284, 4285, 4290, 4291, 4295, 4297, 4299, 4303, 4306, 4312, 4314, 4321, 4331, 4333, 4336, 4337, 4341, 4342, 4349, 4350, 4352, 4360, 4361, 4367, 4369, 4380, 4382, 4385, 4388, 4390, 4393, 4395, 4399, 4401, 4402, 4406, 4412, 4415, 4419, 4426, 4429, 4431, 4435, 4442, 4447, 4454, 4455, 4458, 4460, 4462, 4463, 4469, 4474, 4476, 4478, 4479, 4486, 4487, 4488, 4490, 4491, 4492, 4493, 4495, 4498, 4501, 4504, 4506, 4509, 4519, 4526, 4528, 4530, 4532, 4533, 4534, 4538, 4542, 4544, 4546, 4547, 4551, 4555, 4556, 4558, 4560, 4567, 4569, 4577, 4587, 4588, 4589, 4590, 4592, 4595, 4601, 4602, 4607, 4608, 4610, 4620, 4623, 4628, 4629, 4630, 4632, 4633, 4635, 4637, 4639, 4642, 4643, 4644, 4648, 4649, 4650, 4655, 4658, 4660, 4662, 4665, 4672, 4683, 4689, 4691, 4692, 4695, 4698, 4702, 4706, 4712, 4715, 4716, 4720, 4721, 4725, 4730, 4731, 4739, 4741, 4745, 4748, 4750, 4751, 4754, 4755, 4757, 4758, 4759, 4760, 4762, 4766, 4768, 4771, 4776, 4777, 4787, 4792, 4793, 4795, 4797, 4801, 4802, 4809, 4816, 4818, 4821, 4825, 4831, 4836, 4843, 4845, 4846, 4853, 4854, 4861, 4864, 4865, 4866, 4869, 4870, 4876, 4878, 4888, 4890, 4891, 4896, 4899, 4900, 4904, 4906, 4908, 4910, 4913, 4914, 4915, 4917, 4918, 4919, 4920, 4925, 4930, 4932, 4933, 4938, 4939, 4942, 4948, 4952, 4955, 4959, 4964, 4965, 4968, 4969, 4970, 4971, 4973, 4976, 4978, 4984, 4989, 4994, 4998, 4999, 5006, 5013, 5015, 5018, 5022, 5028, 5033, 5035, 5037, 5048, 5051, 5057, 5061, 5087, 5089, 5090, 5095, 5103, 5105, 5107, 5110, 5111, 5112, 5113, 5114, 5118, 5120, 5122, 5123, 5125, 5126, 5127, 5133, 5134, 5139, 5140, 5141, 5143, 5145, 5146, 5148, 5155, 5159, 5163, 5167, 5171, 5173, 5176, 5184, 5189, 5191, 5193, 5196, 5197, 5198, 5200, 5207, 5213, 5220, 5223, 5228, 5229, 5230, 5231, 5239, 5245, 5246, 5247, 5248, 5255, 5257, 5262, 5263, 5268, 5269, 5270, 5274, 5276, 5280, 5289, 5293, 5296, 5299, 5300, 5302, 5305, 5306, 5311, 5313, 5317, 5320, 5326, 5331, 5334, 5337, 5338, 5340, 5342, 5349, 5351, 5352, 5353, 5354, 5355, 5356, 5363, 5366, 5368, 5369, 5373, 5374, 5378, 5387, 5388, 5390, 5393, 5394, 5396, 5397, 5399, 5406, 5408, 5410, 5414, 5423, 5424, 5425, 5427, 5428, 5432, 5433, 5434, 5435, 5436, 5439, 5440, 5443, 5444, 5447, 5451, 5459, 5463, 5465, 5473, 5476, 5477, 5478, 5481, 5482, 5483, 5486, 5488, 5495, 5498, 5500, 5502, 5503, 5506, 5511, 5515, 5519, 5521, 5527, 5530, 5533, 5536, 5538, 5542, 5544, 5549, 5550, 5551, 5557, 5559, 5563, 5568, 5573, 5574, 5575, 5580, 5582, 5583, 5587, 5591, 5597, 5598, 5602, 5606, 5624, 5631, 5632, 5639, 5641, 5643, 5645, 5647, 5648, 5649, 5650, 5653, 5656, 5658, 5660, 5661, 5664, 5671, 5672, 5678, 5683, 5686, 5687, 5688, 5690, 5694, 5696, 5699, 5700, 5701, 5702, 5709, 5711, 5712, 5714, 5718, 5720, 5721, 5725, 5727, 5729, 5730, 5739, 5740, 5741, 5743, 5745, 5749, 5752, 5757, 5766, 5767, 5768, 5782, 5784, 5786, 5788, 5789, 5793, 5796, 5800, 5803, 5804, 5805, 5816, 5817, 5819, 5827, 5831, 5832, 5835, 5839, 5840, 5841, 5842, 5845, 5846, 5847, 5849, 5854, 5857, 5862, 5865, 5866, 5867, 5868, 5870, 5871, 5876, 5880, 5883, 5886, 5887, 5888, 5891, 5896, 5903, 5910, 5912, 5914, 5926, 5930, 5932, 5933, 5935, 5937, 5938, 5944, 5945, 5948, 5952, 5957, 5959, 5960, 5961, 5966, 5970, 5971, 5973, 5975, 5979, 5988, 5994, 5995, 5999, 6000, 6001, 6002, 6007, 6008, 6009, 6010, 6014, 6018, 6021, 6022, 6024, 6025, 6026, 6032, 6033, 6034, 6035, 6036, 6048, 6050, 6053, 6058, 6059, 6060, 6069, 6070, 6072, 6073, 6081, 6082, 6085, 6086, 6087, 6088, 6100, 6105, 6106, 6109, 6110, 6114, 6117, 6118, 6120, 6121, 6124, 6130, 6131, 6134, 6135, 6139, 6141, 6148, 6151, 6153, 6154, 6160, 6162, 6165, 6167, 6168, 6171, 6172, 6174, 6176, 6180, 6181, 6185, 6191, 6192, 6194, 6195, 6200, 6203, 6204, 6209, 6211, 6212, 6214, 6217, 6220, 6225, 6230, 6234, 6236, 6237, 6245, 6247, 6248, 6252, 6253, 6254, 6259, 6260, 6262, 6282, 6283, 6291, 6295, 6299, 6308, 6313, 6315, 6318, 6319, 6325, 6328, 6330, 6333, 6335, 6345, 6349, 6351, 6359, 6362, 6363, 6366, 6367, 6368, 6372, 6373, 6379, 6384, 6385, 6387, 6391, 6393, 6395, 6396, 6397, 6407, 6409, 6410, 6414, 6417, 6421, 6423, 6424, 6426, 6427, 6429, 6431, 6432, 6433, 6435, 6452, 6453, 6455, 6460, 6461, 6466, 6472, 6475, 6477, 6478, 6479, 6480, 6482, 6485, 6486, 6494, 6501, 6503, 6508, 6517, 6519, 6520, 6521, 6524, 6525, 6531, 6533, 6535, 6538, 6539, 6542, 6546, 6548, 6553, 6555, 6561, 6562, 6567, 6572, 6574, 6575, 6580, 6583, 6585, 6587, 6589, 6591, 6597, 6599, 6601, 6602, 6605, 6607, 6610, 6614, 6615, 6616, 6619, 6623, 6624, 6628, 6635, 6639, 6641, 6645, 6646, 6647, 6648, 6650, 6653, 6658, 6660, 6661, 6664, 6665, 6669, 6670, 6675, 6676, 6677, 6679, 6683, 6691, 6692, 6697, 6700, 6710, 6715, 6717, 6719, 6724, 6729, 6731, 6738, 6743, 6750, 6754, 6765, 6769, 6772, 6774, 6775, 6783, 6785, 6786, 6788, 6790, 6795, 6799, 6802, 6803, 6809, 6819, 6820, 6827, 6828, 6829, 6830, 6832, 6837, 6839, 6844, 6847, 6849, 6850, 6853, 6858, 6863, 6865, 6867, 6876, 6878, 6879, 6887, 6890, 6891, 6898, 6899, 6901, 6908, 6913, 6914, 6916, 6918, 6920, 6921, 6926, 6927, 6929, 6935, 6942, 6943, 6952, 6953, 6959, 6962, 6964, 6971, 6974, 6975, 6978, 6979, 6987, 6992, 6993, 7001, 7004, 7005, 7010, 7017, 7023, 7024, 7030, 7034, 7035, 7038, 7040, 7043, 7047, 7050, 7051, 7053, 7054, 7061, 7062, 7064, 7068, 7073, 7075, 7076, 7078, 7080, 7089, 7094, 7095, 7096, 7098, 7099, 7100, 7103, 7105, 7109, 7110, 7112, 7113, 7115, 7119, 7120, 7122, 7124, 7126, 7128, 7129, 7134, 7135, 7146, 7150, 7151, 7161, 7163, 7166, 7168, 7171, 7173, 7181, 7184, 7187, 7188, 7195, 7202, 7205, 7206, 7207, 7208, 7213, 7220, 7221, 7224, 7227, 7228, 7230, 7232, 7233, 7235, 7236, 7238, 7239, 7240, 7249, 7252, 7256, 7257, 7261, 7265, 7268, 7270, 7271, 7278, 7279, 7283, 7284, 7290, 7297, 7302, 7308, 7310, 7312, 7313, 7314, 7316, 7318, 7321, 7323, 7324, 7329, 7332, 7338, 7339, 7340, 7341, 7344, 7349, 7358, 7360, 7363, 7364, 7370, 7371, 7374, 7375, 7376, 7377, 7396, 7398, 7401, 7404, 7406, 7411, 7412, 7414, 7416, 7417, 7418, 7426, 7427, 7430, 7434, 7437, 7438, 7444, 7445, 7450, 7452, 7454, 7455, 7460, 7462, 7467, 7472, 7478, 7481, 7486, 7489, 7492, 7498, 7501, 7505, 7506, 7510, 7513, 7514, 7521, 7522, 7524, 7526, 7529, 7532, 7537, 7539, 7543, 7545, 7546, 7549, 7551, 7552, 7554, 7565, 7570, 7571, 7573, 7574, 7578, 7580, 7582, 7590, 7591, 7592, 7595, 7597, 7608, 7610, 7611, 7613, 7614, 7615, 7624, 7627, 7628, 7629, 7631, 7634, 7635, 7640, 7641, 7644, 7646, 7648, 7650, 7653, 7656, 7658, 7659, 7667, 7670, 7672, 7674, 7675, 7678, 7679, 7680, 7681, 7682, 7683, 7685, 7687, 7688, 7691, 7693, 7696, 7698, 7705, 7706, 7708, 7712, 7713, 7716, 7717, 7720, 7721, 7723, 7729, 7732, 7733, 7737, 7740, 7742, 7744, 7747, 7753, 7754, 7755, 7757, 7759, 7760, 7762, 7768, 7774, 7775, 7776, 7780, 7788, 7790, 7799, 7800, 7803, 7806, 7808, 7810, 7812, 7818, 7820, 7822, 7833, 7835, 7837, 7840, 7843, 7844, 7847, 7848, 7854, 7856, 7857, 7859, 7861, 7863, 7864, 7868, 7870, 7876, 7878, 7879, 7885, 7888, 7889, 7891, 7892, 7893, 7898, 7901, 7908, 7913, 7921, 7922, 7926, 7939, 7944, 7945, 7947, 7948, 7949, 7951, 7956, 7959, 7961, 7965, 7969, 7970, 7974, 7975, 7979, 7982, 7984, 7988, 7991, 7992, 7996, 7997, 8001, 8003, 8004, 8008, 8010, 8011, 8012, 8014, 8015, 8017, 8025, 8029, 8031, 8035, 8040, 8045, 8046, 8048, 8049, 8051, 8053, 8059, 8062, 8067, 8069, 8071, 8078, 8079, 8081, 8082, 8083, 8084, 8085, 8087, 8096, 8100, 8101, 8104, 8105, 8106, 8109, 8112, 8113, 8116, 8117, 8120, 8121, 8122, 8123, 8124, 8125, 8129, 8131, 8138, 8139, 8141, 8143, 8152, 8153, 8154, 8156, 8157, 8160, 8161, 8174, 8177, 8178, 8179, 8182, 8188, 8189, 8192, 8195, 8197, 8198, 8199, 8204, 8205, 8206, 8208, 8210, 8212, 8215, 8216, 8217, 8220, 8221, 8223, 8225, 8226, 8233, 8240, 8242, 8245, 8247, 8250, 8251, 8253, 8256, 8258, 8259, 8260, 8261, 8263, 8272, 8273, 8274, 8278, 8281, 8283, 8284, 8285, 8288, 8289, 8292, 8297, 8299, 8302, 8303, 8304, 8313, 8318, 8319, 8322, 8327, 8330, 8332, 8334, 8340, 8341, 8342, 8343, 8348, 8351, 8355, 8357, 8361, 8366, 8370, 8372, 8378, 8379, 8381, 8383, 8385, 8388, 8390, 8392, 8395, 8398, 8401, 8402, 8404, 8407, 8408, 8409, 8410, 8412, 8419, 8422, 8423, 8426, 8431, 8434, 8439, 8441, 8443, 8444, 8445, 8446, 8448, 8452, 8453, 8455, 8457, 8458, 8460, 8462, 8463, 8464, 8465, 8466, 8468, 8471, 8477, 8478, 8488, 8490, 8491, 8494, 8495, 8499, 8501, 8503, 8504, 8510, 8511, 8513, 8515, 8516, 8517, 8519, 8522, 8525, 8527, 8528, 8531, 8540, 8541, 8542, 8544, 8549, 8551, 8554, 8557, 8564, 8569, 8572, 8573, 8578, 8583, 8584, 8591, 8594, 8596, 8597, 8605, 8609, 8611, 8614, 8615, 8618, 8625, 8626, 8627, 8637, 8643, 8645, 8649, 8652, 8655, 8657, 8659, 8660, 8667, 8668, 8671, 8674, 8678, 8679, 8681, 8682, 8684, 8688, 8690, 8697, 8699, 8700, 8701, 8706, 8710, 8712, 8714, 8715, 8716, 8721, 8722, 8727, 8728, 8730, 8731, 8737, 8741, 8748, 8749, 8751, 8754, 8757, 8762, 8772, 8775, 8777, 8783, 8784, 8788, 8789, 8791, 8796, 8799, 8803, 8811, 8816, 8817, 8818, 8821, 8824, 8826, 8827, 8828, 8830, 8832, 8843, 8847, 8850, 8855, 8861, 8863, 8864, 8869, 8871, 8877, 8878, 8882, 8890, 8892, 8894, 8897, 8898, 8900, 8901, 8902, 8908, 8911, 8914, 8927, 8933, 8934, 8935, 8938, 8940, 8941, 8947, 8951, 8953, 8955, 8956, 8960, 8963, 8968, 8969, 8970, 8978, 8979, 8981, 8982, 8983, 8984, 8987, 8988, 8992, 8995, 8998, 9008, 9011, 9015, 9016, 9018, 9019, 9022, 9025, 9026, 9028, 9029, 9035, 9038, 9040, 9045, 9053, 9054, 9055, 9056, 9062, 9063, 9064, 9069, 9070, 9071, 9072, 9077, 9079, 9084, 9085, 9089, 9090, 9091, 9092, 9093, 9096, 9099, 9103, 9104, 9105, 9106, 9107, 9109, 9110, 9112, 9114, 9115, 9117, 9120, 9128, 9129, 9130, 9131, 9132, 9134, 9135, 9136, 9138, 9141, 9142, 9143, 9144, 9145, 9146, 9150, 9152, 9154, 9155, 9158, 9161, 9162, 9168, 9170, 9171, 9173, 9175, 9178, 9179, 9185, 9187, 9188, 9189, 9192, 9199, 9200, 9201, 9203, 9206, 9208, 9210, 9214, 9218, 9220, 9225, 9226, 9228, 9235, 9239, 9241, 9242, 9247, 9250, 9253, 9254, 9255, 9260, 9263, 9268, 9269, 9273, 9276, 9277, 9281, 9282, 9283, 9290, 9293, 9296, 9297, 9299, 9305, 9309, 9314, 9316, 9321, 9325, 9329, 9336, 9337, 9340, 9341, 9342, 9343, 9344, 9345, 9348, 9349, 9351, 9355, 9357, 9360, 9364, 9371, 9372, 9373, 9374, 9384, 9385, 9386, 9387, 9388, 9389, 9391, 9392, 9402, 9404, 9405, 9416, 9418, 9421, 9426, 9433, 9435, 9436, 9437, 9439, 9441, 9442, 9443, 9444, 9447, 9457, 9458, 9463, 9464, 9465, 9469, 9478, 9488, 9496, 9499, 9501, 9502, 9508, 9509, 9510, 9511, 9512, 9513, 9516, 9518, 9519, 9521, 9528, 9533, 9534, 9536, 9538, 9541, 9542, 9544, 9546, 9551, 9555, 9561, 9562, 9567, 9574, 9578, 9580, 9582, 9583, 9584, 9585, 9587, 9589, 9594, 9596, 9597, 9609, 9612, 9614, 9615, 9618, 9619, 9622, 9627, 9631, 9633, 9643, 9644, 9645, 9646, 9648, 9651, 9655, 9664, 9666, 9676, 9680, 9683, 9684, 9687, 9688, 9694, 9695, 9696, 9700, 9702, 9706, 9712, 9716, 9717, 9721, 9728, 9730, 9731, 9733, 9734, 9735, 9739, 9743, 9749, 9752, 9753, 9754, 9759, 9760, 9761, 9765, 9767, 9768, 9769, 9776, 9785, 9787, 9788, 9789, 9790, 9793, 9795, 9797, 9798, 9799, 9800, 9805, 9809, 9811, 9812, 9815, 9818, 9820, 9821, 9824, 9826, 9830, 9836, 9841, 9842, 9847, 9848, 9854, 9857, 9858, 9873, 9874, 9880, 9883, 9887, 9888, 9891, 9897, 9901, 9903, 9904, 9905, 9906, 9911, 9913, 9916, 9918, 9924, 9930, 9931, 9940, 9944, 9946, 9947, 9952, 9954, 9961, 9963, 9968, 9973, 9976, 9977, 9984, 9985, 9986, 9990, 9991, 9992, 9996, 9997, 9999], "external_url": "https://colorpunx.io/colors?i=220&name=#a66e2c", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954413917323919361"}, "#000000": {"id": 222, "name": "#000000", "description": "#000000 is one of 222 colors in the cryptopunx color pallette. It is used by 10000 unique punks", "hash": "8dc49dc77bb07dcc7f7e402ceeb2e9d0", "image": "https://gateway.pinata.cloud/ipfs/Qmd2f54EHEVpYyPCZU7SWUvZM2kChoj4ybWjhy3yc4mBJu?filename=colorpunx222.png", "punksexternal_url": "https://colorpunx.io/colors?i=222&name=#000000", "uri": "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/89408824224053580884141179262793538944265375538749422725118954402922207641601"}}

/* harmony default export */ __webpack_exports__["default"] = (colors);


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/***/ (function(module) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/***/ (function(module) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**********************************************************************/
/***/ (function(module) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/***/ (function(module) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/***/ (function(module) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/construct.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/construct.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

var isNativeReflectConstruct = __webpack_require__(/*! ./isNativeReflectConstruct */ "./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js");

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    module.exports = _construct = Reflect.construct;
  } else {
    module.exports = _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

module.exports = _construct;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/***/ (function(module) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/
/***/ (function(module) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/inherits.js":
/*!*********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inherits.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/isNativeFunction.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeFunction.js ***!
  \*****************************************************************/
/***/ (function(module) {

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

module.exports = _isNativeFunction;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js ***!
  \*************************************************************************/
/***/ (function(module) {

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

module.exports = _isNativeReflectConstruct;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/***/ (function(module) {

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/***/ (function(module) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

var assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/
/***/ (function(module) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles */ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js");

var iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit */ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js");

var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");

var nonIterableRest = __webpack_require__(/*! ./nonIterableRest */ "./node_modules/@babel/runtime/helpers/nonIterableRest.js");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/***/ (function(module) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/wrapNativeSuper.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getPrototypeOf = __webpack_require__(/*! ./getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

var isNativeFunction = __webpack_require__(/*! ./isNativeFunction */ "./node_modules/@babel/runtime/helpers/isNativeFunction.js");

var construct = __webpack_require__(/*! ./construct */ "./node_modules/@babel/runtime/helpers/construct.js");

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return construct(Class, arguments, getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

module.exports = _wrapNativeSuper;

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


var _slicedToArray = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");

var _s = $RefreshSig$();

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _router = __webpack_require__(/*! ../shared/lib/router/router */ "./node_modules/next/dist/shared/lib/router/router.js");

var _router1 = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");

var _useIntersection = __webpack_require__(/*! ./use-intersection */ "./node_modules/next/dist/client/use-intersection.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var prefetched = {};

function prefetch(router, href, as, options) {
  if ( false || !router) return;
  if (!(0, _router).isLocalURL(href)) return; // Prefetch the JSON page if asked (only in the client)
  // We need to handle a prefetch error here since we may be
  // loading with priority which can reject but we don't
  // want to force navigation since this is only a prefetch

  router.prefetch(href, as, options)["catch"](function (err) {
    if (true) {
      // rethrow to show invalid URL errors
      throw err;
    }
  });
  var curLocale = options && typeof options.locale !== 'undefined' ? options.locale : router && router.locale; // Join on an invalid URI character

  prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')] = true;
}

function isModifiedEvent(event) {
  var target = event.currentTarget.target;
  return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || event.nativeEvent && event.nativeEvent.which === 2;
}

function linkClicked(e, router, href, as, replace, shallow, scroll, locale) {
  var nodeName = e.currentTarget.nodeName;

  if (nodeName === 'A' && (isModifiedEvent(e) || !(0, _router).isLocalURL(href))) {
    // ignore click for browser’s default behavior
    return;
  }

  e.preventDefault(); //  avoid scroll for urls with anchor refs

  if (scroll == null && as.indexOf('#') >= 0) {
    scroll = false;
  } // replace state instead of push if prop is present


  router[replace ? 'replace' : 'push'](href, as, {
    shallow: shallow,
    locale: locale,
    scroll: scroll
  });
}

function Link(props) {
  _s();

  if (true) {
    var createPropError = function createPropError(args) {
      return new Error("Failed prop type: The prop `".concat(args.key, "` expects a ").concat(args.expected, " in `<Link>`, but got `").concat(args.actual, "` instead.") + ( true ? "\nOpen your browser's console to view the Component stack trace." : 0));
    }; // TypeScript trick for type-guarding:


    var requiredPropsGuard = {
      href: true
    };
    var requiredProps = Object.keys(requiredPropsGuard);
    requiredProps.forEach(function (key) {
      if (key === 'href') {
        if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {
          throw createPropError({
            key: key,
            expected: '`string` or `object`',
            actual: props[key] === null ? 'null' : typeof props[key]
          });
        }
      } else {
        // TypeScript trick for type-guarding:
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var _ = key;
      }
    }); // TypeScript trick for type-guarding:

    var optionalPropsGuard = {
      as: true,
      replace: true,
      scroll: true,
      shallow: true,
      passHref: true,
      prefetch: true,
      locale: true
    };
    var optionalProps = Object.keys(optionalPropsGuard);
    optionalProps.forEach(function (key) {
      var valType = typeof props[key];

      if (key === 'as') {
        if (props[key] && valType !== 'string' && valType !== 'object') {
          throw createPropError({
            key: key,
            expected: '`string` or `object`',
            actual: valType
          });
        }
      } else if (key === 'locale') {
        if (props[key] && valType !== 'string') {
          throw createPropError({
            key: key,
            expected: '`string`',
            actual: valType
          });
        }
      } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch') {
        if (props[key] != null && valType !== 'boolean') {
          throw createPropError({
            key: key,
            expected: '`boolean`',
            actual: valType
          });
        }
      } else {
        // TypeScript trick for type-guarding:
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var _ = key;
      }
    }); // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes
    // eslint-disable-next-line react-hooks/rules-of-hooks

    var hasWarned = _react["default"].useRef(false);

    if (props.prefetch && !hasWarned.current) {
      hasWarned.current = true;
      console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated');
    }
  }

  var p = props.prefetch !== false;
  var router = (0, _router1).useRouter();

  var _react$default$useMem = _react["default"].useMemo(function () {
    var _resolveHref = (0, _router).resolveHref(router, props.href, true),
        _resolveHref2 = _slicedToArray(_resolveHref, 2),
        resolvedHref = _resolveHref2[0],
        resolvedAs = _resolveHref2[1];

    return {
      href: resolvedHref,
      as: props.as ? (0, _router).resolveHref(router, props.as) : resolvedAs || resolvedHref
    };
  }, [router, props.href, props.as]),
      href = _react$default$useMem.href,
      as = _react$default$useMem.as;

  var children = props.children,
      replace = props.replace,
      shallow = props.shallow,
      scroll = props.scroll,
      locale = props.locale; // Deprecated. Warning shown by propType check. If the children provided is a string (<Link>example</Link>) we wrap it in an <a> tag

  if (typeof children === 'string') {
    children = /*#__PURE__*/_react["default"].createElement("a", null, children);
  } // This will return the first child, if multiple are provided it will throw an error


  var child;

  if (true) {
    try {
      child = _react["default"].Children.only(children);
    } catch (err) {
      throw new Error("Multiple children were passed to <Link> with `href` of `".concat(props.href, "` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children") + ( true ? "\nOpen your browser's console to view the Component stack trace." : 0));
    }
  } else {}

  var childRef = child && typeof child === 'object' && child.ref;

  var _useIntersection2 = (0, _useIntersection).useIntersection({
    rootMargin: '200px'
  }),
      _useIntersection3 = _slicedToArray(_useIntersection2, 2),
      setIntersectionRef = _useIntersection3[0],
      isVisible = _useIntersection3[1];

  var setRef = _react["default"].useCallback(function (el) {
    setIntersectionRef(el);

    if (childRef) {
      if (typeof childRef === 'function') childRef(el);else if (typeof childRef === 'object') {
        childRef.current = el;
      }
    }
  }, [childRef, setIntersectionRef]);

  _react["default"].useEffect(function () {
    var shouldPrefetch = isVisible && p && (0, _router).isLocalURL(href);
    var curLocale = typeof locale !== 'undefined' ? locale : router && router.locale;
    var isPrefetched = prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')];

    if (shouldPrefetch && !isPrefetched) {
      prefetch(router, href, as, {
        locale: curLocale
      });
    }
  }, [as, href, isVisible, locale, p, router]);

  var childProps = {
    ref: setRef,
    onClick: function onClick(e) {
      if (child.props && typeof child.props.onClick === 'function') {
        child.props.onClick(e);
      }

      if (!e.defaultPrevented) {
        linkClicked(e, router, href, as, replace, shallow, scroll, locale);
      }
    }
  };

  childProps.onMouseEnter = function (e) {
    if (!(0, _router).isLocalURL(href)) return;

    if (child.props && typeof child.props.onMouseEnter === 'function') {
      child.props.onMouseEnter(e);
    }

    prefetch(router, href, as, {
      priority: true
    });
  }; // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is
  // defined, we specify the current 'href', so that repetition is not needed by the user


  if (props.passHref || child.type === 'a' && !('href' in child.props)) {
    var curLocale = typeof locale !== 'undefined' ? locale : router && router.locale; // we only render domain locales if we are currently on a domain locale
    // so that locale links are still visitable in development/preview envs

    var localeDomain = router && router.isLocaleDomain && (0, _router).getDomainLocale(as, curLocale, router && router.locales, router && router.domainLocales);
    childProps.href = localeDomain || (0, _router).addBasePath((0, _router).addLocale(as, curLocale, router && router.defaultLocale));
  }

  return /*#__PURE__*/_react["default"].cloneElement(child, childProps);
}

_s(Link, "PYHstBoZE4p1pf5wc1Vw4fTzvCU=", true);

_c = Link;
var _default = Link;
exports.default = _default;

var _c;

$RefreshReg$(_c, "Link");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/client/normalize-trailing-slash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.removePathTrailingSlash = removePathTrailingSlash;
exports.normalizePathTrailingSlash = void 0;

function removePathTrailingSlash(path) {
  return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;
}

var normalizePathTrailingSlash =  true ? function (path) {
  if (/\.[^/]+\/?$/.test(path)) {
    return removePathTrailingSlash(path);
  } else if (path.endsWith('/')) {
    return path;
  } else {
    return path + '/';
  }
} : 0;
exports.normalizePathTrailingSlash = normalizePathTrailingSlash;

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.requestIdleCallback = exports.cancelIdleCallback = void 0;

var requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function (cb) {
  var start = Date.now();
  return setTimeout(function () {
    cb({
      didTimeout: false,
      timeRemaining: function timeRemaining() {
        return Math.max(0, 50 - (Date.now() - start));
      }
    });
  }, 1);
};

exports.requestIdleCallback = requestIdleCallback;

var cancelIdleCallback = typeof self !== 'undefined' && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function (id) {
  return clearTimeout(id);
};

exports.cancelIdleCallback = cancelIdleCallback;

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/client/route-loader.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/route-loader.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.markAssetError = markAssetError;
exports.isAssetError = isAssetError;
exports.getClientBuildManifest = getClientBuildManifest;
exports.createRouteLoader = createRouteLoader;

var _getAssetPathFromRoute = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/utils/get-asset-path-from-route */ "./node_modules/next/dist/shared/lib/router/utils/get-asset-path-from-route.js"));

var _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ "./node_modules/next/dist/client/request-idle-callback.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
} // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive
// considers as "Good" time-to-interactive. We must assume something went
// wrong beyond this point, and then fall-back to a full page transition to
// show the user something of value.


var MS_MAX_IDLE_DELAY = 3800;

function withFuture(key, map, generator) {
  var entry = map.get(key);

  if (entry) {
    if ('future' in entry) {
      return entry.future;
    }

    return Promise.resolve(entry);
  }

  var resolver;
  var prom = new Promise(function (resolve) {
    resolver = resolve;
  });
  map.set(key, entry = {
    resolve: resolver,
    future: prom
  });
  return generator ? generator().then(function (value) {
    return resolver(value), value;
  }) : prom;
}

function hasPrefetch(link) {
  try {
    link = document.createElement('link');
    return (// detect IE11 since it supports prefetch but isn't detected
      // with relList.support
      !!window.MSInputMethodContext && !!document.documentMode || link.relList.supports('prefetch')
    );
  } catch (e) {
    return false;
  }
}

var canPrefetch = hasPrefetch();

function prefetchViaDom(href, as, link) {
  return new Promise(function (res, rej) {
    if (document.querySelector("link[rel=\"prefetch\"][href^=\"".concat(href, "\"]"))) {
      return res();
    }

    link = document.createElement('link'); // The order of property assignment here is intentional:

    if (as) link.as = as;
    link.rel = "prefetch";
    link.crossOrigin = undefined;
    link.onload = res;
    link.onerror = rej; // `href` should always be last:

    link.href = href;
    document.head.appendChild(link);
  });
}

var ASSET_LOAD_ERROR = Symbol('ASSET_LOAD_ERROR');

function markAssetError(err) {
  return Object.defineProperty(err, ASSET_LOAD_ERROR, {});
}

function isAssetError(err) {
  return err && ASSET_LOAD_ERROR in err;
}

function appendScript(src, script) {
  return new Promise(function (resolve, reject) {
    script = document.createElement('script'); // The order of property assignment here is intentional.
    // 1. Setup success/failure hooks in case the browser synchronously
    //    executes when `src` is set.

    script.onload = resolve;

    script.onerror = function () {
      return reject(markAssetError(new Error("Failed to load script: ".concat(src))));
    }; // 2. Configure the cross-origin attribute before setting `src` in case the
    //    browser begins to fetch.


    script.crossOrigin = undefined; // 3. Finally, set the source and inject into the DOM in case the child
    //    must be appended for fetching to start.

    script.src = src;
    document.body.appendChild(script);
  });
} // We wait for pages to be built in dev before we start the route transition
// timeout to prevent an un-necessary hard navigation in development.


var devBuildPromise; // Resolve a promise that times out after given amount of milliseconds.

function resolvePromiseWithTimeout(p, ms, err) {
  return new Promise(function (resolve, reject) {
    var cancelled = false;
    p.then(function (r) {
      // Resolved, cancel the timeout
      cancelled = true;
      resolve(r);
    })["catch"](reject); // We wrap these checks separately for better dead-code elimination in
    // production bundles.

    if (true) {
      (devBuildPromise || Promise.resolve()).then(function () {
        (0, _requestIdleCallback).requestIdleCallback(function () {
          return setTimeout(function () {
            if (!cancelled) {
              reject(err);
            }
          }, ms);
        });
      });
    }

    if (false) {}
  });
}

function getClientBuildManifest() {
  if (self.__BUILD_MANIFEST) {
    return Promise.resolve(self.__BUILD_MANIFEST);
  }

  var onBuildManifest = new Promise(function (resolve) {
    // Mandatory because this is not concurrent safe:
    var cb = self.__BUILD_MANIFEST_CB;

    self.__BUILD_MANIFEST_CB = function () {
      resolve(self.__BUILD_MANIFEST);
      cb && cb();
    };
  });
  return resolvePromiseWithTimeout(onBuildManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client build manifest')));
}

function getFilesForRoute(assetPrefix, route) {
  if (true) {
    return Promise.resolve({
      scripts: [assetPrefix + '/_next/static/chunks/pages' + encodeURI((0, _getAssetPathFromRoute)["default"](route, '.js'))],
      // Styles are handled by `style-loader` in development:
      css: []
    });
  }

  return getClientBuildManifest().then(function (manifest) {
    if (!(route in manifest)) {
      throw markAssetError(new Error("Failed to lookup route: ".concat(route)));
    }

    var allFiles = manifest[route].map(function (entry) {
      return assetPrefix + '/_next/' + encodeURI(entry);
    });
    return {
      scripts: allFiles.filter(function (v) {
        return v.endsWith('.js');
      }),
      css: allFiles.filter(function (v) {
        return v.endsWith('.css');
      })
    };
  });
}

function createRouteLoader(assetPrefix) {
  var entrypoints = new Map();
  var loadedScripts = new Map();
  var styleSheets = new Map();
  var routes = new Map();

  function maybeExecuteScript(src) {
    var prom = loadedScripts.get(src);

    if (prom) {
      return prom;
    } // Skip executing script if it's already in the DOM:


    if (document.querySelector("script[src^=\"".concat(src, "\"]"))) {
      return Promise.resolve();
    }

    loadedScripts.set(src, prom = appendScript(src));
    return prom;
  }

  function fetchStyleSheet(href) {
    var prom = styleSheets.get(href);

    if (prom) {
      return prom;
    }

    styleSheets.set(href, prom = fetch(href).then(function (res) {
      if (!res.ok) {
        throw new Error("Failed to load stylesheet: ".concat(href));
      }

      return res.text().then(function (text) {
        return {
          href: href,
          content: text
        };
      });
    })["catch"](function (err) {
      throw markAssetError(err);
    }));
    return prom;
  }

  return {
    whenEntrypoint: function whenEntrypoint(route) {
      return withFuture(route, entrypoints);
    },
    onEntrypoint: function onEntrypoint(route, execute) {
      Promise.resolve(execute).then(function (fn) {
        return fn();
      }).then(function (exports) {
        return {
          component: exports && exports["default"] || exports,
          exports: exports
        };
      }, function (err) {
        return {
          error: err
        };
      }).then(function (input) {
        var old = entrypoints.get(route);
        entrypoints.set(route, input);
        if (old && 'resolve' in old) old.resolve(input);
      });
    },
    loadRoute: function loadRoute(route, prefetch) {
      var _this = this;

      return withFuture(route, routes, function () {
        var routeFilesPromise = getFilesForRoute(assetPrefix, route).then(function (_ref) {
          var scripts = _ref.scripts,
              css = _ref.css;
          return Promise.all([entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)), Promise.all(css.map(fetchStyleSheet))]);
        }).then(function (res) {
          return _this.whenEntrypoint(route).then(function (entrypoint) {
            return {
              entrypoint: entrypoint,
              styles: res[1]
            };
          });
        });

        if (true) {
          devBuildPromise = new Promise(function (resolve) {
            if (routeFilesPromise) {
              return routeFilesPromise["finally"](function () {
                resolve();
              });
            }
          });
        }

        return resolvePromiseWithTimeout(routeFilesPromise, MS_MAX_IDLE_DELAY, markAssetError(new Error("Route did not complete loading: ".concat(route)))).then(function (_ref2) {
          var entrypoint = _ref2.entrypoint,
              styles = _ref2.styles;
          var res = Object.assign({
            styles: styles
          }, entrypoint);
          return 'error' in entrypoint ? entrypoint : res;
        })["catch"](function (err) {
          if (prefetch) {
            // we don't want to cache errors during prefetch
            throw err;
          }

          return {
            error: err
          };
        });
      });
    },
    prefetch: function prefetch(route) {
      var _this2 = this;

      // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118
      // License: Apache 2.0
      var cn;

      if (cn = navigator.connection) {
        // Don't prefetch if using 2G or if Save-Data is enabled.
        if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();
      }

      return getFilesForRoute(assetPrefix, route).then(function (output) {
        return Promise.all(canPrefetch ? output.scripts.map(function (script) {
          return prefetchViaDom(script, 'script');
        }) : []);
      }).then(function () {
        (0, _requestIdleCallback).requestIdleCallback(function () {
          return _this2.loadRoute(route, true)["catch"](function () {});
        });
      })["catch"]( // swallow prefetch errors
      function () {});
    }
  };
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/client/router.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/router.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


var _construct = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/construct */ "./node_modules/@babel/runtime/helpers/construct.js");

var _s = $RefreshSig$();

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "Router", ({
  enumerable: true,
  get: function get() {
    return _router["default"];
  }
}));
Object.defineProperty(exports, "withRouter", ({
  enumerable: true,
  get: function get() {
    return _withRouter["default"];
  }
}));
exports.useRouter = useRouter;
exports.createRouter = createRouter;
exports.makePublicRouterInstance = makePublicRouterInstance;
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _router = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/router */ "./node_modules/next/dist/shared/lib/router/router.js"));

var _routerContext = __webpack_require__(/*! ../shared/lib/router-context */ "./node_modules/next/dist/shared/lib/router-context.js");

var _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ "./node_modules/next/dist/client/with-router.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var singletonRouter = {
  router: null,
  readyCallbacks: [],
  ready: function ready(cb) {
    if (this.router) return cb();

    if (true) {
      this.readyCallbacks.push(cb);
    }
  }
}; // Create public properties and methods of the router in the singletonRouter

var urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath', 'locale', 'locales', 'defaultLocale', 'isReady', 'isPreview', 'isLocaleDomain', 'domainLocales'];
var routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];
var coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it

Object.defineProperty(singletonRouter, 'events', {
  get: function get() {
    return _router["default"].events;
  }
});
urlPropertyFields.forEach(function (field) {
  // Here we need to use Object.defineProperty because we need to return
  // the property assigned to the actual router
  // The value might get changed as we change routes and this is the
  // proper way to access it
  Object.defineProperty(singletonRouter, field, {
    get: function get() {
      var router = getRouter();
      return router[field];
    }
  });
});
coreMethodFields.forEach(function (field) {
  singletonRouter[field] = function () {
    var router = getRouter();
    return router[field].apply(router, arguments);
  };
});
routerEvents.forEach(function (event) {
  singletonRouter.ready(function () {
    _router["default"].events.on(event, function () {
      var eventField = "on".concat(event.charAt(0).toUpperCase()).concat(event.substring(1));
      var _singletonRouter = singletonRouter;

      if (_singletonRouter[eventField]) {
        try {
          _singletonRouter[eventField].apply(_singletonRouter, arguments);
        } catch (err) {
          console.error("Error when running the Router event: ".concat(eventField));
          console.error("".concat(err.message, "\n").concat(err.stack));
        }
      }
    });
  });
});

function getRouter() {
  if (!singletonRouter.router) {
    var message = 'No router instance found.\n' + 'You should only use "next/router" on the client side of your app.\n';
    throw new Error(message);
  }

  return singletonRouter.router;
}

var _default = singletonRouter;
exports.default = _default;

function useRouter() {
  _s();

  return _react["default"].useContext(_routerContext.RouterContext);
}

_s(useRouter, "gDsCjeeItUuvgOWf1v4qoK9RF6k=");

function createRouter() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  singletonRouter.router = _construct(_router["default"], args);
  singletonRouter.readyCallbacks.forEach(function (cb) {
    return cb();
  });
  singletonRouter.readyCallbacks = [];
  return singletonRouter.router;
}

function makePublicRouterInstance(router) {
  var _router1 = router;
  var instance = {};

  var _iterator = _createForOfIteratorHelper(urlPropertyFields),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var property = _step.value;

      if (typeof _router1[property] === 'object') {
        instance[property] = Object.assign(Array.isArray(_router1[property]) ? [] : {}, _router1[property]) // makes sure query is not stateful
        ;
        continue;
      }

      instance[property] = _router1[property];
    } // Events is a static property on the router, the router doesn't have to be initialized to use it

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  instance.events = _router["default"].events;
  coreMethodFields.forEach(function (field) {
    instance[field] = function () {
      return _router1[field].apply(_router1, arguments);
    };
  });
  return instance;
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/client/use-intersection.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/client/use-intersection.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


var _slicedToArray = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");

var _s = $RefreshSig$();

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.useIntersection = useIntersection;

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ "./node_modules/next/dist/client/request-idle-callback.js");

var hasIntersectionObserver = typeof IntersectionObserver !== 'undefined';

function useIntersection(_ref) {
  _s();

  var rootMargin = _ref.rootMargin,
      disabled = _ref.disabled;
  var isDisabled = disabled || !hasIntersectionObserver;
  var unobserve = (0, _react).useRef();

  var _useState = (0, _react).useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var setRef = (0, _react).useCallback(function (el) {
    if (unobserve.current) {
      unobserve.current();
      unobserve.current = undefined;
    }

    if (isDisabled || visible) return;

    if (el && el.tagName) {
      unobserve.current = observe(el, function (isVisible) {
        return isVisible && setVisible(isVisible);
      }, {
        rootMargin: rootMargin
      });
    }
  }, [isDisabled, rootMargin, visible]);
  (0, _react).useEffect(function () {
    if (!hasIntersectionObserver) {
      if (!visible) {
        var idleCallback = (0, _requestIdleCallback).requestIdleCallback(function () {
          return setVisible(true);
        });
        return function () {
          return (0, _requestIdleCallback).cancelIdleCallback(idleCallback);
        };
      }
    }
  }, [visible]);
  return [setRef, visible];
}

_s(useIntersection, "Z6jj7qx+KE6gD9CpC9WlQTha45o=");

function observe(element, callback, options) {
  var _createObserver = createObserver(options),
      id = _createObserver.id,
      observer = _createObserver.observer,
      elements = _createObserver.elements;

  elements.set(element, callback);
  observer.observe(element);
  return function unobserve() {
    elements["delete"](element);
    observer.unobserve(element); // Destroy observer when there's nothing left to watch:

    if (elements.size === 0) {
      observer.disconnect();
      observers["delete"](id);
    }
  };
}

var observers = new Map();

function createObserver(options) {
  var id = options.rootMargin || '';
  var instance = observers.get(id);

  if (instance) {
    return instance;
  }

  var elements = new Map();
  var observer = new IntersectionObserver(function (entries) {
    entries.forEach(function (entry) {
      var callback = elements.get(entry.target);
      var isVisible = entry.isIntersecting || entry.intersectionRatio > 0;

      if (callback && isVisible) {
        callback(isVisible);
      }
    });
  }, options);
  observers.set(id, instance = {
    id: id,
    observer: observer,
    elements: elements
  });
  return instance;
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/client/with-router.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/with-router.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = withRouter;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _router = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function withRouter(ComposedComponent) {
  var _s = $RefreshSig$();

  function WithRouterWrapper(props) {
    _s();

    return /*#__PURE__*/_react["default"].createElement(ComposedComponent, Object.assign({
      router: (0, _router).useRouter()
    }, props));
  }

  _s(WithRouterWrapper, "CeygcqajjFExIxFEzW4x/gfWEGQ=", true);

  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps;
  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;

  if (true) {
    var name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';
    WithRouterWrapper.displayName = "withRouter(".concat(name, ")");
  }

  return WithRouterWrapper;
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.normalizeLocalePath = normalizeLocalePath;

function normalizeLocalePath(pathname, locales) {
  var detectedLocale; // first item will be empty string from splitting at first char

  var pathnameParts = pathname.split('/');
  (locales || []).some(function (locale) {
    if (pathnameParts[1].toLowerCase() === locale.toLowerCase()) {
      detectedLocale = locale;
      pathnameParts.splice(1, 1);
      pathname = pathnameParts.join('/') || '/';
      return true;
    }

    return false;
  });
  return {
    pathname: pathname,
    detectedLocale: detectedLocale
  };
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/shared/lib/mitt.js":
/*!***************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/mitt.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = mitt;

function mitt() {
  var all = Object.create(null);
  return {
    on: function on(type, handler) {
      (all[type] || (all[type] = [])).push(handler);
    },
    off: function off(type, handler) {
      if (all[type]) {
        all[type].splice(all[type].indexOf(handler) >>> 0, 1);
      }
    },
    emit: function emit(type) {
      for (var _len = arguments.length, evts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        evts[_key - 1] = arguments[_key];
      }

      (all[type] || []).slice().map(function (handler) {
        handler.apply(void 0, evts);
      });
    }
  };
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router-context.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router-context.js ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RouterContext = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var RouterContext = _react["default"].createContext(null);

exports.RouterContext = RouterContext;

if (true) {
  RouterContext.displayName = 'RouterContext';
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router/router.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/router.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


var _regeneratorRuntime = __webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");

var _asyncToGenerator = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");

var _classCallCheck = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");

var _createClass = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");

var _slicedToArray = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getDomainLocale = getDomainLocale;
exports.addLocale = addLocale;
exports.delLocale = delLocale;
exports.hasBasePath = hasBasePath;
exports.addBasePath = addBasePath;
exports.delBasePath = delBasePath;
exports.isLocalURL = isLocalURL;
exports.interpolateAs = interpolateAs;
exports.resolveHref = resolveHref;
exports.default = void 0;

var _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ "./node_modules/next/dist/client/normalize-trailing-slash.js");

var _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ "./node_modules/next/dist/client/route-loader.js");

var _denormalizePagePath = __webpack_require__(/*! ../../../server/denormalize-page-path */ "./node_modules/next/dist/server/denormalize-page-path.js");

var _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ "./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js");

var _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ "./node_modules/next/dist/shared/lib/mitt.js"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/next/dist/shared/lib/utils.js");

var _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ "./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js");

var _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ "./node_modules/next/dist/shared/lib/router/utils/parse-relative-url.js");

var _querystring = __webpack_require__(/*! ./utils/querystring */ "./node_modules/next/dist/shared/lib/router/utils/querystring.js");

var _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ "?5c99"));

var _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ "./node_modules/next/dist/shared/lib/router/utils/route-matcher.js");

var _routeRegex = __webpack_require__(/*! ./utils/route-regex */ "./node_modules/next/dist/shared/lib/router/utils/route-regex.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var detectDomainLocale;

if (false) {}

var basePath =  false || '';

function buildCancellationError() {
  return Object.assign(new Error('Route Cancelled'), {
    cancelled: true
  });
}

function addPathPrefix(path, prefix) {
  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash).normalizePathTrailingSlash(prefix) : "".concat(prefix).concat(pathNoQueryHash(path) === '/' ? path.substring(1) : path) : path;
}

function getDomainLocale(path, locale, locales, domainLocales) {
  if (false) { var detectedDomain; } else {
    return false;
  }
}

function addLocale(path, locale, defaultLocale) {
  if (false) { var localeLower, pathLower, pathname; }

  return path;
}

function delLocale(path, locale) {
  if (false) { var localeLower, pathLower, pathname; }

  return path;
}

function pathNoQueryHash(path) {
  var queryIndex = path.indexOf('?');
  var hashIndex = path.indexOf('#');

  if (queryIndex > -1 || hashIndex > -1) {
    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);
  }

  return path;
}

function hasBasePath(path) {
  path = pathNoQueryHash(path);
  return path === basePath || path.startsWith(basePath + '/');
}

function addBasePath(path) {
  // we only add the basepath on relative urls
  return addPathPrefix(path, basePath);
}

function delBasePath(path) {
  path = path.slice(basePath.length);
  if (!path.startsWith('/')) path = "/".concat(path);
  return path;
}

function isLocalURL(url) {
  // prevent a hydration mismatch on href for url with anchor refs
  if (url.startsWith('/') || url.startsWith('#') || url.startsWith('?')) return true;

  try {
    // absolute urls can be local if they are on the same origin
    var locationOrigin = (0, _utils).getLocationOrigin();
    var resolved = new URL(url, locationOrigin);
    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);
  } catch (_) {
    return false;
  }
}

function interpolateAs(route, asPathname, query) {
  var interpolatedRoute = '';
  var dynamicRegex = (0, _routeRegex).getRouteRegex(route);
  var dynamicGroups = dynamicRegex.groups;
  var dynamicMatches = // Try to match the dynamic route against the asPath
  (asPathname !== route ? (0, _routeMatcher).getRouteMatcher(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href
  // TODO: should this take priority; also need to change in the router.
  query;
  interpolatedRoute = route;
  var params = Object.keys(dynamicGroups);

  if (!params.every(function (param) {
    var value = dynamicMatches[param] || '';
    var _dynamicGroups$param = dynamicGroups[param],
        repeat = _dynamicGroups$param.repeat,
        optional = _dynamicGroups$param.optional; // support single-level catch-all
    // TODO: more robust handling for user-error (passing `/`)

    var replaced = "[".concat(repeat ? '...' : '').concat(param, "]");

    if (optional) {
      replaced = "".concat(!value ? '/' : '', "[").concat(replaced, "]");
    }

    if (repeat && !Array.isArray(value)) value = [value];
    return (optional || param in dynamicMatches) && ( // Interpolate group into data URL if present
    interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just
    // path delimiter escaped since they are being inserted
    // into the URL and we expect URL encoded segments
    // when parsing dynamic route params
    function (segment) {
      return encodeURIComponent(segment);
    }).join('/') : encodeURIComponent(value)) || '/');
  })) {
    interpolatedRoute = '' // did not satisfy all requirements
    ; // n.b. We ignore this error because we handle warning for this case in
    // development in the `<Link>` component directly.
  }

  return {
    params: params,
    result: interpolatedRoute
  };
}

function omitParmsFromQuery(query, params) {
  var filteredQuery = {};
  Object.keys(query).forEach(function (key) {
    if (!params.includes(key)) {
      filteredQuery[key] = query[key];
    }
  });
  return filteredQuery;
}

function resolveHref(router, href, resolveAs) {
  // we use a dummy base url for relative urls
  var base;
  var urlAsString = typeof href === 'string' ? href : (0, _utils).formatWithValidation(href); // repeated slashes and backslashes in the URL are considered
  // invalid and will never match a Next.js page/file

  var urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\/\//);
  var urlAsStringNoProto = urlProtoMatch ? urlAsString.substr(urlProtoMatch[0].length) : urlAsString;
  var urlParts = urlAsStringNoProto.split('?');

  if ((urlParts[0] || '').match(/(\/\/|\\)/)) {
    console.error("Invalid href passed to next/router: ".concat(urlAsString, ", repeated forward-slashes (//) or backslashes \\ are not valid in the href"));
    var normalizedUrl = (0, _utils).normalizeRepeatedSlashes(urlAsStringNoProto);
    urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl;
  } // Return because it cannot be routed by the Next.js router


  if (!isLocalURL(urlAsString)) {
    return resolveAs ? [urlAsString] : urlAsString;
  }

  try {
    base = new URL(urlAsString.startsWith('#') ? router.asPath : router.pathname, 'http://n');
  } catch (_) {
    // fallback to / for invalid asPath values e.g. //
    base = new URL('/', 'http://n');
  }

  try {
    var finalUrl = new URL(urlAsString, base);
    finalUrl.pathname = (0, _normalizeTrailingSlash).normalizePathTrailingSlash(finalUrl.pathname);
    var interpolatedAs = '';

    if ((0, _isDynamic).isDynamicRoute(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {
      var query = (0, _querystring).searchParamsToUrlQuery(finalUrl.searchParams);

      var _interpolateAs = interpolateAs(finalUrl.pathname, finalUrl.pathname, query),
          result = _interpolateAs.result,
          params = _interpolateAs.params;

      if (result) {
        interpolatedAs = (0, _utils).formatWithValidation({
          pathname: result,
          hash: finalUrl.hash,
          query: omitParmsFromQuery(query, params)
        });
      }
    } // if the origin didn't change, it means we received a relative href


    var resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;
    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;
  } catch (_) {
    return resolveAs ? [urlAsString] : urlAsString;
  }
}

function stripOrigin(url) {
  var origin = (0, _utils).getLocationOrigin();
  return url.startsWith(origin) ? url.substring(origin.length) : url;
}

function prepareUrlAs(router, url, as) {
  // If url and as provided as an object representation,
  // we'll format them into the string version here.
  var _resolveHref = resolveHref(router, url, true),
      _resolveHref2 = _slicedToArray(_resolveHref, 2),
      resolvedHref = _resolveHref2[0],
      resolvedAs = _resolveHref2[1];

  var origin = (0, _utils).getLocationOrigin();
  var hrefHadOrigin = resolvedHref.startsWith(origin);
  var asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);
  resolvedHref = stripOrigin(resolvedHref);
  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;
  var preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);
  var preparedAs = as ? stripOrigin(resolveHref(router, as)) : resolvedAs || resolvedHref;
  return {
    url: preparedUrl,
    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)
  };
}

function resolveDynamicRoute(pathname, pages) {
  var cleanPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _denormalizePagePath).denormalizePagePath(pathname));

  if (cleanPathname === '/404' || cleanPathname === '/_error') {
    return pathname;
  } // handle resolving href for dynamic routes


  if (!pages.includes(cleanPathname)) {
    // eslint-disable-next-line array-callback-return
    pages.some(function (page) {
      if ((0, _isDynamic).isDynamicRoute(page) && (0, _routeRegex).getRouteRegex(page).re.test(cleanPathname)) {
        pathname = page;
        return true;
      }
    });
  }

  return (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);
}

var manualScrollRestoration =  false && 0;
var SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');

function fetchRetry(url, attempts) {
  return fetch(url, {
    // Cookies are required to be present for Next.js' SSG "Preview Mode".
    // Cookies may also be required for `getServerSideProps`.
    //
    // > `fetch` won’t send cookies, unless you set the credentials init
    // > option.
    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
    //
    // > For maximum browser compatibility when it comes to sending &
    // > receiving cookies, always supply the `credentials: 'same-origin'`
    // > option instead of relying on the default.
    // https://github.com/github/fetch#caveats
    credentials: 'same-origin'
  }).then(function (res) {
    if (!res.ok) {
      if (attempts > 1 && res.status >= 500) {
        return fetchRetry(url, attempts - 1);
      }

      if (res.status === 404) {
        return res.json().then(function (data) {
          if (data.notFound) {
            return {
              notFound: SSG_DATA_NOT_FOUND
            };
          }

          throw new Error("Failed to load static props");
        });
      }

      throw new Error("Failed to load static props");
    }

    return res.json();
  });
}

function fetchNextData(dataHref, isServerRender) {
  return fetchRetry(dataHref, isServerRender ? 3 : 1)["catch"](function (err) {
    // We should only trigger a server-side transition if this was caused
    // on a client-side transition. Otherwise, we'd get into an infinite
    // loop.
    if (!isServerRender) {
      (0, _routeLoader).markAssetError(err);
    }

    throw err;
  });
}

var Router = /*#__PURE__*/function () {
  function Router(pathname1, query1, as1, _ref) {
    var _this = this;

    var initialProps = _ref.initialProps,
        pageLoader = _ref.pageLoader,
        App = _ref.App,
        wrapApp = _ref.wrapApp,
        Component1 = _ref.Component,
        err1 = _ref.err,
        subscription = _ref.subscription,
        isFallback = _ref.isFallback,
        locale = _ref.locale,
        locales = _ref.locales,
        defaultLocale = _ref.defaultLocale,
        domainLocales = _ref.domainLocales,
        isPreview = _ref.isPreview;

    _classCallCheck(this, Router);

    // Static Data Cache
    this.sdc = {}; // In-flight Server Data Requests, for deduping

    this.sdr = {};
    this._idx = 0;

    this.onPopState = function (e) {
      var state = e.state;

      if (!state) {
        // We get state as undefined for two reasons.
        //  1. With older safari (< 8) and older chrome (< 34)
        //  2. When the URL changed with #
        //
        // In the both cases, we don't need to proceed and change the route.
        // (as it's already changed)
        // But we can simply replace the state with the new changes.
        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
        // So, doing the following for (1) does no harm.
        var _pathname = _this.pathname,
            _query = _this.query;

        _this.changeState('replaceState', (0, _utils).formatWithValidation({
          pathname: addBasePath(_pathname),
          query: _query
        }), (0, _utils).getURL());

        return;
      }

      if (!state.__N) {
        return;
      }

      var forcedScroll;
      var url = state.url,
          as1 = state.as,
          options = state.options,
          idx = state.idx;

      if (false) { var v; }

      _this._idx = idx;

      var _parseRelativeUrl2 = (0, _parseRelativeUrl).parseRelativeUrl(url),
          pathname1 = _parseRelativeUrl2.pathname; // Make sure we don't re-render on initial load,
      // can be caused by navigating back from an external site


      if (_this.isSsr && as1 === _this.asPath && pathname1 === _this.pathname) {
        return;
      } // If the downstream application returns falsy, return.
      // They will then be responsible for handling the event.


      if (_this._bps && !_this._bps(state)) {
        return;
      }

      _this.change('replaceState', url, as1, Object.assign({}, options, {
        shallow: options.shallow && _this._shallow,
        locale: options.locale || _this.defaultLocale
      }), forcedScroll);
    }; // represents the current component key


    this.route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname1); // set up the component cache (by route keys)

    this.components = {}; // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.

    if (pathname1 !== '/_error') {
      this.components[this.route] = {
        Component: Component1,
        initial: true,
        props: initialProps,
        err: err1,
        __N_SSG: initialProps && initialProps.__N_SSG,
        __N_SSP: initialProps && initialProps.__N_SSP
      };
    }

    this.components['/_app'] = {
      Component: App,
      styleSheets: []
    }; // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented

    this.events = Router.events;
    this.pageLoader = pageLoader;
    this.pathname = pathname1;
    this.query = query1; // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch

    var autoExportDynamic = (0, _isDynamic).isDynamicRoute(pathname1) && self.__NEXT_DATA__.autoExport;

    this.asPath = autoExportDynamic ? pathname1 : as1;
    this.basePath = basePath;
    this.sub = subscription;
    this.clc = null;
    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating
    // back from external site

    this.isSsr = true;
    this.isFallback = isFallback;
    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !false);
    this.isPreview = !!isPreview;
    this.isLocaleDomain = false;

    if (false) {}

    if (true) {
      // make sure "as" doesn't start with double slashes or else it can
      // throw an error as it's considered invalid
      if (as1.substr(0, 2) !== '//') {
        // in order for `e.state` to work on the `onpopstate` event
        // we have to register the initial route upon initialization
        var options = {
          locale: locale
        };
        options._shouldResolveHref = as1 !== pathname1;
        this.changeState('replaceState', (0, _utils).formatWithValidation({
          pathname: addBasePath(pathname1),
          query: query1
        }), (0, _utils).getURL(), options);
      }

      window.addEventListener('popstate', this.onPopState); // enable custom scroll restoration handling when available
      // otherwise fallback to browser's default handling

      if (false) {}
    }
  }

  _createClass(Router, [{
    key: "reload",
    value: function reload() {
      window.location.reload();
    }
    /**
    * Go back in history
    */

  }, {
    key: "back",
    value: function back() {
      window.history.back();
    }
    /**
    * Performs a `pushState` with arguments
    * @param url of the route
    * @param as masks `url` for the browser
    * @param options object you can define `shallow` and other options
    */

  }, {
    key: "push",
    value: function push(url, as) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (false) {}

      var _prepareUrlAs = prepareUrlAs(this, url, as);

      url = _prepareUrlAs.url;
      as = _prepareUrlAs.as;
      return this.change('pushState', url, as, options);
    }
    /**
    * Performs a `replaceState` with arguments
    * @param url of the route
    * @param as masks `url` for the browser
    * @param options object you can define `shallow` and other options
    */

  }, {
    key: "replace",
    value: function replace(url, as) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var _prepareUrlAs2 = prepareUrlAs(this, url, as);

      url = _prepareUrlAs2.url;
      as = _prepareUrlAs2.as;
      return this.change('replaceState', url, as, options);
    }
  }, {
    key: "change",
    value: function () {
      var _change = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, url, as, options, forcedScroll) {
        var shouldResolveHref, prevLocale, parsedAs, localePathResult, didNavigate, ref, detectedDomain, asNoBasePath, _options$shallow, shallow, routeProps, cleanedAs, localeChange, parsed, pathname1, query1, pages, rewrites, _yield$getClientBuild, resolvedAs, rewritesResult, route, _parsedAs, asPathname, routeRegex, routeMatch, shouldInterpolate, interpolatedAs, missingParams, ref1, routeInfo, _routeInfo, error, props, __N_SSG, __N_SSP, destination, parsedHref, _prepareUrlAs3, newUrl, newAs, notFoundRoute, appComp, isValidShallowRoute, _scroll, shouldScroll, resetScroll;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (isLocalURL(url)) {
                  _context.next = 3;
                  break;
                }

                window.location.href = url;
                return _context.abrupt("return", false);

              case 3:
                shouldResolveHref = url === as || options._h || options._shouldResolveHref; // for static pages with query params in the URL we delay
                // marking the router ready until after the query is updated

                if (options._h) {
                  this.isReady = true;
                }

                prevLocale = this.locale;

                if (true) {
                  _context.next = 18;
                  break;
                }

                this.locale = options.locale === false ? this.defaultLocale : options.locale || this.locale;

                if (typeof options.locale === 'undefined') {
                  options.locale = this.locale;
                }

                parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(hasBasePath(as) ? delBasePath(as) : as);
                localePathResult = (0, _normalizeLocalePath).normalizeLocalePath(parsedAs.pathname, this.locales);

                if (localePathResult.detectedLocale) {
                  this.locale = localePathResult.detectedLocale;
                  parsedAs.pathname = addBasePath(parsedAs.pathname);
                  as = (0, _utils).formatWithValidation(parsedAs);
                  url = addBasePath((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(url) ? delBasePath(url) : url, this.locales).pathname);
                }

                didNavigate = false; // we need to wrap this in the env check again since regenerator runtime
                // moves this on its own due to the return

                if (false) {}

                detectedDomain = detectDomainLocale(this.domainLocales, undefined, this.locale); // we need to wrap this in the env check again since regenerator runtime
                // moves this on its own due to the return

                if (false) {}

                if (!didNavigate) {
                  _context.next = 18;
                  break;
                }

                return _context.abrupt("return", new Promise(function () {}));

              case 18:
                if (!options._h) {
                  this.isSsr = false;
                } // marking route changes as a navigation start entry


                if (_utils.ST) {
                  performance.mark('routeChange');
                }

                _options$shallow = options.shallow, shallow = _options$shallow === void 0 ? false : _options$shallow;
                routeProps = {
                  shallow: shallow
                };

                if (this._inFlightRoute) {
                  this.abortComponentLoad(this._inFlightRoute, routeProps);
                }

                as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));
                cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);
                this._inFlightRoute = as;
                localeChange = prevLocale !== this.locale; // If the url change is only related to a hash change
                // We should not proceed. We should only change the state.
                // WARNING: `_h` is an internal option for handing Next.js client-side
                // hydration. Your app should _never_ use this property. It may change at
                // any time without notice.

                if (!(!options._h && this.onlyAHashChange(cleanedAs) && !localeChange)) {
                  _context.next = 35;
                  break;
                }

                this.asPath = cleanedAs;
                Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?

                this.changeState(method, url, as, options);
                this.scrollToHash(cleanedAs);
                this.notify(this.components[this.route], null);
                Router.events.emit('hashChangeComplete', as, routeProps);
                return _context.abrupt("return", true);

              case 35:
                parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);
                pathname1 = parsed.pathname, query1 = parsed.query; // The build manifest needs to be loaded before auto-static dynamic pages
                // get their query parameters to allow ensuring they can be parsed properly
                // when rewritten to

                _context.prev = 37;
                _context.next = 40;
                return this.pageLoader.getPageList();

              case 40:
                pages = _context.sent;
                _context.next = 43;
                return (0, _routeLoader).getClientBuildManifest();

              case 43:
                _yield$getClientBuild = _context.sent;
                rewrites = _yield$getClientBuild.__rewrites;
                _context.next = 51;
                break;

              case 47:
                _context.prev = 47;
                _context.t0 = _context["catch"](37);
                // If we fail to resolve the page list or client-build manifest, we must
                // do a server-side transition:
                window.location.href = as;
                return _context.abrupt("return", false);

              case 51:
                // If asked to change the current URL we should reload the current page
                // (not location.reload() but reload getInitialProps and other Next.js stuffs)
                // We also need to set the method = replaceState always
                // as this should not go into the history (That's how browsers work)
                // We should compare the new asPath to the current asPath, not the url
                if (!this.urlIsNew(cleanedAs) && !localeChange) {
                  method = 'replaceState';
                } // we need to resolve the as value using rewrites for dynamic SSG
                // pages to allow building the data URL correctly


                resolvedAs = as; // url and as should always be prefixed with basePath by this
                // point by either next/link or router.push/replace so strip the
                // basePath from the pathname to match the pages dir 1-to-1

                pathname1 = pathname1 ? (0, _normalizeTrailingSlash).removePathTrailingSlash(delBasePath(pathname1)) : pathname1;

                if (shouldResolveHref && pathname1 !== '/_error') {
                  options._shouldResolveHref = true;

                  if (false) {} else {
                    parsed.pathname = resolveDynamicRoute(pathname1, pages);

                    if (parsed.pathname !== pathname1) {
                      pathname1 = parsed.pathname;
                      parsed.pathname = addBasePath(pathname1);
                      url = (0, _utils).formatWithValidation(parsed);
                    }
                  }
                }

                route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname1);

                if (isLocalURL(as)) {
                  _context.next = 61;
                  break;
                }

                if (false) {}

                throw new Error("Invalid href: \"".concat(url, "\" and as: \"").concat(as, "\", received relative href and external as") + "\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as");

              case 59:
                window.location.href = as;
                return _context.abrupt("return", false);

              case 61:
                resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);

                if (!(0, _isDynamic).isDynamicRoute(route)) {
                  _context.next = 77;
                  break;
                }

                _parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(resolvedAs);
                asPathname = _parsedAs.pathname;
                routeRegex = (0, _routeRegex).getRouteRegex(route);
                routeMatch = (0, _routeMatcher).getRouteMatcher(routeRegex)(asPathname);
                shouldInterpolate = route === asPathname;
                interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query1) : {};

                if (!(!routeMatch || shouldInterpolate && !interpolatedAs.result)) {
                  _context.next = 76;
                  break;
                }

                missingParams = Object.keys(routeRegex.groups).filter(function (param) {
                  return !query1[param];
                });

                if (!(missingParams.length > 0)) {
                  _context.next = 74;
                  break;
                }

                if (true) {
                  console.warn("".concat(shouldInterpolate ? "Interpolating href" : "Mismatching `as` and `href`", " failed to manually provide ") + "the params: ".concat(missingParams.join(', '), " in the `href`'s `query`"));
                }

                throw new Error((shouldInterpolate ? "The provided `href` (".concat(url, ") value is missing query values (").concat(missingParams.join(', '), ") to be interpolated properly. ") : "The provided `as` value (".concat(asPathname, ") is incompatible with the `href` value (").concat(route, "). ")) + "Read more: https://nextjs.org/docs/messages/".concat(shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'));

              case 74:
                _context.next = 77;
                break;

              case 76:
                if (shouldInterpolate) {
                  as = (0, _utils).formatWithValidation(Object.assign({}, _parsedAs, {
                    pathname: interpolatedAs.result,
                    query: omitParmsFromQuery(query1, interpolatedAs.params)
                  }));
                } else {
                  // Merge params into `query`, overwriting any specified in search
                  Object.assign(query1, routeMatch);
                }

              case 77:
                Router.events.emit('routeChangeStart', as, routeProps);
                _context.prev = 78;
                _context.next = 81;
                return this.getRouteInfo(route, pathname1, query1, as, resolvedAs, routeProps);

              case 81:
                routeInfo = _context.sent;
                _routeInfo = routeInfo, error = _routeInfo.error, props = _routeInfo.props, __N_SSG = _routeInfo.__N_SSG, __N_SSP = _routeInfo.__N_SSP; // handle redirect on client-transition

                if (!((__N_SSG || __N_SSP) && props)) {
                  _context.next = 107;
                  break;
                }

                if (!(props.pageProps && props.pageProps.__N_REDIRECT)) {
                  _context.next = 93;
                  break;
                }

                destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt
                // client-navigation if it is falling back to hard navigation if
                // it's not

                if (!destination.startsWith('/')) {
                  _context.next = 91;
                  break;
                }

                parsedHref = (0, _parseRelativeUrl).parseRelativeUrl(destination);
                parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);
                _prepareUrlAs3 = prepareUrlAs(this, destination, destination), newUrl = _prepareUrlAs3.url, newAs = _prepareUrlAs3.as;
                return _context.abrupt("return", this.change(method, newUrl, newAs, options));

              case 91:
                window.location.href = destination;
                return _context.abrupt("return", new Promise(function () {}));

              case 93:
                this.isPreview = !!props.__N_PREVIEW; // handle SSG data 404

                if (!(props.notFound === SSG_DATA_NOT_FOUND)) {
                  _context.next = 107;
                  break;
                }

                _context.prev = 95;
                _context.next = 98;
                return this.fetchComponent('/404');

              case 98:
                notFoundRoute = '/404';
                _context.next = 104;
                break;

              case 101:
                _context.prev = 101;
                _context.t1 = _context["catch"](95);
                notFoundRoute = '/_error';

              case 104:
                _context.next = 106;
                return this.getRouteInfo(notFoundRoute, notFoundRoute, query1, as, resolvedAs, {
                  shallow: false
                });

              case 106:
                routeInfo = _context.sent;

              case 107:
                Router.events.emit('beforeHistoryChange', as, routeProps);
                this.changeState(method, url, as, options);

                if (true) {
                  appComp = this.components['/_app'].Component;
                  window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;
                }

                if (options._h && pathname1 === '/_error' && ((ref = self.__NEXT_DATA__.props) === null || ref === void 0 ? void 0 : (ref1 = ref.pageProps) === null || ref1 === void 0 ? void 0 : ref1.statusCode) === 500 && (props === null || props === void 0 ? void 0 : props.pageProps)) {
                  // ensure statusCode is still correct for static 500 page
                  // when updating query information
                  props.pageProps.statusCode = 500;
                } // shallow routing is only allowed for same page URL changes.


                isValidShallowRoute = options.shallow && this.route === route;
                shouldScroll = (_scroll = options.scroll) !== null && _scroll !== void 0 ? _scroll : !isValidShallowRoute;
                resetScroll = shouldScroll ? {
                  x: 0,
                  y: 0
                } : null;
                _context.next = 116;
                return this.set(route, pathname1, query1, cleanedAs, routeInfo, forcedScroll !== null && forcedScroll !== void 0 ? forcedScroll : resetScroll)["catch"](function (e) {
                  if (e.cancelled) error = error || e;else throw e;
                });

              case 116:
                if (!error) {
                  _context.next = 119;
                  break;
                }

                Router.events.emit('routeChangeError', error, cleanedAs, routeProps);
                throw error;

              case 119:
                if (false) {}

                Router.events.emit('routeChangeComplete', as, routeProps);
                return _context.abrupt("return", true);

              case 124:
                _context.prev = 124;
                _context.t2 = _context["catch"](78);

                if (!_context.t2.cancelled) {
                  _context.next = 128;
                  break;
                }

                return _context.abrupt("return", false);

              case 128:
                throw _context.t2;

              case 129:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[37, 47], [78, 124], [95, 101]]);
      }));

      function change(_x, _x2, _x3, _x4, _x5) {
        return _change.apply(this, arguments);
      }

      return change;
    }()
  }, {
    key: "changeState",
    value: function changeState(method, url, as) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      if (true) {
        if (typeof window.history === 'undefined') {
          console.error("Warning: window.history is not available.");
          return;
        }

        if (typeof window.history[method] === 'undefined') {
          console.error("Warning: window.history.".concat(method, " is not available"));
          return;
        }
      }

      if (method !== 'pushState' || (0, _utils).getURL() !== as) {
        this._shallow = options.shallow;
        window.history[method]({
          url: url,
          as: as,
          options: options,
          __N: true,
          idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1
        }, // Most browsers currently ignores this parameter, although they may use it in the future.
        // Passing the empty string here should be safe against future changes to the method.
        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState
        '', as);
      }
    }
  }, {
    key: "handleRouteInfoError",
    value: function () {
      var _handleRouteInfoError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(err, pathname, query, as, routeProps, loadErrorFail) {
        var Component1, styleSheets, props, _yield$this$fetchComp, routeInfo;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!err.cancelled) {
                  _context2.next = 2;
                  break;
                }

                throw err;

              case 2:
                if (!((0, _routeLoader).isAssetError(err) || loadErrorFail)) {
                  _context2.next = 6;
                  break;
                }

                Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons
                //  1. Page doesn't exists
                //  2. Page does exist in a different zone
                //  3. Internal error while loading the page
                // So, doing a hard reload is the proper way to deal with this.

                window.location.href = as; // Changing the URL doesn't block executing the current code path.
                // So let's throw a cancellation error stop the routing logic.

                throw buildCancellationError();

              case 6:
                _context2.prev = 6;

                if (!(typeof Component1 === 'undefined' || typeof styleSheets === 'undefined')) {
                  _context2.next = 13;
                  break;
                }

                _context2.next = 10;
                return this.fetchComponent('/_error');

              case 10:
                _yield$this$fetchComp = _context2.sent;
                Component1 = _yield$this$fetchComp.page;
                styleSheets = _yield$this$fetchComp.styleSheets;

              case 13:
                routeInfo = {
                  props: props,
                  Component: Component1,
                  styleSheets: styleSheets,
                  err: err,
                  error: err
                };

                if (routeInfo.props) {
                  _context2.next = 25;
                  break;
                }

                _context2.prev = 15;
                _context2.next = 18;
                return this.getInitialProps(Component1, {
                  err: err,
                  pathname: pathname,
                  query: query
                });

              case 18:
                routeInfo.props = _context2.sent;
                _context2.next = 25;
                break;

              case 21:
                _context2.prev = 21;
                _context2.t0 = _context2["catch"](15);
                console.error('Error in error page `getInitialProps`: ', _context2.t0);
                routeInfo.props = {};

              case 25:
                return _context2.abrupt("return", routeInfo);

              case 28:
                _context2.prev = 28;
                _context2.t1 = _context2["catch"](6);
                return _context2.abrupt("return", this.handleRouteInfoError(_context2.t1, pathname, query, as, routeProps, true));

              case 31:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[6, 28], [15, 21]]);
      }));

      function handleRouteInfoError(_x6, _x7, _x8, _x9, _x10, _x11) {
        return _handleRouteInfoError.apply(this, arguments);
      }

      return handleRouteInfoError;
    }()
  }, {
    key: "getRouteInfo",
    value: function () {
      var _getRouteInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(route, pathname, query, as, resolvedAs, routeProps) {
        var _this2 = this;

        var existingRouteInfo, cachedRouteInfo, routeInfo, Component1, __N_SSG, __N_SSP, _require, isValidElementType, dataHref, props;

        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                existingRouteInfo = this.components[route];

                if (!(routeProps.shallow && existingRouteInfo && this.route === route)) {
                  _context3.next = 4;
                  break;
                }

                return _context3.abrupt("return", existingRouteInfo);

              case 4:
                cachedRouteInfo = existingRouteInfo && 'initial' in existingRouteInfo ? undefined : existingRouteInfo;

                if (!cachedRouteInfo) {
                  _context3.next = 9;
                  break;
                }

                _context3.t0 = cachedRouteInfo;
                _context3.next = 12;
                break;

              case 9:
                _context3.next = 11;
                return this.fetchComponent(route).then(function (res) {
                  return {
                    Component: res.page,
                    styleSheets: res.styleSheets,
                    __N_SSG: res.mod.__N_SSG,
                    __N_SSP: res.mod.__N_SSP
                  };
                });

              case 11:
                _context3.t0 = _context3.sent;

              case 12:
                routeInfo = _context3.t0;
                Component1 = routeInfo.Component, __N_SSG = routeInfo.__N_SSG, __N_SSP = routeInfo.__N_SSP;

                if (false) {}

                _require = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js"), isValidElementType = _require.isValidElementType;

                if (isValidElementType(Component1)) {
                  _context3.next = 18;
                  break;
                }

                throw new Error("The default export is not a React Component in page: \"".concat(pathname, "\""));

              case 18:
                if (__N_SSG || __N_SSP) {
                  dataHref = this.pageLoader.getDataHref((0, _utils).formatWithValidation({
                    pathname: pathname,
                    query: query
                  }), resolvedAs, __N_SSG, this.locale);
                }

                _context3.next = 21;
                return this._getData(function () {
                  return __N_SSG ? _this2._getStaticData(dataHref) : __N_SSP ? _this2._getServerData(dataHref) : _this2.getInitialProps(Component1, // we provide AppTree later so this needs to be `any`
                  {
                    pathname: pathname,
                    query: query,
                    asPath: as,
                    locale: _this2.locale,
                    locales: _this2.locales,
                    defaultLocale: _this2.defaultLocale
                  });
                });

              case 21:
                props = _context3.sent;
                routeInfo.props = props;
                this.components[route] = routeInfo;
                return _context3.abrupt("return", routeInfo);

              case 27:
                _context3.prev = 27;
                _context3.t1 = _context3["catch"](0);
                return _context3.abrupt("return", this.handleRouteInfoError(_context3.t1, pathname, query, as, routeProps));

              case 30:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[0, 27]]);
      }));

      function getRouteInfo(_x12, _x13, _x14, _x15, _x16, _x17) {
        return _getRouteInfo.apply(this, arguments);
      }

      return getRouteInfo;
    }()
  }, {
    key: "set",
    value: function set(route, pathname, query, as, data, resetScroll) {
      this.isFallback = false;
      this.route = route;
      this.pathname = pathname;
      this.query = query;
      this.asPath = as;
      return this.notify(data, resetScroll);
    }
    /**
    * Callback to execute before replacing router state
    * @param cb callback to be executed
    */

  }, {
    key: "beforePopState",
    value: function beforePopState(cb) {
      this._bps = cb;
    }
  }, {
    key: "onlyAHashChange",
    value: function onlyAHashChange(as) {
      if (!this.asPath) return false;

      var _this$asPath$split = this.asPath.split('#'),
          _this$asPath$split2 = _slicedToArray(_this$asPath$split, 2),
          oldUrlNoHash = _this$asPath$split2[0],
          oldHash = _this$asPath$split2[1];

      var _as$split = as.split('#'),
          _as$split2 = _slicedToArray(_as$split, 2),
          newUrlNoHash = _as$split2[0],
          newHash = _as$split2[1]; // Makes sure we scroll to the provided hash if the url/hash are the same


      if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {
        return true;
      } // If the urls are change, there's more than a hash change


      if (oldUrlNoHash !== newUrlNoHash) {
        return false;
      } // If the hash has changed, then it's a hash only change.
      // This check is necessary to handle both the enter and
      // leave hash === '' cases. The identity case falls through
      // and is treated as a next reload.


      return oldHash !== newHash;
    }
  }, {
    key: "scrollToHash",
    value: function scrollToHash(as) {
      var _as$split3 = as.split('#'),
          _as$split4 = _slicedToArray(_as$split3, 2),
          hash = _as$split4[1]; // Scroll to top if the hash is just `#` with no value or `#top`
      // To mirror browsers


      if (hash === '' || hash === 'top') {
        window.scrollTo(0, 0);
        return;
      } // First we check if the element by id is found


      var idEl = document.getElementById(hash);

      if (idEl) {
        idEl.scrollIntoView();
        return;
      } // If there's no element with the id, we check the `name` property
      // To mirror browsers


      var nameEl = document.getElementsByName(hash)[0];

      if (nameEl) {
        nameEl.scrollIntoView();
      }
    }
  }, {
    key: "urlIsNew",
    value: function urlIsNew(asPath) {
      return this.asPath !== asPath;
    }
    /**
    * Prefetch page code, you may wait for the data during page rendering.
    * This feature only works in production!
    * @param url the href of prefetched page
    * @param asPath the as path of the prefetched page
    */

  }, {
    key: "prefetch",
    value: function () {
      var _prefetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(url) {
        var _this3 = this;

        var asPath,
            options,
            parsed,
            pathname2,
            parsedAs,
            localePathResult,
            pages,
            resolvedAs,
            rewrites,
            _yield$getClientBuild2,
            rewritesResult,
            route,
            _args4 = arguments;

        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                asPath = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : url;
                options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};
                parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);
                pathname2 = parsed.pathname;

                if (false) {}

                _context4.next = 7;
                return this.pageLoader.getPageList();

              case 7:
                pages = _context4.sent;
                resolvedAs = asPath;

                if (true) {
                  _context4.next = 19;
                  break;
                }

                _context4.next = 12;
                return (0, _routeLoader).getClientBuildManifest();

              case 12:
                _yield$getClientBuild2 = _context4.sent;
                rewrites = _yield$getClientBuild2.__rewrites;
                rewritesResult = (0, _resolveRewrites)["default"](addBasePath(addLocale(asPath, this.locale)), pages, rewrites, parsed.query, function (p) {
                  return resolveDynamicRoute(p, pages);
                }, this.locales);
                resolvedAs = delLocale(delBasePath(rewritesResult.asPath), this.locale);

                if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {
                  // if this directly matches a page we need to update the href to
                  // allow the correct page chunk to be loaded
                  pathname2 = rewritesResult.resolvedHref;
                  parsed.pathname = pathname2;
                  url = (0, _utils).formatWithValidation(parsed);
                }

                _context4.next = 21;
                break;

              case 19:
                parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);

                if (parsed.pathname !== pathname2) {
                  pathname2 = parsed.pathname;
                  parsed.pathname = pathname2;
                  url = (0, _utils).formatWithValidation(parsed);
                }

              case 21:
                route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname2); // Prefetch is not supported in development mode because it would trigger on-demand-entries

                if (false) {}

                return _context4.abrupt("return");

              case 24:
                _context4.next = 26;
                return Promise.all([this.pageLoader._isSsg(route).then(function (isSsg) {
                  return isSsg ? _this3._getStaticData(_this3.pageLoader.getDataHref(url, resolvedAs, true, typeof options.locale !== 'undefined' ? options.locale : _this3.locale)) : false;
                }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);

              case 26:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function prefetch(_x18) {
        return _prefetch.apply(this, arguments);
      }

      return prefetch;
    }()
  }, {
    key: "fetchComponent",
    value: function () {
      var _fetchComponent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(route) {
        var cancelled, cancel, componentResult, error;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                cancelled = false;

                cancel = this.clc = function () {
                  cancelled = true;
                };

                _context5.next = 4;
                return this.pageLoader.loadPage(route);

              case 4:
                componentResult = _context5.sent;

                if (!cancelled) {
                  _context5.next = 9;
                  break;
                }

                error = new Error("Abort fetching component for route: \"".concat(route, "\""));
                error.cancelled = true;
                throw error;

              case 9:
                if (cancel === this.clc) {
                  this.clc = null;
                }

                return _context5.abrupt("return", componentResult);

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function fetchComponent(_x19) {
        return _fetchComponent.apply(this, arguments);
      }

      return fetchComponent;
    }()
  }, {
    key: "_getData",
    value: function _getData(fn) {
      var _this4 = this;

      var cancelled = false;

      var cancel = function cancel() {
        cancelled = true;
      };

      this.clc = cancel;
      return fn().then(function (data) {
        if (cancel === _this4.clc) {
          _this4.clc = null;
        }

        if (cancelled) {
          var err2 = new Error('Loading initial props cancelled');
          err2.cancelled = true;
          throw err2;
        }

        return data;
      });
    }
  }, {
    key: "_getStaticData",
    value: function _getStaticData(dataHref) {
      var _this5 = this;

      var _URL = new URL(dataHref, window.location.href),
          cacheKey = _URL.href;

      if (false) {}

      return fetchNextData(dataHref, this.isSsr).then(function (data) {
        _this5.sdc[cacheKey] = data;
        return data;
      });
    }
  }, {
    key: "_getServerData",
    value: function _getServerData(dataHref) {
      var _this6 = this;

      var _URL2 = new URL(dataHref, window.location.href),
          resourceKey = _URL2.href;

      if (this.sdr[resourceKey]) {
        return this.sdr[resourceKey];
      }

      return this.sdr[resourceKey] = fetchNextData(dataHref, this.isSsr).then(function (data) {
        delete _this6.sdr[resourceKey];
        return data;
      })["catch"](function (err2) {
        delete _this6.sdr[resourceKey];
        throw err2;
      });
    }
  }, {
    key: "getInitialProps",
    value: function getInitialProps(Component, ctx) {
      var App1 = this.components['/_app'].Component;

      var AppTree = this._wrapApp(App1);

      ctx.AppTree = AppTree;
      return (0, _utils).loadGetInitialProps(App1, {
        AppTree: AppTree,
        Component: Component,
        router: this,
        ctx: ctx
      });
    }
  }, {
    key: "abortComponentLoad",
    value: function abortComponentLoad(as, routeProps) {
      if (this.clc) {
        Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);
        this.clc();
        this.clc = null;
      }
    }
  }, {
    key: "notify",
    value: function notify(data, resetScroll) {
      return this.sub(data, this.components['/_app'].Component, resetScroll);
    }
  }]);

  return Router;
}();

Router.events = (0, _mitt)["default"]();
exports.default = Router;

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router/utils/format-url.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/format-url.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.formatUrl = formatUrl;

var querystring = _interopRequireWildcard(__webpack_require__(/*! ./querystring */ "./node_modules/next/dist/shared/lib/router/utils/querystring.js"));

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj["default"] = obj;
    return newObj;
  }
}

var slashedProtocols = /https?|ftp|gopher|file/;

function formatUrl(urlObj) {
  var auth = urlObj.auth,
      hostname = urlObj.hostname;
  var protocol = urlObj.protocol || '';
  var pathname = urlObj.pathname || '';
  var hash = urlObj.hash || '';
  var query = urlObj.query || '';
  var host = false;
  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';

  if (urlObj.host) {
    host = auth + urlObj.host;
  } else if (hostname) {
    host = auth + (~hostname.indexOf(':') ? "[".concat(hostname, "]") : hostname);

    if (urlObj.port) {
      host += ':' + urlObj.port;
    }
  }

  if (query && typeof query === 'object') {
    query = String(querystring.urlQueryToSearchParams(query));
  }

  var search = urlObj.search || query && "?".concat(query) || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname[0] !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash[0] !== '#') hash = '#' + hash;
  if (search && search[0] !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, encodeURIComponent);
  search = search.replace('#', '%23');
  return "".concat(protocol).concat(host).concat(pathname).concat(search).concat(hash);
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router/utils/get-asset-path-from-route.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/get-asset-path-from-route.js ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = getAssetPathFromRoute;

function getAssetPathFromRoute(route) {
  var ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var path = route === '/' ? '/index' : /^\/index(\/|$)/.test(route) ? "/index".concat(route) : "".concat(route);
  return path + ext;
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isDynamicRoute = isDynamicRoute; // Identify /[param]/ in route string

var TEST_ROUTE = /\/\[[^/]+?\](?=\/|$)/;

function isDynamicRoute(route) {
  return TEST_ROUTE.test(route);
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router/utils/parse-relative-url.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/parse-relative-url.js ***!
  \******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.parseRelativeUrl = parseRelativeUrl;

var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/next/dist/shared/lib/utils.js");

var _querystring = __webpack_require__(/*! ./querystring */ "./node_modules/next/dist/shared/lib/router/utils/querystring.js");

function parseRelativeUrl(url, base) {
  var globalBase = new URL( false ? 0 : (0, _utils).getLocationOrigin());
  var resolvedBase = base ? new URL(base, globalBase) : globalBase;

  var _URL = new URL(url, resolvedBase),
      pathname = _URL.pathname,
      searchParams = _URL.searchParams,
      search = _URL.search,
      hash = _URL.hash,
      href = _URL.href,
      origin = _URL.origin;

  if (origin !== globalBase.origin) {
    throw new Error("invariant: invalid relative URL, router received ".concat(url));
  }

  return {
    pathname: pathname,
    query: (0, _querystring).searchParamsToUrlQuery(searchParams),
    search: search,
    hash: hash,
    href: href.slice(globalBase.origin.length)
  };
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router/utils/querystring.js":
/*!***********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/querystring.js ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


var _slicedToArray = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.searchParamsToUrlQuery = searchParamsToUrlQuery;
exports.urlQueryToSearchParams = urlQueryToSearchParams;
exports.assign = assign;

function searchParamsToUrlQuery(searchParams) {
  var query = {};
  searchParams.forEach(function (value, key) {
    if (typeof query[key] === 'undefined') {
      query[key] = value;
    } else if (Array.isArray(query[key])) {
      query[key].push(value);
    } else {
      query[key] = [query[key], value];
    }
  });
  return query;
}

function stringifyUrlQueryParam(param) {
  if (typeof param === 'string' || typeof param === 'number' && !isNaN(param) || typeof param === 'boolean') {
    return String(param);
  } else {
    return '';
  }
}

function urlQueryToSearchParams(urlQuery) {
  var result = new URLSearchParams();
  Object.entries(urlQuery).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    if (Array.isArray(value)) {
      value.forEach(function (item) {
        return result.append(key, stringifyUrlQueryParam(item));
      });
    } else {
      result.set(key, stringifyUrlQueryParam(value));
    }
  });
  return result;
}

function assign(target) {
  for (var _len = arguments.length, searchParamsList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    searchParamsList[_key - 1] = arguments[_key];
  }

  searchParamsList.forEach(function (searchParams) {
    Array.from(searchParams.keys()).forEach(function (key) {
      return target["delete"](key);
    });
    searchParams.forEach(function (value, key) {
      return target.append(key, value);
    });
  });
  return target;
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router/utils/route-matcher.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/route-matcher.js ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getRouteMatcher = getRouteMatcher;

var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/next/dist/shared/lib/utils.js");

function getRouteMatcher(routeRegex) {
  var re = routeRegex.re,
      groups = routeRegex.groups;
  return function (pathname) {
    var routeMatch = re.exec(pathname);

    if (!routeMatch) {
      return false;
    }

    var decode = function decode(param) {
      try {
        return decodeURIComponent(param);
      } catch (_) {
        throw new _utils.DecodeError('failed to decode param');
      }
    };

    var params = {};
    Object.keys(groups).forEach(function (slugName) {
      var g = groups[slugName];
      var m = routeMatch[g.pos];

      if (m !== undefined) {
        params[slugName] = ~m.indexOf('/') ? m.split('/').map(function (entry) {
          return decode(entry);
        }) : g.repeat ? [decode(m)] : decode(m);
      }
    });
    return params;
  };
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router/utils/route-regex.js":
/*!***********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/route-regex.js ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getParametrizedRoute = getParametrizedRoute;
exports.getRouteRegex = getRouteRegex; // this isn't importing the escape-string-regex module
// to reduce bytes

function escapeRegex(str) {
  return str.replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&');
}

function parseParameter(param) {
  var optional = param.startsWith('[') && param.endsWith(']');

  if (optional) {
    param = param.slice(1, -1);
  }

  var repeat = param.startsWith('...');

  if (repeat) {
    param = param.slice(3);
  }

  return {
    key: param,
    repeat: repeat,
    optional: optional
  };
}

function getParametrizedRoute(route) {
  var segments = (route.replace(/\/$/, '') || '/').slice(1).split('/');
  var groups = {};
  var groupIndex = 1;
  var parameterizedRoute = segments.map(function (segment) {
    if (segment.startsWith('[') && segment.endsWith(']')) {
      var _parseParameter = parseParameter(segment.slice(1, -1)),
          key = _parseParameter.key,
          optional = _parseParameter.optional,
          repeat = _parseParameter.repeat;

      groups[key] = {
        pos: groupIndex++,
        repeat: repeat,
        optional: optional
      };
      return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';
    } else {
      return "/".concat(escapeRegex(segment));
    }
  }).join(''); // dead code eliminate for browser since it's only needed
  // while generating routes-manifest

  if (false) { var namedParameterizedRoute, routeKeys, getSafeRouteKey, routeKeyCharLength, routeKeyCharCode; }

  return {
    parameterizedRoute: parameterizedRoute,
    groups: groups
  };
}

function getRouteRegex(normalizedRoute) {
  var result = getParametrizedRoute(normalizedRoute);

  if ('routeKeys' in result) {
    return {
      re: new RegExp("^".concat(result.parameterizedRoute, "(?:/)?$")),
      groups: result.groups,
      routeKeys: result.routeKeys,
      namedRegex: "^".concat(result.namedParameterizedRoute, "(?:/)?$")
    };
  }

  return {
    re: new RegExp("^".concat(result.parameterizedRoute, "(?:/)?$")),
    groups: result.groups
  };
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/next/dist/shared/lib/utils.js":
/*!****************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/utils.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


var _regeneratorRuntime = __webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");

var _classCallCheck = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");

var _inherits = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");

var _possibleConstructorReturn = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");

var _getPrototypeOf = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");

var _wrapNativeSuper = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/wrapNativeSuper */ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js");

var _asyncToGenerator = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.execOnce = execOnce;
exports.getLocationOrigin = getLocationOrigin;
exports.getURL = getURL;
exports.getDisplayName = getDisplayName;
exports.isResSent = isResSent;
exports.normalizeRepeatedSlashes = normalizeRepeatedSlashes;
exports.loadGetInitialProps = loadGetInitialProps;
exports.formatWithValidation = formatWithValidation;
exports.ST = exports.SP = exports.urlObjectKeys = void 0;

var _formatUrl = __webpack_require__(/*! ./router/utils/format-url */ "./node_modules/next/dist/shared/lib/router/utils/format-url.js");

function execOnce(fn) {
  var used = false;
  var result;
  return function () {
    if (!used) {
      used = true;
      result = fn.apply(void 0, arguments);
    }

    return result;
  };
}

function getLocationOrigin() {
  var _window$location = window.location,
      protocol = _window$location.protocol,
      hostname = _window$location.hostname,
      port = _window$location.port;
  return "".concat(protocol, "//").concat(hostname).concat(port ? ':' + port : '');
}

function getURL() {
  var href = window.location.href;
  var origin = getLocationOrigin();
  return href.substring(origin.length);
}

function getDisplayName(Component) {
  return typeof Component === 'string' ? Component : Component.displayName || Component.name || 'Unknown';
}

function isResSent(res) {
  return res.finished || res.headersSent;
}

function normalizeRepeatedSlashes(url) {
  var urlParts = url.split('?');
  var urlNoQuery = urlParts[0];
  return urlNoQuery // first we replace any non-encoded backslashes with forward
  // then normalize repeated forward slashes
  .replace(/\\/g, '/').replace(/\/\/+/g, '/') + (urlParts[1] ? "?".concat(urlParts.slice(1).join('?')) : '');
}

function loadGetInitialProps(_x, _x2) {
  return _loadGetInitialProps.apply(this, arguments);
}

function _loadGetInitialProps() {
  _loadGetInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(App, ctx) {
    var ref, message, res, props, _message;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (false) {}

            if (!((ref = App.prototype) === null || ref === void 0 ? void 0 : ref.getInitialProps)) {
              _context.next = 4;
              break;
            }

            message = "\"".concat(getDisplayName(App), ".getInitialProps()\" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.");
            throw new Error(message);

          case 4:
            // when called from _app `ctx` is nested in `ctx`
            res = ctx.res || ctx.ctx && ctx.ctx.res;

            if (App.getInitialProps) {
              _context.next = 12;
              break;
            }

            if (!(ctx.ctx && ctx.Component)) {
              _context.next = 11;
              break;
            }

            _context.next = 9;
            return loadGetInitialProps(ctx.Component, ctx.ctx);

          case 9:
            _context.t0 = _context.sent;
            return _context.abrupt("return", {
              pageProps: _context.t0
            });

          case 11:
            return _context.abrupt("return", {});

          case 12:
            _context.next = 14;
            return App.getInitialProps(ctx);

          case 14:
            props = _context.sent;

            if (!(res && isResSent(res))) {
              _context.next = 17;
              break;
            }

            return _context.abrupt("return", props);

          case 17:
            if (props) {
              _context.next = 20;
              break;
            }

            _message = "\"".concat(getDisplayName(App), ".getInitialProps()\" should resolve to an object. But found \"").concat(props, "\" instead.");
            throw new Error(_message);

          case 20:
            if (true) {
              if (Object.keys(props).length === 0 && !ctx.ctx) {
                console.warn("".concat(getDisplayName(App), " returned an empty object from `getInitialProps`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps"));
              }
            }

            return _context.abrupt("return", props);

          case 22:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadGetInitialProps.apply(this, arguments);
}

var urlObjectKeys = ['auth', 'hash', 'host', 'hostname', 'href', 'path', 'pathname', 'port', 'protocol', 'query', 'search', 'slashes'];
exports.urlObjectKeys = urlObjectKeys;

function formatWithValidation(url) {
  if (true) {
    if (url !== null && typeof url === 'object') {
      Object.keys(url).forEach(function (key) {
        if (urlObjectKeys.indexOf(key) === -1) {
          console.warn("Unknown key passed via urlObject into url.format: ".concat(key));
        }
      });
    }
  }

  return (0, _formatUrl).formatUrl(url);
}

var SP = typeof performance !== 'undefined';
exports.SP = SP;
var ST = SP && typeof performance.mark === 'function' && typeof performance.measure === 'function';
exports.ST = ST;

var DecodeError = /*#__PURE__*/function (_Error) {
  _inherits(DecodeError, _Error);

  var _super = _createSuper(DecodeError);

  function DecodeError() {
    _classCallCheck(this, DecodeError);

    return _super.apply(this, arguments);
  }

  return DecodeError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

exports.DecodeError = DecodeError;

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");
/* harmony import */ var E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _components_colors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/colors */ "./components/colors");
/* harmony import */ var _styles_index_module_css__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../styles/index.module.css */ "./styles/index.module.css");
/* harmony import */ var _styles_index_module_css__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_styles_index_module_css__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var autoresponsive_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! autoresponsive-react */ "./node_modules/autoresponsive-react/dist/index.js");
/* harmony import */ var autoresponsive_react__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(autoresponsive_react__WEBPACK_IMPORTED_MODULE_11__);
/* module decorator */ module = __webpack_require__.hmd(module);








var _jsxFileName = "E:\\Projects\\Colorpunx\\nextjs\\pages\\index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }






var style = {
  cursor: 'default',
  color: '#514713',
  borderRadius: 5,
  boxShadow: '0 1px 0 rgba(255,255,255,0.5) inset',
  backgroundColor: '#FFFFF',
  borderColor: '#796b1d',
  lineHeight: '100px',
  fontWeight: 'bold',
  textShadow: '1px 1px 0px #ab9a3c',
  userSelect: 'none'
};

var Index = /*#__PURE__*/function (_React$Component) {
  (0,E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(Index, _React$Component);

  var _super = _createSuper(Index);

  function Index(props) {
    var _this;

    (0,E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, Index);

    _this = _super.call(this, props);
    _this.state = {
      bannerSource: '/images/colorpunx-banner.png',
      boxSize: 140
    };
    _this.containerDiv = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_9___default().createRef();
    _this.updateWindowDimensions = _this.updateWindowDimensions.bind((0,E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__.default)(_this));
    return _this;
  }

  (0,E_Projects_Colorpunx_nextjs_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(Index, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateWindowDimensions();
      window.addEventListener('resize', this.updateWindowDimensions);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.updateWindowDimensions);
    }
  }, {
    key: "updateWindowDimensions",
    value: function updateWindowDimensions() {
      if (window.innerWidth > 800) {
        this.setState({
          bannerSource: '/images/colorpunx-banner.png'
        });
      } else {
        this.setState({
          bannerSource: '/images/colorpunx-banner-scaled.jpg'
        });
      }

      console.log("width", window.innerWidth);
      console.log("rect", (window.innerWidth - 50) / 3);

      if (window.innerWidth < 550) {
        this.setState({
          boxSize: (window.innerWidth - 50) / 3
        });
      } else {
        this.setState({
          boxSize: 140
        });
      }
    }
  }, {
    key: "getAutoResponsiveProps",
    value: function getAutoResponsiveProps() {
      return {
        horizontalDirection: 'left',
        verticalDirection: 'top',
        itemMargin: 10,
        containerWidth: null,
        itemClassName: 'item',
        containerHeight: null,
        transitionDuration: '.8',
        transitionTimingFunction: 'easeIn'
      };
    }
  }, {
    key: "renderItems",
    value: function renderItems() {
      var _this2 = this;

      return Object.keys(_components_colors__WEBPACK_IMPORTED_MODULE_10__.default).map(function (k, i) {
        var data = _components_colors__WEBPACK_IMPORTED_MODULE_10__.default[k];
        return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
          className: "item",
          style: _objectSpread(_objectSpread({}, style), {}, {
            width: _this2.state.boxSize,
            height: _this2.state.boxSize
          }),
          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_8___default()), {
            href: "/colors/" + data.name.substring(1),
            style: {
              zIndex: 1
            },
            children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("img", {
              src: '/images/colors/colorpunx' + data.id + '.png',
              width: _this2.state.boxSize,
              height: _this2.state.boxSize
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 81,
              columnNumber: 7
            }, _this2)
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 80,
            columnNumber: 6
          }, _this2), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("span", {
            className: (_styles_index_module_css__WEBPACK_IMPORTED_MODULE_12___default().rectanglecolor),
            children: data.name
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 84,
            columnNumber: 6
          }, _this2)]
        }, i, true, {
          fileName: _jsxFileName,
          lineNumber: 78,
          columnNumber: 5
        }, _this2);
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("img", {
          src: this.state.bannerSource,
          width: "100%",
          height: "auto"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 94,
          columnNumber: 5
        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
          className: (_styles_index_module_css__WEBPACK_IMPORTED_MODULE_12___default().box),
          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
            className: (_styles_index_module_css__WEBPACK_IMPORTED_MODULE_12___default().textcontainer),
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
              className: (_styles_index_module_css__WEBPACK_IMPORTED_MODULE_12___default().p1),
              children: "Colorpunx"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 98,
              columnNumber: 7
            }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
              className: (_styles_index_module_css__WEBPACK_IMPORTED_MODULE_12___default().c1),
              children: "Monochromatic digital artworks built from the Cryptopunks color palette."
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 99,
              columnNumber: 7
            }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
              className: (_styles_index_module_css__WEBPACK_IMPORTED_MODULE_12___default().c2),
              children: ["ColorPunx are monochromatic NFT paintings sourced from the 222 unique", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("br", {}, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 100,
                columnNumber: 107
              }, this), "colors used in the Larvalabs Cryptopunks. They are the first piece ", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("br", {}, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 101,
                columnNumber: 75
              }, this), "in the lineage of quantitative art history of early NFT works with work", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("br", {}, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 102,
                columnNumber: 79
              }, this), "artifacts recorded on the blockchain.", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("br", {}, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 103,
                columnNumber: 45
              }, this), "The Colorpunx are not affiliated with Larvalabs."]
            }, void 0, true, {
              fileName: _jsxFileName,
              lineNumber: 100,
              columnNumber: 7
            }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
              className: (_styles_index_module_css__WEBPACK_IMPORTED_MODULE_12___default().b),
              children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
                className: (_styles_index_module_css__WEBPACK_IMPORTED_MODULE_12___default().p2),
                children: "The Colorpunx"
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 107,
                columnNumber: 8
              }, this)
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 106,
              columnNumber: 7
            }, this)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 97,
            columnNumber: 6
          }, this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 96,
          columnNumber: 5
        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
          ref: this.containerDiv,
          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((autoresponsive_react__WEBPACK_IMPORTED_MODULE_11___default()), _objectSpread(_objectSpread({
            ref: "container"
          }, this.getAutoResponsiveProps()), {}, {
            children: this.renderItems()
          }), void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 114,
            columnNumber: 6
          }, this)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 113,
          columnNumber: 5
        }, this)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 93,
        columnNumber: 4
      }, this);
    }
  }]);

  return Index;
}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));

/* harmony default export */ __webpack_exports__["default"] = (Index);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/autoresponsive-core/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/autoresponsive-core/dist/index.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports.GridSort = __webpack_require__(/*! ./sort */ "./node_modules/autoresponsive-core/dist/sort.js");

/***/ }),

/***/ "./node_modules/autoresponsive-core/dist/linkedlist.js":
/*!*************************************************************!*\
  !*** ./node_modules/autoresponsive-core/dist/linkedlist.js ***!
  \*************************************************************/
/***/ (function(module) {

"use strict";


var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var LinkedList = (function () {
  function LinkedList(cfg) {
    _classCallCheck(this, LinkedList);

    this.length = 0;
    this.head = null;
    this.tail = null;
    this.type = cfg.type || true;
    this.query = [];
  }

  _createClass(LinkedList, [{
    key: 'add',
    value: function add(value) {
      if (this.type) {
        this.query.push(value);
        return;
      }
      var node = {
        value: value,
        next: null,
        prev: null
      };
      if (this.length === 0) {
        this.head = this.tail = node;
      } else {
        this.tail.next = node;
        node.prev = this.tail;
        this.tail = node;
      }
      this.length++;
    }
  }, {
    key: 'remove',
    value: function remove(index) {
      if (index > this.length - 1 || index < 0) {
        return null;
      }
      var node = this.head;
      var i = 0;
      if (index === 0) {
        this.head = node.next;
        if (this.head == null) {
          this.tail = null;
        } else {
          this.head.previous = null;
        }
      } else if (index === this.length - 1) {
        node = this.tail;
        this.tail = node.prev;
        this.tail.next = null;
      } else {
        while (i++ < index) {
          node = node.next;
        }
        node.prev.next = node.next;
        node.next.prev = node.prev;
      }
      this.length--;
    }
  }, {
    key: 'get',
    value: function get(index) {
      if (this.type) {
        return this.query[index];
      }
      return this.node(index).value;
    }
  }, {
    key: 'node',
    value: function node(index) {
      if (index > this.length - 1 || index < 0) {
        return null;
      }
      var node = this.head;
      var i = 0;
      while (i++ < index) {
        node = node.next;
      }
      return node;
    }
  }, {
    key: 'update',
    value: function update(index, value) {
      if (this.type) {
        this.query[index] = value;
        return;
      }
      this.node(index).value = value;
    }
  }, {
    key: 'size',
    value: function size() {
      return this.query.length || this.length;
    }
  }]);

  return LinkedList;
})();

module.exports = LinkedList;

/***/ }),

/***/ "./node_modules/autoresponsive-core/dist/sort.js":
/*!*******************************************************!*\
  !*** ./node_modules/autoresponsive-core/dist/sort.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var LinkedList = __webpack_require__(/*! ./linkedlist */ "./node_modules/autoresponsive-core/dist/linkedlist.js");

var GridSort = (function () {
  function GridSort(options) {
    _classCallCheck(this, GridSort);

    this.containerWidth = options.containerWidth;
    this.gridWidth = options.gridWidth;
    this.init();
  }

  _createClass(GridSort, [{
    key: 'init',
    value: function init() {
      var curQuery = new LinkedList({});
      var span = Math.ceil(this.containerWidth / this.gridWidth);

      for (var i = 0; i < span; i++) {
        curQuery.add(0);
      }

      this.curQuery = curQuery;
    }
  }, {
    key: 'changeProps',
    value: function changeProps(props) {
      Object.assign(this, props);
    }
  }, {
    key: 'getPosition',
    value: function getPosition(width, height) {
      var num = Math.ceil(width / this.gridWidth);
      var cur = this.getCurrentPointer(num);

      for (var i = cur[0], len = num + cur[0], newH = cur[1] + height; i < len; i++) {
        this.curQuery.update(i, newH);
      }
      return [cur[0] * this.gridWidth, cur[1]];
    }
  }, {
    key: 'getCurrentPointer',
    value: function getCurrentPointer(num) {
      var min = Infinity;
      var idx = 0;
      var len = this.curQuery.size();

      for (var i = 0; i <= (len < num ? 0 : len - num); i++) {
        var max = -Infinity;
        var curValue = undefined;

        for (var j = 0; j < num; j++) {
          curValue = this.curQuery.get(i + j);

          if (curValue >= min) {
            i += j + 1;

            if (i > len - num) {
              max = min;
              break;
            }
            j = -1;
            max = -Infinity;
            continue;
          }

          if (curValue > max) {
            max = curValue;
          }
        }

        if (min > max) {
          min = max;
          idx = i;
        }
      }
      return [idx, min];
    }
  }]);

  return GridSort;
})();

module.exports = GridSort;

/***/ }),

/***/ "./node_modules/autoresponsive-react/dist/animation.js":
/*!*************************************************************!*\
  !*** ./node_modules/autoresponsive-react/dist/animation.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ExecutionEnvironment = __webpack_require__(/*! exenv */ "./node_modules/exenv/index.js");

function transitionEnd() {
  var transitionEndEventNames = {
    WebkitTransition: 'webkitTransitionEnd',
    MozTransition: 'transitionend',
    OTransition: 'oTransitionEnd otransitionend',
    transition: 'transitionend'
  };

  if (!ExecutionEnvironment.canUseDOM) {
    return transitionEndEventNames;
  }

  var el = document.createElement('pin');

  for (var name in transitionEndEventNames) {
    if (el.style[name] !== undefined) {
      return transitionEndEventNames[name];
    }
  }

  return false;
}

var ifHasTransitionEnd = transitionEnd();
var prefixes = ['Webkit', 'Moz', 'ms', 'O', ''];

var AnimationManager = function () {
  function AnimationManager() {
    _classCallCheck(this, AnimationManager);

    this.animationHandle = "css".concat(ifHasTransitionEnd ? 3 : 2, "Animation");
  }

  _createClass(AnimationManager, [{
    key: "generate",
    value: function generate(options) {
      Object.assign(this, options);
      return this[this.animationHandle]();
    }
  }, {
    key: "css2Animation",
    value: function css2Animation() {
      var style = {};
      style[this.horizontalDirection] = "".concat(this.position[0], "px");

      if (this.verticalDirection === 'bottom') {
        style[this.verticalDirection] = "".concat(this.position[1] + this.itemMargin, "px");
      } else {
        style[this.verticalDirection] = "".concat(this.position[1], "px");
      }

      this.mixAnimation(style);
      return style;
    }
  }, {
    key: "css3Animation",
    value: function css3Animation() {
      var _this = this;

      var style = {};
      prefixes.map(function (prefix) {
        var x, y;

        if (_this.horizontalDirection === 'right') {
          x = _this.containerWidth - _this.size.width - _this.position[0] + _this.itemMargin;
        } else {
          x = _this.position[0];
        }

        if (_this.verticalDirection === 'bottom') {
          y = _this.containerHeight - _this.size.height - _this.position[1];
        } else {
          y = _this.position[1];
        }

        style["".concat(prefix, "Transform")] = "translate3d(".concat(x, "px, ").concat(y, "px, 0)");
      });
      this.mixAnimation(style);
      return style;
    }
  }, {
    key: "mixAnimation",
    value: function mixAnimation(style) {
      var _this2 = this;

      if (!this.closeAnimation) {
        prefixes.map(function (prefix) {
          style["".concat(prefix, "TransitionDuration")] = "".concat(_this2.transitionDuration, "s");
          style["".concat(prefix, "TransitionTimingFunction")] = _this2.transitionTimingFunction;
        });
      }
    }
  }]);

  return AnimationManager;
}();

module.exports = AnimationManager;

/***/ }),

/***/ "./node_modules/autoresponsive-react/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/autoresponsive-react/dist/index.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var Core = __webpack_require__(/*! autoresponsive-core */ "./node_modules/autoresponsive-core/dist/index.js");

var GridSort = Core.GridSort;

var AnimationManager = __webpack_require__(/*! ./animation */ "./node_modules/autoresponsive-react/dist/animation.js");

var noop = function noop() {};

var AutoResponsive = function (_React$Component) {
  _inherits(AutoResponsive, _React$Component);

  var _super = _createSuper(AutoResponsive);

  function AutoResponsive(props) {
    var _this;

    _classCallCheck(this, AutoResponsive);

    _this = _super.call(this, props);
    _this.state = {};
    return _this;
  }

  _createClass(AutoResponsive, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      this.sortManager = new GridSort({
        containerWidth: this.props.containerWidth,
        gridWidth: this.props.gridWidth
      });
      this.animationManager = new AnimationManager();
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.containerWidth !== nextProps.containerWidth) {
        this.sortManager.changeProps({
          containerWidth: nextProps.containerWidth
        });
      }
    }
  }, {
    key: "setPrivateProps",
    value: function setPrivateProps() {
      this.containerStyle = {
        position: 'relative',
        height: this.containerHeight || 0
      };

      if (typeof this.props.containerHeight === 'number') {
        this.fixedContainerHeight = true;
        this.containerStyle.height = this.props.containerHeight;
      } else {
        this.fixedContainerHeight = false;
      }
    }
  }, {
    key: "UNSAFE_componentWillUpdate",
    value: function UNSAFE_componentWillUpdate() {
      this.sortManager.init();
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var _this2 = this;

      return React.Children.map(this.props.children, function (child, childIndex) {
        if (child.props.className && _this2.props.itemClassName && !~child.props.className.indexOf(_this2.props.itemClassName)) {
          return;
        }

        var childWidth = parseInt(child.props.style.width, 10) + _this2.props.itemMargin;

        var childHeight = parseInt(child.props.style.height, 10) + _this2.props.itemMargin;

        var calculatedPosition = _this2.sortManager.getPosition(childWidth, childHeight);

        if (!_this2.fixedContainerHeight && _this2.props.containerWidth) {
          if (calculatedPosition[1] + childHeight > _this2.containerStyle.height) {
            _this2.containerStyle.height = calculatedPosition[1] + childHeight;
          }
        }

        var options = Object.assign({}, _this2.props, {
          position: calculatedPosition,
          size: {
            width: childWidth,
            height: childHeight
          },
          containerHeight: _this2.containerStyle.height,
          itemMargin: _this2.props.itemMargin
        });

        var calculatedStyle = _this2.animationManager.generate(options);

        _this2.mixItemInlineStyle(calculatedStyle);

        _this2.props.onItemDidLayout.call(_this2, child);

        if (childIndex + 1 === _this2.props.children.length) {
          _this2.props.onContainerDidLayout.call(_this2);
        }

        return React.cloneElement(child, {
          style: Object.assign({}, child.props.style, calculatedStyle)
        });
      });
    }
  }, {
    key: "mixItemInlineStyle",
    value: function mixItemInlineStyle(s) {
      var itemMargin = this.props.itemMargin;
      var style = {
        display: 'block',
        "float": 'left',
        margin: "0 ".concat(itemMargin, "px ").concat(itemMargin, "px 0")
      };

      if (this.props.containerWidth) {
        style = {
          position: 'absolute'
        };
      }

      Object.assign(s, style);
    }
  }, {
    key: "getContainerStyle",
    value: function getContainerStyle() {
      return this.containerStyle;
    }
  }, {
    key: "render",
    value: function render() {
      this.setPrivateProps();
      return React.createElement("div", {
        ref: "container",
        className: "".concat(this.props.prefixClassName, "-container"),
        style: this.getContainerStyle()
      }, this.renderChildren());
    }
  }]);

  return AutoResponsive;
}(React.Component);

AutoResponsive.defaultProps = {
  containerWidth: null,
  containerHeight: null,
  gridWidth: 10,
  prefixClassName: 'rc-autoresponsive',
  itemClassName: 'item',
  itemMargin: 0,
  horizontalDirection: 'left',
  transitionDuration: 1,
  transitionTimingFunction: 'linear',
  verticalDirection: 'top',
  closeAnimation: false,
  onItemDidLayout: noop,
  onContainerDidLayout: noop
};
module.exports = AutoResponsive;

/***/ }),

/***/ "./node_modules/exenv/index.js":
/*!*************************************!*\
  !*** ./node_modules/exenv/index.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/
/* global define */

(function () {
	'use strict';

	var canUseDOM = !!(
		typeof window !== 'undefined' &&
		window.document &&
		window.document.createElement
	);

	var ExecutionEnvironment = {

		canUseDOM: canUseDOM,

		canUseWorkers: typeof Worker !== 'undefined',

		canUseEventListeners:
			canUseDOM && !!(window.addEventListener || window.attachEvent),

		canUseViewport: canUseDOM && !!window.screen

	};

	if (true) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return ExecutionEnvironment;
		}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}());


/***/ }),

/***/ "./node_modules/next/dist/build/polyfills/object-assign.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/object-assign.js ***!
  \*****************************************************************/
/***/ (function(module) {

"use strict";

var assign = Object.assign.bind(Object);
module.exports = assign;
module.exports.default = module.exports;

//# sourceMappingURL=object-assign.js.map

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F&absolutePagePath=E%3A%5CProjects%5CColorpunx%5Cnextjs%5Cpages%5Cindex.js!":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F&absolutePagePath=E%3A%5CProjects%5CColorpunx%5Cnextjs%5Cpages%5Cindex.js! ***!
  \*********************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {


    (window.__NEXT_P = window.__NEXT_P || []).push([
      "/",
      function () {
        return __webpack_require__(/*! ./pages/index.js */ "./pages/index.js");
      }
    ]);
  

/***/ }),

/***/ "./styles/index.module.css":
/*!*********************************!*\
  !*** ./styles/index.module.css ***!
  \*********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[1]!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[2]!./index.module.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[2]!./styles/index.module.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {};

options.insert = function(element) {
                // These elements should always exist. If they do not,
                // this code should fail.
                var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__');
                var parentNode = anchorElement.parentNode// Normally <head>
                ;
                // Each style tag should be placed right before our
                // anchor. By inserting before and not after, we do not
                // need to track the last inserted element.
                parentNode.insertBefore(element, anchorElement);
            };
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
    if (!a && b || a && !b) {
        return false;
    }
    let p;
    for(p in a){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (a[p] !== b[p]) {
            return false;
        }
    }
    for(p in b){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (!a[p]) {
            return false;
        }
    }
    return true;
};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !!../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[1]!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[2]!./index.module.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[2]!./styles/index.module.css",
      function () {
        content = __webpack_require__(/*! !!../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[1]!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[2]!./index.module.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[2]!./styles/index.module.css");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.id, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js ***!
  \************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

const isOldIE = function isOldIE1() {
    let memo;
    return function memorize() {
        if (typeof memo === 'undefined') {
            // Test for IE <= 9 as proposed by Browserhacks
            // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
            // Tests for existence of standard globals is to allow style-loader
            // to operate correctly into non-standard environments
            // @see https://github.com/webpack-contrib/style-loader/issues/177
            memo = Boolean(window && document && document.all && !window.atob);
        }
        return memo;
    };
}();
const getTarget = function getTarget1() {
    const memo = {
    };
    return function memorize(target) {
        if (typeof memo[target] === 'undefined') {
            let styleTarget = document.querySelector(target);
            // Special case to return head of iframe instead of iframe itself
            if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
                try {
                    // This will throw an exception if access to iframe is blocked
                    // due to cross-origin restrictions
                    styleTarget = styleTarget.contentDocument.head;
                } catch (e) {
                    // istanbul ignore next
                    styleTarget = null;
                }
            }
            memo[target] = styleTarget;
        }
        return memo[target];
    };
}();
const stylesInDom = [];
function getIndexByIdentifier(identifier) {
    let result = -1;
    for(let i = 0; i < stylesInDom.length; i++){
        if (stylesInDom[i].identifier === identifier) {
            result = i;
            break;
        }
    }
    return result;
}
function modulesToDom(list, options) {
    const idCountMap = {
    };
    const identifiers = [];
    for(let i = 0; i < list.length; i++){
        const item = list[i];
        const id = options.base ? item[0] + options.base : item[0];
        const count = idCountMap[id] || 0;
        const identifier = id + ' ' + count.toString();
        idCountMap[id] = count + 1;
        const index = getIndexByIdentifier(identifier);
        const obj = {
            css: item[1],
            media: item[2],
            sourceMap: item[3]
        };
        if (index !== -1) {
            stylesInDom[index].references++;
            stylesInDom[index].updater(obj);
        } else {
            stylesInDom.push({
                identifier: identifier,
                updater: addStyle(obj, options),
                references: 1
            });
        }
        identifiers.push(identifier);
    }
    return identifiers;
}
function insertStyleElement(options) {
    const style = document.createElement('style');
    const attributes = options.attributes || {
    };
    if (typeof attributes.nonce === 'undefined') {
        const nonce = // eslint-disable-next-line no-undef
         true ? __webpack_require__.nc : 0;
        if (nonce) {
            attributes.nonce = nonce;
        }
    }
    Object.keys(attributes).forEach(function(key) {
        style.setAttribute(key, attributes[key]);
    });
    if (typeof options.insert === 'function') {
        options.insert(style);
    } else {
        const target = getTarget(options.insert || 'head');
        if (!target) {
            throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
        }
        target.appendChild(style);
    }
    return style;
}
function removeStyleElement(style) {
    // istanbul ignore if
    if (style.parentNode === null) {
        return false;
    }
    style.parentNode.removeChild(style);
}
/* istanbul ignore next  */ const replaceText = function replaceText1() {
    const textStore = [];
    return function replace(index, replacement) {
        textStore[index] = replacement;
        return textStore.filter(Boolean).join('\n');
    };
}();
function applyToSingletonTag(style, index, remove, obj) {
    const css = remove ? '' : obj.media ? '@media ' + obj.media + ' {' + obj.css + '}' : obj.css;
    // For old IE
    /* istanbul ignore if  */ if (style.styleSheet) {
        style.styleSheet.cssText = replaceText(index, css);
    } else {
        const cssNode = document.createTextNode(css);
        const childNodes = style.childNodes;
        if (childNodes[index]) {
            style.removeChild(childNodes[index]);
        }
        if (childNodes.length) {
            style.insertBefore(cssNode, childNodes[index]);
        } else {
            style.appendChild(cssNode);
        }
    }
}
function applyToTag(style, options, obj) {
    let css = obj.css;
    const media = obj.media;
    const sourceMap = obj.sourceMap;
    if (media) {
        style.setAttribute('media', media);
    } else {
        style.removeAttribute('media');
    }
    if (sourceMap && typeof btoa !== 'undefined') {
        css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */';
    }
    // For old IE
    /* istanbul ignore if  */ if (style.styleSheet) {
        style.styleSheet.cssText = css;
    } else {
        while(style.firstChild){
            style.removeChild(style.firstChild);
        }
        style.appendChild(document.createTextNode(css));
    }
}
let singleton = null;
let singletonCounter = 0;
function addStyle(obj, options) {
    let style;
    let update;
    let remove;
    if (options.singleton) {
        const styleIndex = singletonCounter++;
        style = singleton || (singleton = insertStyleElement(options));
        update = applyToSingletonTag.bind(null, style, styleIndex, false);
        remove = applyToSingletonTag.bind(null, style, styleIndex, true);
    } else {
        style = insertStyleElement(options);
        update = applyToTag.bind(null, style, options);
        remove = function() {
            removeStyleElement(style);
        };
    }
    update(obj);
    return function updateStyle(newObj) {
        if (newObj) {
            if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
                return;
            }
            update(obj = newObj);
        } else {
            remove();
        }
    };
}
module.exports = function(list, options) {
    options = options || {
    };
    // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
    // tags it will allow on a page
    if (!options.singleton && typeof options.singleton !== 'boolean') {
        options.singleton = isOldIE();
    }
    list = list || [];
    let lastIdentifiers = modulesToDom(list, options);
    return function update(newList) {
        newList = newList || [];
        if (Object.prototype.toString.call(newList) !== '[object Array]') {
            return;
        }
        for(let i = 0; i < lastIdentifiers.length; i++){
            const identifier = lastIdentifiers[i];
            const index = getIndexByIdentifier(identifier);
            stylesInDom[index].references--;
        }
        const newLastIdentifiers = modulesToDom(newList, options);
        for(let i1 = 0; i1 < lastIdentifiers.length; i1++){
            const identifier = lastIdentifiers[i1];
            const index = getIndexByIdentifier(identifier);
            if (stylesInDom[index].references === 0) {
                stylesInDom[index].updater();
                stylesInDom.splice(index, 1);
            }
        }
        lastIdentifiers = newLastIdentifiers;
    };
};

//# sourceMappingURL=injectStylesIntoStyleTag.js.map

/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/api.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/api.js ***!
  \***********************************************************/
/***/ (function(module) {

var __dirname = "/";
module.exports=function(){"use strict";var n={762:function(n){n.exports=function(n){var t=[];t.toString=function toString(){return this.map(function(t){var r=cssWithMappingToString(t,n);if(t[2]){return"@media ".concat(t[2]," {").concat(r,"}")}return r}).join("")};t.i=function(n,r,o){if(typeof n==="string"){n=[[null,n,""]]}var e={};if(o){for(var a=0;a<this.length;a++){var c=this[a][0];if(c!=null){e[c]=true}}}for(var i=0;i<n.length;i++){var u=[].concat(n[i]);if(o&&e[u[0]]){continue}if(r){if(!u[2]){u[2]=r}else{u[2]="".concat(r," and ").concat(u[2])}}t.push(u)}};return t};function cssWithMappingToString(n,t){var r=n[1]||"";var o=n[3];if(!o){return r}if(t&&typeof btoa==="function"){var e=toComment(o);var a=o.sources.map(function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")});return[r].concat(a).concat([e]).join("\n")}return[r].join("\n")}function toComment(n){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n))));var r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t);return"/*# ".concat(r," */")}}};var t={};function __nccwpck_require__(r){if(t[r]){return t[r].exports}var o=t[r]={exports:{}};var e=true;try{n[r](o,o.exports,__nccwpck_require__);e=false}finally{if(e)delete t[r]}return o.exports}__nccwpck_require__.ab=__dirname+"/";return __nccwpck_require__(762)}();

/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[2]!./styles/index.module.css":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[2].use[2]!./styles/index.module.css ***!
  \***********************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../node_modules/next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
var ___CSS_LOADER_GET_URL_IMPORT___ = __webpack_require__(/*! ../node_modules/next/dist/compiled/css-loader/getUrl.js */ "./node_modules/next/dist/compiled/css-loader/getUrl.js");
var ___CSS_LOADER_URL_IMPORT_0___ = __webpack_require__(/*! ../public/fonts/Montserrat-Regular.ttf */ "./public/fonts/Montserrat-Regular.ttf");
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);
var ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\r\n    font-family: 'Montserrat';\r\n    font-weight: 400;\r\n    src: local('Montserrat'), url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format('truetype');\r\n}\r\n\r\n.styles_rectanglecolor__CBQlI{\r\n    font-family: \"Montserrat\";\r\n    font-weight: normal;\r\n    position: relative;\r\n    left: 8px;\r\n    bottom: 112px;\r\n    font-size: 12px;\r\n    color: white;\r\n    text-shadow: none;\r\n    z-index: 100;\r\n}\r\n\r\n.styles_box__3qoRh{\r\n    height: 300px;\r\n}\r\n\r\n.styles_textcontainer__sMsli{\r\n    height: 280px;\r\n    width: 580px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    position: relative;\r\n}\r\n\r\n.styles_p1__1_wqU{\r\n    font-family: \"Montserrat\";\r\n    font-weight: 600;\r\n    font-size: 30px;\r\n}\r\n\r\n.styles_p2__-U8Jg{\r\n    font-family: \"Montserrat\";\r\n    font-weight: 300;\r\n    font-size: 21px;\r\n    color: gray;\r\n}\r\n\r\n.styles_c1__1Mzjl{\r\n    margin-top: 30;\r\n    color: 'gray'; \r\n    font-family: \"Montserrat\";\r\n    font-size: 15px;\r\n}\r\n\r\n.styles_c2__3X72l{\r\n    color:'gray';\r\n    font-family: \"Montserrat\";\r\n    font-size: 12px;\r\n}\r\n\r\n.styles_b__1MNV5{\r\n    width: 100%;\r\n    text-align: center;    \r\n    margin-top: 70px;;\r\n    position: absolute;\r\n    bottom: 0px;\r\n}\r\n\r\n\r\n@media only screen and (max-width: 600px) {\r\n\r\n    .styles_p1__1_wqU { \r\n       font-size: 20px; \r\n    }\r\n\r\n    .styles_p2__-U8Jg { \r\n        font-size: 15px; \r\n    }\r\n\r\n    .styles_textcontainer__sMsli{\r\n        width: 100%;\r\n    }\r\n \r\n }\r\n\r\n", "",{"version":3,"sources":["webpack://styles/index.module.css"],"names":[],"mappings":"AAAA;IACI,yBAAyB;IACzB,gBAAgB;IAChB,oFAAwF;AAC5F;;AAEA;IACI,yBAAyB;IACzB,mBAAmB;IACnB,kBAAkB;IAClB,SAAS;IACT,aAAa;IACb,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,yBAAyB;IACzB,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,yBAAyB;IACzB,gBAAgB;IAChB,eAAe;IACf,WAAW;AACf;;AAEA;IACI,cAAc;IACd,aAAa;IACb,yBAAyB;IACzB,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,yBAAyB;IACzB,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,gBAAgB;IAChB,kBAAkB;IAClB,WAAW;AACf;;;AAGA;;IAEI;OACG,eAAe;IAClB;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,WAAW;IACf;;CAEH","sourcesContent":["@font-face {\r\n    font-family: 'Montserrat';\r\n    font-weight: 400;\r\n    src: local('Montserrat'), url(../public/fonts/Montserrat-Regular.ttf) format('truetype');\r\n}\r\n\r\n.rectanglecolor{\r\n    font-family: \"Montserrat\";\r\n    font-weight: normal;\r\n    position: relative;\r\n    left: 8px;\r\n    bottom: 112px;\r\n    font-size: 12px;\r\n    color: white;\r\n    text-shadow: none;\r\n    z-index: 100;\r\n}\r\n\r\n.box{\r\n    height: 300px;\r\n}\r\n\r\n.textcontainer{\r\n    height: 280px;\r\n    width: 580px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    position: relative;\r\n}\r\n\r\n.p1{\r\n    font-family: \"Montserrat\";\r\n    font-weight: 600;\r\n    font-size: 30px;\r\n}\r\n\r\n.p2{\r\n    font-family: \"Montserrat\";\r\n    font-weight: 300;\r\n    font-size: 21px;\r\n    color: gray;\r\n}\r\n\r\n.c1{\r\n    margin-top: 30;\r\n    color: 'gray'; \r\n    font-family: \"Montserrat\";\r\n    font-size: 15px;\r\n}\r\n\r\n.c2{\r\n    color:'gray';\r\n    font-family: \"Montserrat\";\r\n    font-size: 12px;\r\n}\r\n\r\n.b{\r\n    width: 100%;\r\n    text-align: center;    \r\n    margin-top: 70px;;\r\n    position: absolute;\r\n    bottom: 0px;\r\n}\r\n\r\n\r\n@media only screen and (max-width: 600px) {\r\n\r\n    .p1 { \r\n       font-size: 20px; \r\n    }\r\n\r\n    .p2 { \r\n        font-size: 15px; \r\n    }\r\n\r\n    .textcontainer{\r\n        width: 100%;\r\n    }\r\n \r\n }\r\n\r\n"],"sourceRoot":""}]);
// Exports
___CSS_LOADER_EXPORT___.locals = {
	"rectanglecolor": "styles_rectanglecolor__CBQlI",
	"box": "styles_box__3qoRh",
	"textcontainer": "styles_textcontainer__sMsli",
	"p1": "styles_p1__1_wqU",
	"p2": "styles_p2__-U8Jg",
	"c1": "styles_c1__1Mzjl",
	"c2": "styles_c2__3X72l",
	"b": "styles_b__1MNV5"
};
module.exports = ___CSS_LOADER_EXPORT___;


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/getUrl.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/getUrl.js ***!
  \**************************************************************/
/***/ (function(module) {

var __dirname = "/";
module.exports=function(){"use strict";var e={91:function(e){e.exports=function(e,r){if(!r){r={}}e=e&&e.__esModule?e.default:e;if(typeof e!=="string"){return e}if(/^['"].*['"]$/.test(e)){e=e.slice(1,-1)}if(r.hash){e+=r.hash}if(/["'() \t\n]/.test(e)||r.needQuotes){return'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"')}return e}}};var r={};function __nccwpck_require__(t){if(r[t]){return r[t].exports}var _=r[t]={exports:{}};var n=true;try{e[t](_,_.exports,__nccwpck_require__);n=false}finally{if(n)delete r[t]}return _.exports}__nccwpck_require__.ab=__dirname+"/";return __nccwpck_require__(91)}();

/***/ }),

/***/ "./public/fonts/Montserrat-Regular.ttf":
/*!*********************************************!*\
  !*** ./public/fonts/Montserrat-Regular.ttf ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "static/media/Montserrat-Regular.ac98a5f5ca71180fe293683b5ea727a8.ttf");

/***/ }),

/***/ "./node_modules/next/dist/server/denormalize-page-path.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/server/denormalize-page-path.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.normalizePathSep = normalizePathSep;
exports.denormalizePagePath = denormalizePagePath;
function normalizePathSep(path) {
    return path.replace(/\\/g, '/');
}
function denormalizePagePath(page) {
    page = normalizePathSep(page);
    if (page.startsWith('/index/')) {
        page = page.slice(6);
    } else if (page === '/index') {
        page = '/';
    }
    return page;
}

//# sourceMappingURL=denormalize-page-path.js.map

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/client/link */ "./node_modules/next/dist/client/link.js")


/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
/** @license React v17.0.2
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 0xeac7;
var REACT_PORTAL_TYPE = 0xeaca;
var REACT_FRAGMENT_TYPE = 0xeacb;
var REACT_STRICT_MODE_TYPE = 0xeacc;
var REACT_PROFILER_TYPE = 0xead2;
var REACT_PROVIDER_TYPE = 0xeacd;
var REACT_CONTEXT_TYPE = 0xeace;
var REACT_FORWARD_REF_TYPE = 0xead0;
var REACT_SUSPENSE_TYPE = 0xead1;
var REACT_SUSPENSE_LIST_TYPE = 0xead8;
var REACT_MEMO_TYPE = 0xead3;
var REACT_LAZY_TYPE = 0xead4;
var REACT_BLOCK_TYPE = 0xead9;
var REACT_SERVER_BLOCK_TYPE = 0xeada;
var REACT_FUNDAMENTAL_TYPE = 0xead5;
var REACT_SCOPE_TYPE = 0xead7;
var REACT_OPAQUE_ID_TYPE = 0xeae0;
var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
var REACT_OFFSCREEN_TYPE = 0xeae2;
var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  REACT_ELEMENT_TYPE = symbolFor('react.element');
  REACT_PORTAL_TYPE = symbolFor('react.portal');
  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
  REACT_PROFILER_TYPE = symbolFor('react.profiler');
  REACT_PROVIDER_TYPE = symbolFor('react.provider');
  REACT_CONTEXT_TYPE = symbolFor('react.context');
  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
  REACT_MEMO_TYPE = symbolFor('react.memo');
  REACT_LAZY_TYPE = symbolFor('react.lazy');
  REACT_BLOCK_TYPE = symbolFor('react.block');
  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
  REACT_SCOPE_TYPE = symbolFor('react.scope');
  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
}

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

var enableScopeAPI = false; // Experimental Create Event Handle API.

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
      return true;
    }
  }

  return false;
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
          case REACT_SUSPENSE_LIST_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
}
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false;
var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
    }
  }

  return false;
}
function isConcurrentMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
    }
  }

  return false;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}


/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/react-is/cjs/react-is.development.js");
}


/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/** @license React v17.0.2
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var _assign = __webpack_require__(/*! object-assign */ "./node_modules/next/dist/build/polyfills/object-assign.js");

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 0xeac7;
var REACT_PORTAL_TYPE = 0xeaca;
exports.Fragment = 0xeacb;
var REACT_STRICT_MODE_TYPE = 0xeacc;
var REACT_PROFILER_TYPE = 0xead2;
var REACT_PROVIDER_TYPE = 0xeacd;
var REACT_CONTEXT_TYPE = 0xeace;
var REACT_FORWARD_REF_TYPE = 0xead0;
var REACT_SUSPENSE_TYPE = 0xead1;
var REACT_SUSPENSE_LIST_TYPE = 0xead8;
var REACT_MEMO_TYPE = 0xead3;
var REACT_LAZY_TYPE = 0xead4;
var REACT_BLOCK_TYPE = 0xead9;
var REACT_SERVER_BLOCK_TYPE = 0xeada;
var REACT_FUNDAMENTAL_TYPE = 0xead5;
var REACT_SCOPE_TYPE = 0xead7;
var REACT_OPAQUE_ID_TYPE = 0xeae0;
var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
var REACT_OFFSCREEN_TYPE = 0xeae2;
var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  REACT_ELEMENT_TYPE = symbolFor('react.element');
  REACT_PORTAL_TYPE = symbolFor('react.portal');
  exports.Fragment = symbolFor('react.fragment');
  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
  REACT_PROFILER_TYPE = symbolFor('react.profiler');
  REACT_PROVIDER_TYPE = symbolFor('react.provider');
  REACT_CONTEXT_TYPE = symbolFor('react.context');
  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
  REACT_MEMO_TYPE = symbolFor('react.memo');
  REACT_LAZY_TYPE = symbolFor('react.lazy');
  REACT_BLOCK_TYPE = symbolFor('react.block');
  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
  REACT_SCOPE_TYPE = symbolFor('react.scope');
  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
}

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

var enableScopeAPI = false; // Experimental Create Event Handle API.

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
      return true;
    }
  }

  return false;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getContextName(type) {
  return type.displayName || 'Context';
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case exports.Fragment:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentName(init(payload));
          } catch (x) {
            return null;
          }
        }
    }
  }

  return null;
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: _assign({}, props, {
          value: prevLog
        }),
        info: _assign({}, props, {
          value: prevInfo
        }),
        warn: _assign({}, props, {
          value: prevWarn
        }),
        error: _assign({}, props, {
          value: prevError
        }),
        group: _assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: _assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: _assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if (!fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_BLOCK_TYPE:
        return describeFunctionComponentFrame(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown;
var specialPropRefWarningShown;
var didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function warnIfStringRefCannotBeAutoConverted(config, self) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}

function defineKeyPropWarningGetter(props, displayName) {
  {
    var warnAboutAccessingKey = function () {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    };

    warnAboutAccessingKey.isReactWarning = true;
    Object.defineProperty(props, 'key', {
      get: warnAboutAccessingKey,
      configurable: true
    });
  }
}

function defineRefPropWarningGetter(props, displayName) {
  {
    var warnAboutAccessingRef = function () {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    };

    warnAboutAccessingRef.isReactWarning = true;
    Object.defineProperty(props, 'ref', {
      get: warnAboutAccessingRef,
      configurable: true
    });
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */

function jsxDEV(type, config, maybeKey, source, self) {
  {
    var propName; // Reserved names are extracted

    var props = {};
    var key = null;
    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
    // but as an intermediary step, we will use jsxDEV for everything except
    // <div {...props} key="Hi" />, because we aren't currently able to tell if
    // key is explicitly declared to be undefined or not.

    if (maybeKey !== undefined) {
      key = '' + maybeKey;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    if (hasValidRef(config)) {
      ref = config.ref;
      warnIfStringRefCannotBeAutoConverted(config, self);
    } // Remaining properties are added to a new props object


    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    } // Resolve default props


    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;

      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }
    }

    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }

    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
  }
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
}

function getDeclarationErrorAddendum() {
  {
    if (ReactCurrentOwner$1.current) {
      var name = getComponentName(ReactCurrentOwner$1.current.type);

      if (name) {
        return '\n\nCheck the render method of `' + name + '`.';
      }
    }

    return '';
  }
}

function getSourceInfoErrorAddendum(source) {
  {
    if (source !== undefined) {
      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
      var lineNumber = source.lineNumber;
      return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
    }

    return '';
  }
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  {
    var info = getDeclarationErrorAddendum();

    if (!info) {
      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

      if (parentName) {
        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
      }
    }

    return info;
  }
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  {
    if (!element._store || element._store.validated || element.key != null) {
      return;
    }

    element._store.validated = true;
    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
    // property, it may be the creator of the child that's responsible for
    // assigning it a key.

    var childOwner = '';

    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
      // Give the component that originally created this child.
      childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
    }

    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  {
    if (typeof node !== 'object') {
      return;
    }

    if (Array.isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];

        if (isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (isValidElement(node)) {
      // This element was passed in a valid location.
      if (node._store) {
        node._store.validated = true;
      }
    } else if (node) {
      var iteratorFn = getIteratorFn(node);

      if (typeof iteratorFn === 'function') {
        // Entry iterators used to provide implicit keys,
        // but now we print a separate warning for them later.
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step;

          while (!(step = iterator.next()).done) {
            if (isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentName(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentName(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}

function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
  {
    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.

    if (!validType) {
      var info = '';

      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
      }

      var sourceInfo = getSourceInfoErrorAddendum(source);

      if (sourceInfo) {
        info += sourceInfo;
      } else {
        info += getDeclarationErrorAddendum();
      }

      var typeString;

      if (type === null) {
        typeString = 'null';
      } else if (Array.isArray(type)) {
        typeString = 'array';
      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
        typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
        info = ' Did you accidentally export a JSX literal instead of a component?';
      } else {
        typeString = typeof type;
      }

      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }

    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.

    if (element == null) {
      return element;
    } // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)


    if (validType) {
      var children = props.children;

      if (children !== undefined) {
        if (isStaticChildren) {
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              validateChildKeys(children[i], type);
            }

            if (Object.freeze) {
              Object.freeze(children);
            }
          } else {
            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
          }
        } else {
          validateChildKeys(children, type);
        }
      }
    }

    if (type === exports.Fragment) {
      validateFragmentProps(element);
    } else {
      validatePropTypes(element);
    }

    return element;
  }
} // These two functions exist to still get child warnings in dev

var jsxDEV$1 =  jsxWithValidation ;

exports.jsxDEV = jsxDEV$1;
  })();
}


/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var _assign = __webpack_require__(/*! object-assign */ "./node_modules/next/dist/build/polyfills/object-assign.js");

// TODO: this is special because it gets imported during build.
var ReactVersion = '17.0.2';

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 0xeac7;
var REACT_PORTAL_TYPE = 0xeaca;
exports.Fragment = 0xeacb;
exports.StrictMode = 0xeacc;
exports.Profiler = 0xead2;
var REACT_PROVIDER_TYPE = 0xeacd;
var REACT_CONTEXT_TYPE = 0xeace;
var REACT_FORWARD_REF_TYPE = 0xead0;
exports.Suspense = 0xead1;
var REACT_SUSPENSE_LIST_TYPE = 0xead8;
var REACT_MEMO_TYPE = 0xead3;
var REACT_LAZY_TYPE = 0xead4;
var REACT_BLOCK_TYPE = 0xead9;
var REACT_SERVER_BLOCK_TYPE = 0xeada;
var REACT_FUNDAMENTAL_TYPE = 0xead5;
var REACT_SCOPE_TYPE = 0xead7;
var REACT_OPAQUE_ID_TYPE = 0xeae0;
var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
var REACT_OFFSCREEN_TYPE = 0xeae2;
var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  REACT_ELEMENT_TYPE = symbolFor('react.element');
  REACT_PORTAL_TYPE = symbolFor('react.portal');
  exports.Fragment = symbolFor('react.fragment');
  exports.StrictMode = symbolFor('react.strict_mode');
  exports.Profiler = symbolFor('react.profiler');
  REACT_PROVIDER_TYPE = symbolFor('react.provider');
  REACT_CONTEXT_TYPE = symbolFor('react.context');
  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
  exports.Suspense = symbolFor('react.suspense');
  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
  REACT_MEMO_TYPE = symbolFor('react.memo');
  REACT_LAZY_TYPE = symbolFor('react.lazy');
  REACT_BLOCK_TYPE = symbolFor('react.block');
  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
  REACT_SCOPE_TYPE = symbolFor('react.scope');
  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
}

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  transition: 0
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var ReactDebugCurrentFrame = {};
var currentExtraStackFrame = null;
function setExtraStackFrame(stack) {
  {
    currentExtraStackFrame = stack;
  }
}

{
  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
    {
      currentExtraStackFrame = stack;
    }
  }; // Stack implementation injected by the current renderer.


  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentExtraStackFrame) {
      stack += currentExtraStackFrame;
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

/**
 * Used by act() to track whether you're inside an act() scope.
 */
var IsSomeRendererActing = {
  current: false
};

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner,
  IsSomeRendererActing: IsSomeRendererActing,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: _assign
};

{
  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
    {
      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
    }
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

_assign(pureComponentPrototype, Component.prototype);

pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getContextName(type) {
  return type.displayName || 'Context';
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case exports.Fragment:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case exports.Profiler:
      return 'Profiler';

    case exports.StrictMode:
      return 'StrictMode';

    case exports.Suspense:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentName(init(payload));
          } catch (x) {
            return null;
          }
        }
    }
  }

  return null;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

function warnIfStringRefCannotBeAutoConverted(config) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;

      {
        warnIfStringRefCannotBeAutoConverted(config);
      }
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (!!(element === null || element === undefined)) {
    {
      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
    }
  }

  var propName; // Original props are copied

  var props = _assign({}, element.props); // Reserved names are extracted


  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = key.replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return text.replace(userProvidedKeyEscapeRegex, '$&/');
}
/**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getElementKey(element, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof element === 'object' && element !== null && element.key != null) {
    // Explicit key
    return escape('' + element.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    var _child = children;
    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows:

    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

    if (Array.isArray(mappedChild)) {
      var escapedChildKey = '';

      if (childKey != null) {
        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
      }

      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
        return c;
      });
    } else if (mappedChild != null) {
      if (isValidElement(mappedChild)) {
        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
        // traverseAllChildren used to do for objects as children
        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
      }

      array.push(mappedChild);
    }

    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getElementKey(child, i);
      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {
      var iterableChildren = children;

      {
        // Warn about using Maps as children
        if (iteratorFn === iterableChildren.entries) {
          if (!didWarnAboutMaps) {
            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(iterableChildren);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getElementKey(child, ii++);
        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
      }
    } else if (type === 'object') {
      var childrenString = '' + children;

      {
        {
          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead." );
        }
      }
    }
  }

  return subtreeCount;
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  var count = 0;
  mapIntoArray(children, result, '', '', function (child) {
    return func.call(context, child, count++);
  });
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  var n = 0;
  mapChildren(children, function () {
    n++; // Don't return anything
  });
  return n;
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  mapChildren(children, function () {
    forEachFunc.apply(this, arguments); // Don't return anything.
  }, forEachContext);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  return mapChildren(children, function (child) {
    return child;
  }) || [];
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    {
      throw Error( "React.Children.only expected to receive a single React element child." );
    }
  }

  return children;
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
      }
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;
  var hasWarnedAboutDisplayNameOnConsumer = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context,
      _calculateChangedBits: context._calculateChangedBits
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;

            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;

            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      },
      displayName: {
        get: function () {
          return context.displayName;
        },
        set: function (displayName) {
          if (!hasWarnedAboutDisplayNameOnConsumer) {
            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

            hasWarnedAboutDisplayNameOnConsumer = true;
          }
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;

function lazyInitializer(payload) {
  if (payload._status === Uninitialized) {
    var ctor = payload._result;
    var thenable = ctor(); // Transition to the next state.

    var pending = payload;
    pending._status = Pending;
    pending._result = thenable;
    thenable.then(function (moduleObject) {
      if (payload._status === Pending) {
        var defaultExport = moduleObject.default;

        {
          if (defaultExport === undefined) {
            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
          }
        } // Transition to the next state.


        var resolved = payload;
        resolved._status = Resolved;
        resolved._result = defaultExport;
      }
    }, function (error) {
      if (payload._status === Pending) {
        // Transition to the next state.
        var rejected = payload;
        rejected._status = Rejected;
        rejected._result = error;
      }
    });
  }

  if (payload._status === Resolved) {
    return payload._result;
  } else {
    throw payload._result;
  }
}

function lazy(ctor) {
  var payload = {
    // We use these fields to store the result.
    _status: -1,
    _result: ctor
  };
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _payload: payload,
    _init: lazyInitializer
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes; // $FlowFixMe

    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          defaultProps = newDefaultProps; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          propTypes = newPropTypes; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      if (render.length !== 0 && render.length !== 2) {
        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
      }
    }

    if (render != null) {
      if (render.defaultProps != null || render.propTypes != null) {
        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
      }
    }
  }

  var elementType = {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name;

        if (render.displayName == null) {
          render.displayName = name;
        }
      }
    });
  }

  return elementType;
}

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

var enableScopeAPI = false; // Experimental Create Event Handle API.

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
      return true;
    }
  }

  return false;
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  var elementType = {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name;

        if (type.displayName == null) {
          type.displayName = name;
        }
      }
    });
  }

  return elementType;
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  if (!(dispatcher !== null)) {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }

  return dispatcher;
}

function useContext(Context, unstable_observedBits) {
  var dispatcher = resolveDispatcher();

  {
    if (unstable_observedBits !== undefined) {
      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
    } // TODO: add a more generic warning for invalid values.


    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context, unstable_observedBits);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, deps);
}
function useLayoutEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, deps);
}
function useCallback(callback, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, deps);
}
function useMemo(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, deps);
}
function useImperativeHandle(ref, create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, deps);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: _assign({}, props, {
          value: prevLog
        }),
        info: _assign({}, props, {
          value: prevInfo
        }),
        warn: _assign({}, props, {
          value: prevWarn
        }),
        error: _assign({}, props, {
          value: prevError
        }),
        group: _assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: _assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: _assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if (!fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher$1.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher$1.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case exports.Suspense:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_BLOCK_TYPE:
        return describeFunctionComponentFrame(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      setExtraStackFrame(stack);
    } else {
      setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
  }

  {
    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentName(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentName(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    {
      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === exports.Fragment) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
var didWarnAboutDeprecatedCreateFactory = false;
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;

  {
    if (!didWarnAboutDeprecatedCreateFactory) {
      didWarnAboutDeprecatedCreateFactory = true;

      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
    } // Legacy hook: remove it


    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

{

  try {
    var frozenObject = Object.freeze({});
    /* eslint-disable no-new */

    new Map([[frozenObject, null]]);
    new Set([frozenObject]);
    /* eslint-enable no-new */
  } catch (e) {
  }
}

var createElement$1 =  createElementWithValidation ;
var cloneElement$1 =  cloneElementWithValidation ;
var createFactory =  createFactoryWithValidation ;
var Children = {
  map: mapChildren,
  forEach: forEachChildren,
  count: countChildren,
  toArray: toArray,
  only: onlyChild
};

exports.Children = Children;
exports.Component = Component;
exports.PureComponent = PureComponent;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
exports.cloneElement = cloneElement$1;
exports.createContext = createContext;
exports.createElement = createElement$1;
exports.createFactory = createFactory;
exports.createRef = createRef;
exports.forwardRef = forwardRef;
exports.isValidElement = isValidElement;
exports.lazy = lazy;
exports.memo = memo;
exports.useCallback = useCallback;
exports.useContext = useContext;
exports.useDebugValue = useDebugValue;
exports.useEffect = useEffect;
exports.useImperativeHandle = useImperativeHandle;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useReducer = useReducer;
exports.useRef = useRef;
exports.useState = useState;
exports.version = ReactVersion;
  })();
}


/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/react/cjs/react.development.js");
}


/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js");
}


/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ (function(module) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "?5c99":
/*!******************************************!*\
  !*** ./utils/resolve-rewrites (ignored) ***!
  \******************************************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _assertThisInitialized; }
/* harmony export */ });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _classCallCheck; }
/* harmony export */ });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _createClass; }
/* harmony export */ });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _defineProperty; }
/* harmony export */ });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _getPrototypeOf; }
/* harmony export */ });
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/inherits.js":
/*!*************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/inherits.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _inherits; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/setPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) (0,_babel_runtime_helpers_esm_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__.default)(subClass, superClass);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _possibleConstructorReturn; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");


function _possibleConstructorReturn(self, call) {
  if (call && ((0,_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__.default)(call) === "object" || typeof call === "function")) {
    return call;
  }

  return (0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__.default)(self);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _setPrototypeOf; }
/* harmony export */ });
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _typeof; }
/* harmony export */ });
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ var __webpack_exports__ = (__webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F&absolutePagePath=E%3A%5CProjects%5CColorpunx%5Cnextjs%5Cpages%5Cindex.js!"));
/******/ _N_E = __webpack_exports__;
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,